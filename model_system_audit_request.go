/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// SystemAuditRequest struct for SystemAuditRequest
type SystemAuditRequest struct {
	// User-friendly description for this audit backend.
	Description *string `json:"description,omitempty"`
	// Mark the mount as a local mount, which is not replicated and is unaffected by replication.
	Local *bool `json:"local,omitempty"`
	// Configuration options for the audit backend.
	Options map[string]interface{} `json:"options,omitempty"`
	// The type of the backend. Example: \"mysql\"
	Type *string `json:"type,omitempty"`
}

// NewSystemAuditRequest instantiates a new SystemAuditRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemAuditRequest() *SystemAuditRequest {
	this := SystemAuditRequest{}
	var local bool = false
	this.Local = &local
	return &this
}

// NewSystemAuditRequestWithDefaults instantiates a new SystemAuditRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemAuditRequestWithDefaults() *SystemAuditRequest {
	this := SystemAuditRequest{}
	var local bool = false
	this.Local = &local
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SystemAuditRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemAuditRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SystemAuditRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SystemAuditRequest) SetDescription(v string) {
	o.Description = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *SystemAuditRequest) GetLocal() bool {
	if o == nil || o.Local == nil {
		var ret bool
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemAuditRequest) GetLocalOk() (*bool, bool) {
	if o == nil || o.Local == nil {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *SystemAuditRequest) HasLocal() bool {
	if o != nil && o.Local != nil {
		return true
	}

	return false
}

// SetLocal gets a reference to the given bool and assigns it to the Local field.
func (o *SystemAuditRequest) SetLocal(v bool) {
	o.Local = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SystemAuditRequest) GetOptions() map[string]interface{} {
	if o == nil || o.Options == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemAuditRequest) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SystemAuditRequest) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *SystemAuditRequest) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SystemAuditRequest) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemAuditRequest) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SystemAuditRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SystemAuditRequest) SetType(v string) {
	o.Type = &v
}

func (o SystemAuditRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Local != nil {
		toSerialize["local"] = o.Local
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSystemAuditRequest struct {
	value *SystemAuditRequest
	isSet bool
}

func (v NullableSystemAuditRequest) Get() *SystemAuditRequest {
	return v.value
}

func (v *NullableSystemAuditRequest) Set(val *SystemAuditRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemAuditRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemAuditRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemAuditRequest(val *SystemAuditRequest) *NullableSystemAuditRequest {
	return &NullableSystemAuditRequest{value: val, isSet: true}
}

func (v NullableSystemAuditRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemAuditRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


