/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Auth is a simple wrapper around the client for Auth requests
type Auth struct {
	client *Client
}

// DeleteAuthAlicloudRoleRole Create a role and associate policies to it.
// role: The name of the role as it should appear in Vault.
func (a *Auth) DeleteAuthAlicloudRoleRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/alicloud/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAppIdMapAppIdKey Read/write/delete a single app-id mapping
// key: Key for the app-id mapping
func (a *Auth) DeleteAuthAppIdMapAppIdKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/app-id/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAppIdMapUserIdKey Read/write/delete a single user-id mapping
// key: Key for the user-id mapping
func (a *Auth) DeleteAuthAppIdMapUserIdKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/user-id/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleName Register an role with the backend.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleName(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameBindSecretId Impose secret_id to be presented during login using this role.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameBindSecretId(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameBoundCidrList Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameBoundCidrList(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNamePeriod Updates the value of 'period' on the role
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNamePeriod(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNamePolicies Policies of the role.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNamePolicies(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameSecretIdAccessorDestroy(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-accessor/destroy"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameSecretIdBoundCidrs(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameSecretIdDestroy Invalidate an issued secret_id
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameSecretIdDestroy(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id/destroy"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameSecretIdNumUses Use limit of the SecretID generated against the role.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameSecretIdNumUses(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameSecretIdTtl Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using 'role/<role_name>/secret-id' or 'role/<role_name>/custom-secret-id' endpoints.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameSecretIdTtl(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameTokenBoundCidrs Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameTokenBoundCidrs(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameTokenMaxTtl Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameTokenMaxTtl(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameTokenNumUses Number of times issued tokens can be used
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameTokenNumUses(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthApproleRoleRoleNameTokenTtl Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
// roleName: Name of the role.
func (a *Auth) DeleteAuthApproleRoleRoleNameTokenTtl(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigCertificateCertName
// certName: Name of the certificate.
func (a *Auth) DeleteAuthAwsConfigCertificateCertName(ctx context.Context, certName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigClient
func (a *Auth) DeleteAuthAwsConfigClient(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/client"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigStsAccountId
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
func (a *Auth) DeleteAuthAwsConfigStsAccountId(ctx context.Context, accountId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigTidyIdentityAccesslist
func (a *Auth) DeleteAuthAwsConfigTidyIdentityAccesslist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/identity-accesslist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigTidyIdentityWhitelist
func (a *Auth) DeleteAuthAwsConfigTidyIdentityWhitelist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/identity-whitelist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigTidyRoletagBlacklist
func (a *Auth) DeleteAuthAwsConfigTidyRoletagBlacklist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/roletag-blacklist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsConfigTidyRoletagDenylist
func (a *Auth) DeleteAuthAwsConfigTidyRoletagDenylist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/roletag-denylist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsIdentityAccesslistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) DeleteAuthAwsIdentityAccesslistInstanceId(ctx context.Context, instanceId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/identity-accesslist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsIdentityWhitelistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) DeleteAuthAwsIdentityWhitelistInstanceId(ctx context.Context, instanceId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/identity-whitelist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsRoleRole
// role: Name of the role.
func (a *Auth) DeleteAuthAwsRoleRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsRoletagBlacklistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) DeleteAuthAwsRoletagBlacklistRoleTag(ctx context.Context, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAwsRoletagDenylistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) DeleteAuthAwsRoletagDenylistRoleTag(ctx context.Context, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAzureConfig
func (a *Auth) DeleteAuthAzureConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthAzureRoleName
// name: Name of the role.
func (a *Auth) DeleteAuthAzureRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthCertCertsName Manage trusted certificates used for authentication.
// name: The name of the certificate
func (a *Auth) DeleteAuthCertCertsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthCertCrlsName Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
func (a *Auth) DeleteAuthCertCrlsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthCfConfig
func (a *Auth) DeleteAuthCfConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthCfRolesRole
// role: The name of the role.
func (a *Auth) DeleteAuthCfRolesRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthGcpRoleName Create a GCP role with associated policies and required attributes.
// name: Name of the role.
func (a *Auth) DeleteAuthGcpRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthGithubMapTeamsKey Read/write/delete a single teams mapping
// key: Key for the teams mapping
func (a *Auth) DeleteAuthGithubMapTeamsKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthGithubMapUsersKey Read/write/delete a single users mapping
// key: Key for the users mapping
func (a *Auth) DeleteAuthGithubMapUsersKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthJwtRoleName Delete an existing role.
// name: Name of the role.
func (a *Auth) DeleteAuthJwtRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthKerberosGroupsName
// name: Name of the LDAP group.
func (a *Auth) DeleteAuthKerberosGroupsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthKubernetesRoleName Register an role with the backend.
// name: Name of the role.
func (a *Auth) DeleteAuthKubernetesRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthLdapGroupsName Manage additional groups for users allowed to authenticate.
// name: Name of the LDAP group.
func (a *Auth) DeleteAuthLdapGroupsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthLdapUsersName Manage users allowed to authenticate.
// name: Name of the LDAP user.
func (a *Auth) DeleteAuthLdapUsersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthOciConfig Manages the configuration for the Vault Auth Plugin.
func (a *Auth) DeleteAuthOciConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthOciRoleRole Create a role and associate policies to it.
// role: Name of the role.
func (a *Auth) DeleteAuthOciRoleRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthOidcRoleName Delete an existing role.
// name: Name of the role.
func (a *Auth) DeleteAuthOidcRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthOktaGroupsName Manage users allowed to authenticate.
// name: Name of the Okta group.
func (a *Auth) DeleteAuthOktaGroupsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthOktaUsersName Manage additional groups for users allowed to authenticate.
// name: Name of the user.
func (a *Auth) DeleteAuthOktaUsersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthRadiusUsersName Manage users allowed to authenticate.
// name: Name of the RADIUS user.
func (a *Auth) DeleteAuthRadiusUsersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthTokenRolesRoleName
// roleName: Name of the role
func (a *Auth) DeleteAuthTokenRolesRoleName(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAuthUserpassUsersUsername Manage users allowed to authenticate.
// username: Username for this user.
func (a *Auth) DeleteAuthUserpassUsersUsername(ctx context.Context, username string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAlicloudRole Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAlicloudRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/alicloud/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAlicloudRoleRole Create a role and associate policies to it.
// role: The name of the role as it should appear in Vault.
func (a *Auth) GetAuthAlicloudRoleRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/alicloud/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAlicloudRoles Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAlicloudRoles(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/alicloud/roles"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAppIdMapAppId Read mappings for app-id
// list: Return a list if &#x60;true&#x60;
func (a *Auth) GetAuthAppIdMapAppId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/app-id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAppIdMapAppIdKey Read/write/delete a single app-id mapping
// key: Key for the app-id mapping
func (a *Auth) GetAuthAppIdMapAppIdKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/app-id/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAppIdMapUserId Read mappings for user-id
// list: Return a list if &#x60;true&#x60;
func (a *Auth) GetAuthAppIdMapUserId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/user-id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAppIdMapUserIdKey Read/write/delete a single user-id mapping
// key: Key for the user-id mapping
func (a *Auth) GetAuthAppIdMapUserIdKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/user-id/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRole Lists all the roles registered with the backend.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthApproleRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleName Register an role with the backend.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleName(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameBindSecretId Impose secret_id to be presented during login using this role.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameBindSecretId(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameBoundCidrList Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameBoundCidrList(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameLocalSecretIds Enables cluster local secret IDs
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameLocalSecretIds(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/local-secret-ids"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNamePeriod Updates the value of 'period' on the role
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNamePeriod(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNamePolicies Policies of the role.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNamePolicies(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameRoleId Returns the 'role_id' of the role.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameRoleId(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/role-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameSecretId Generate a SecretID against this role.
// roleName: Name of the role.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthApproleRoleRoleNameSecretId(ctx context.Context, roleName string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameSecretIdBoundCidrs Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameSecretIdBoundCidrs(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameSecretIdNumUses Use limit of the SecretID generated against the role.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameSecretIdNumUses(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameSecretIdTtl Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using 'role/<role_name>/secret-id' or 'role/<role_name>/custom-secret-id' endpoints.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameSecretIdTtl(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameTokenBoundCidrs Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameTokenBoundCidrs(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameTokenMaxTtl Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameTokenMaxTtl(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameTokenNumUses Number of times issued tokens can be used
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameTokenNumUses(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthApproleRoleRoleNameTokenTtl Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
// roleName: Name of the role.
func (a *Auth) GetAuthApproleRoleRoleNameTokenTtl(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigCertificateCertName
// certName: Name of the certificate.
func (a *Auth) GetAuthAwsConfigCertificateCertName(ctx context.Context, certName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigCertificates
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsConfigCertificates(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/certificates"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigClient
func (a *Auth) GetAuthAwsConfigClient(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/client"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigIdentity
func (a *Auth) GetAuthAwsConfigIdentity(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/identity"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigSts
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsConfigSts(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/sts"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigStsAccountId
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
func (a *Auth) GetAuthAwsConfigStsAccountId(ctx context.Context, accountId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigTidyIdentityAccesslist
func (a *Auth) GetAuthAwsConfigTidyIdentityAccesslist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/identity-accesslist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigTidyIdentityWhitelist
func (a *Auth) GetAuthAwsConfigTidyIdentityWhitelist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/identity-whitelist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigTidyRoletagBlacklist
func (a *Auth) GetAuthAwsConfigTidyRoletagBlacklist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/roletag-blacklist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsConfigTidyRoletagDenylist
func (a *Auth) GetAuthAwsConfigTidyRoletagDenylist(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/roletag-denylist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsIdentityAccesslist
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsIdentityAccesslist(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/identity-accesslist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsIdentityAccesslistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) GetAuthAwsIdentityAccesslistInstanceId(ctx context.Context, instanceId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/identity-accesslist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsIdentityWhitelist
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsIdentityWhitelist(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/identity-whitelist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsIdentityWhitelistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) GetAuthAwsIdentityWhitelistInstanceId(ctx context.Context, instanceId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/identity-whitelist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRole
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRoleRole
// role: Name of the role.
func (a *Auth) GetAuthAwsRoleRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRoles
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsRoles(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roles"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRoletagBlacklist
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsRoletagBlacklist(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-blacklist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRoletagBlacklistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) GetAuthAwsRoletagBlacklistRoleTag(ctx context.Context, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRoletagDenylist
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAwsRoletagDenylist(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-denylist"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAwsRoletagDenylistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) GetAuthAwsRoletagDenylistRoleTag(ctx context.Context, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAzureConfig
func (a *Auth) GetAuthAzureConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAzureRole
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthAzureRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthAzureRoleName
// name: Name of the role.
func (a *Auth) GetAuthAzureRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCentrifyConfig This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
func (a *Auth) GetAuthCentrifyConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/centrify/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCertCerts Manage trusted certificates used for authentication.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthCertCerts(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/certs"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCertCertsName Manage trusted certificates used for authentication.
// name: The name of the certificate
func (a *Auth) GetAuthCertCertsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCertCrlsName Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
func (a *Auth) GetAuthCertCrlsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCfConfig
func (a *Auth) GetAuthCfConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCfRoles
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthCfRoles(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/roles"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthCfRolesRole
// role: The name of the role.
func (a *Auth) GetAuthCfRolesRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGcpConfig Configure credentials used to query the GCP IAM API to verify authenticating service accounts
func (a *Auth) GetAuthGcpConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGcpRole Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthGcpRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGcpRoleName Create a GCP role with associated policies and required attributes.
// name: Name of the role.
func (a *Auth) GetAuthGcpRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGcpRoles Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthGcpRoles(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/roles"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGithubConfig
func (a *Auth) GetAuthGithubConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGithubMapTeams Read mappings for teams
// list: Return a list if &#x60;true&#x60;
func (a *Auth) GetAuthGithubMapTeams(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/teams"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGithubMapTeamsKey Read/write/delete a single teams mapping
// key: Key for the teams mapping
func (a *Auth) GetAuthGithubMapTeamsKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGithubMapUsers Read mappings for users
// list: Return a list if &#x60;true&#x60;
func (a *Auth) GetAuthGithubMapUsers(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/users"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthGithubMapUsersKey Read/write/delete a single users mapping
// key: Key for the users mapping
func (a *Auth) GetAuthGithubMapUsersKey(ctx context.Context, key string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthJwtConfig Read the current JWT authentication backend configuration.
func (a *Auth) GetAuthJwtConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthJwtOidcCallback Callback endpoint to complete an OIDC login.
func (a *Auth) GetAuthJwtOidcCallback(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/oidc/callback"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthJwtRole Lists all the roles registered with the backend.
// The list will contain the names of the roles.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthJwtRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthJwtRoleName Read an existing role.
// name: Name of the role.
func (a *Auth) GetAuthJwtRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKerberosConfig
func (a *Auth) GetAuthKerberosConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKerberosConfigLdap
func (a *Auth) GetAuthKerberosConfigLdap(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/config/ldap"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKerberosGroups
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthKerberosGroups(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/groups"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKerberosGroupsName
// name: Name of the LDAP group.
func (a *Auth) GetAuthKerberosGroupsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKerberosLogin
func (a *Auth) GetAuthKerberosLogin(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/login"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKubernetesConfig Configures the JWT Public Key and Kubernetes API information.
func (a *Auth) GetAuthKubernetesConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKubernetesRole Lists all the roles registered with the backend.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthKubernetesRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthKubernetesRoleName Register an role with the backend.
// name: Name of the role.
func (a *Auth) GetAuthKubernetesRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthLdapConfig Configure the LDAP server to connect to, along with its options.
func (a *Auth) GetAuthLdapConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthLdapGroups Manage additional groups for users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthLdapGroups(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/groups"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthLdapGroupsName Manage additional groups for users allowed to authenticate.
// name: Name of the LDAP group.
func (a *Auth) GetAuthLdapGroupsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthLdapUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthLdapUsers(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/users"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthLdapUsersName Manage users allowed to authenticate.
// name: Name of the LDAP user.
func (a *Auth) GetAuthLdapUsersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOciConfig Manages the configuration for the Vault Auth Plugin.
func (a *Auth) GetAuthOciConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOciRole Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthOciRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOciRoleRole Create a role and associate policies to it.
// role: Name of the role.
func (a *Auth) GetAuthOciRoleRole(ctx context.Context, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOidcConfig Read the current JWT authentication backend configuration.
func (a *Auth) GetAuthOidcConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOidcOidcCallback Callback endpoint to complete an OIDC login.
func (a *Auth) GetAuthOidcOidcCallback(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/oidc/callback"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOidcRole Lists all the roles registered with the backend.
// The list will contain the names of the roles.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthOidcRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOidcRoleName Read an existing role.
// name: Name of the role.
func (a *Auth) GetAuthOidcRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOktaConfig This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
func (a *Auth) GetAuthOktaConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOktaGroups Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthOktaGroups(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/groups"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOktaGroupsName Manage users allowed to authenticate.
// name: Name of the Okta group.
func (a *Auth) GetAuthOktaGroupsName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOktaUsers Manage additional groups for users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthOktaUsers(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/users"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOktaUsersName Manage additional groups for users allowed to authenticate.
// name: Name of the user.
func (a *Auth) GetAuthOktaUsersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthOktaVerifyNonce
// nonce: Nonce provided during a login request to retrieve the number verification challenge for the matching request.
func (a *Auth) GetAuthOktaVerifyNonce(ctx context.Context, nonce string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/verify/{nonce}"
	requestPath = strings.Replace(requestPath, "{"+"nonce"+"}", url.PathEscape(nonce), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthRadiusConfig Configure the RADIUS server to connect to, along with its options.
func (a *Auth) GetAuthRadiusConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthRadiusUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthRadiusUsers(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/users"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthRadiusUsersName Manage users allowed to authenticate.
// name: Name of the RADIUS user.
func (a *Auth) GetAuthRadiusUsersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthTokenAccessors List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires 'sudo' capability in addition to 'list'.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthTokenAccessors(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/accessors/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthTokenLookup This endpoint will lookup a token and its properties.
func (a *Auth) GetAuthTokenLookup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/lookup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthTokenLookupSelf This endpoint will lookup a token and its properties.
func (a *Auth) GetAuthTokenLookupSelf(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/lookup-self"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthTokenRoles This endpoint lists configured roles.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthTokenRoles(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/roles"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthTokenRolesRoleName
// roleName: Name of the role
func (a *Auth) GetAuthTokenRolesRoleName(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthUserpassUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GetAuthUserpassUsers(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/users"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetAuthUserpassUsersUsername Manage users allowed to authenticate.
// username: Username for this user.
func (a *Auth) GetAuthUserpassUsersUsername(ctx context.Context, username string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthAlicloudLogin Authenticates an RAM entity with Vault.
func (a *Auth) PostAuthAlicloudLogin(ctx context.Context, alicloudLoginRequest AlicloudLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/alicloud/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		alicloudLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthAlicloudRoleRole Create a role and associate policies to it.
// role: The name of the role as it should appear in Vault.
func (a *Auth) PostAuthAlicloudRoleRole(ctx context.Context, role string, alicloudRoleRequest AlicloudRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/alicloud/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		alicloudRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthAppIdLogin Log in with an App ID and User ID.
func (a *Auth) PostAuthAppIdLogin(ctx context.Context, appIdLoginRequest AppIdLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appIdLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthAppIdLoginAppId Log in with an App ID and User ID.
// appId: The unique app ID
func (a *Auth) PostAuthAppIdLoginAppId(ctx context.Context, appId string, appIdLoginRequest AppIdLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/login/{app_id}"
	requestPath = strings.Replace(requestPath, "{"+"app_id"+"}", url.PathEscape(appId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appIdLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthAppIdMapAppIdKey Read/write/delete a single app-id mapping
// key: Key for the app-id mapping
func (a *Auth) PostAuthAppIdMapAppIdKey(ctx context.Context, key string, appIdMapAppIdRequest AppIdMapAppIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/app-id/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appIdMapAppIdRequest,
		nil, // request query parameters
	)
}

// PostAuthAppIdMapUserIdKey Read/write/delete a single user-id mapping
// key: Key for the user-id mapping
func (a *Auth) PostAuthAppIdMapUserIdKey(ctx context.Context, key string, appIdMapUserIdRequest AppIdMapUserIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/app-id/map/user-id/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appIdMapUserIdRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleLogin
func (a *Auth) PostAuthApproleLogin(ctx context.Context, approleLoginRequest ApproleLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleName Register an role with the backend.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleName(ctx context.Context, roleName string, approleRoleRequest ApproleRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameBindSecretId Impose secret_id to be presented during login using this role.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameBindSecretId(ctx context.Context, roleName string, approleRoleBindSecretIdRequest ApproleRoleBindSecretIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleBindSecretIdRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameBoundCidrList Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameBoundCidrList(ctx context.Context, roleName string, approleRoleBoundCidrListRequest ApproleRoleBoundCidrListRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleBoundCidrListRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameCustomSecretId Assign a SecretID of choice against the role.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameCustomSecretId(ctx context.Context, roleName string, approleRoleCustomSecretIdRequest ApproleRoleCustomSecretIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/custom-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleCustomSecretIdRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNamePeriod Updates the value of 'period' on the role
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNamePeriod(ctx context.Context, roleName string, approleRolePeriodRequest ApproleRolePeriodRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRolePeriodRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNamePolicies Policies of the role.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNamePolicies(ctx context.Context, roleName string, approleRolePoliciesRequest ApproleRolePoliciesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRolePoliciesRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameRoleId Returns the 'role_id' of the role.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameRoleId(ctx context.Context, roleName string, approleRoleRoleIdRequest ApproleRoleRoleIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/role-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleRoleIdRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretId Generate a SecretID against this role.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretId(ctx context.Context, roleName string, approleRoleSecretIdRequest ApproleRoleSecretIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdAccessorDestroy
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdAccessorDestroy(ctx context.Context, roleName string, approleRoleSecretIdAccessorDestroyRequest ApproleRoleSecretIdAccessorDestroyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-accessor/destroy"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdAccessorDestroyRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdAccessorLookup
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdAccessorLookup(ctx context.Context, roleName string, approleRoleSecretIdAccessorLookupRequest ApproleRoleSecretIdAccessorLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-accessor/lookup"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdAccessorLookupRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdBoundCidrs Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdBoundCidrs(ctx context.Context, roleName string, approleRoleSecretIdBoundCidrsRequest ApproleRoleSecretIdBoundCidrsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdBoundCidrsRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdDestroy Invalidate an issued secret_id
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdDestroy(ctx context.Context, roleName string, approleRoleSecretIdDestroyRequest ApproleRoleSecretIdDestroyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id/destroy"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdDestroyRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdLookup Read the properties of an issued secret_id
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdLookup(ctx context.Context, roleName string, approleRoleSecretIdLookupRequest ApproleRoleSecretIdLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id/lookup"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdLookupRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdNumUses Use limit of the SecretID generated against the role.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdNumUses(ctx context.Context, roleName string, approleRoleSecretIdNumUsesRequest ApproleRoleSecretIdNumUsesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdNumUsesRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameSecretIdTtl Duration in seconds, representing the lifetime of the SecretIDs that are generated against the role using 'role/<role_name>/secret-id' or 'role/<role_name>/custom-secret-id' endpoints.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameSecretIdTtl(ctx context.Context, roleName string, approleRoleSecretIdTtlRequest ApproleRoleSecretIdTtlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdTtlRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameTokenBoundCidrs Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameTokenBoundCidrs(ctx context.Context, roleName string, approleRoleTokenBoundCidrsRequest ApproleRoleTokenBoundCidrsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenBoundCidrsRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameTokenMaxTtl Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameTokenMaxTtl(ctx context.Context, roleName string, approleRoleTokenMaxTtlRequest ApproleRoleTokenMaxTtlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenMaxTtlRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameTokenNumUses Number of times issued tokens can be used
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameTokenNumUses(ctx context.Context, roleName string, approleRoleTokenNumUsesRequest ApproleRoleTokenNumUsesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenNumUsesRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleRoleRoleNameTokenTtl Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
// roleName: Name of the role.
func (a *Auth) PostAuthApproleRoleRoleNameTokenTtl(ctx context.Context, roleName string, approleRoleTokenTtlRequest ApproleRoleTokenTtlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenTtlRequest,
		nil, // request query parameters
	)
}

// PostAuthApproleTidySecretId Trigger the clean-up of expired SecretID entries.
func (a *Auth) PostAuthApproleTidySecretId(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/approle/tidy/secret-id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthAwsConfigCertificateCertName
// certName: Name of the certificate.
func (a *Auth) PostAuthAwsConfigCertificateCertName(ctx context.Context, certName string, awsConfigCertificateRequest AwsConfigCertificateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigCertificateRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigClient
func (a *Auth) PostAuthAwsConfigClient(ctx context.Context, awsConfigClientRequest AwsConfigClientRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/client"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigClientRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigIdentity
func (a *Auth) PostAuthAwsConfigIdentity(ctx context.Context, awsConfigIdentityRequest AwsConfigIdentityRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/identity"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigIdentityRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigRotateRoot
func (a *Auth) PostAuthAwsConfigRotateRoot(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/rotate-root"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthAwsConfigStsAccountId
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
func (a *Auth) PostAuthAwsConfigStsAccountId(ctx context.Context, accountId string, awsConfigStsRequest AwsConfigStsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigStsRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigTidyIdentityAccesslist
func (a *Auth) PostAuthAwsConfigTidyIdentityAccesslist(ctx context.Context, awsConfigTidyIdentityAccesslistRequest AwsConfigTidyIdentityAccesslistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/identity-accesslist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyIdentityAccesslistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigTidyIdentityWhitelist
func (a *Auth) PostAuthAwsConfigTidyIdentityWhitelist(ctx context.Context, awsConfigTidyIdentityWhitelistRequest AwsConfigTidyIdentityWhitelistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/identity-whitelist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyIdentityWhitelistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigTidyRoletagBlacklist
func (a *Auth) PostAuthAwsConfigTidyRoletagBlacklist(ctx context.Context, awsConfigTidyRoletagBlacklistRequest AwsConfigTidyRoletagBlacklistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/roletag-blacklist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyRoletagBlacklistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsConfigTidyRoletagDenylist
func (a *Auth) PostAuthAwsConfigTidyRoletagDenylist(ctx context.Context, awsConfigTidyRoletagDenylistRequest AwsConfigTidyRoletagDenylistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/config/tidy/roletag-denylist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyRoletagDenylistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsLogin
func (a *Auth) PostAuthAwsLogin(ctx context.Context, awsLoginRequest AwsLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsRoleRole
// role: Name of the role.
func (a *Auth) PostAuthAwsRoleRole(ctx context.Context, role string, awsRoleRequest AwsRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsRoleRoleTag
// role: Name of the role.
func (a *Auth) PostAuthAwsRoleRoleTag(ctx context.Context, role string, awsRoleTagRequest AwsRoleTagRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/role/{role}/tag"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsRoleTagRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsRoletagBlacklistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) PostAuthAwsRoletagBlacklistRoleTag(ctx context.Context, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthAwsRoletagDenylistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) PostAuthAwsRoletagDenylistRoleTag(ctx context.Context, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthAwsTidyIdentityAccesslist
func (a *Auth) PostAuthAwsTidyIdentityAccesslist(ctx context.Context, awsTidyIdentityAccesslistRequest AwsTidyIdentityAccesslistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/tidy/identity-accesslist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyIdentityAccesslistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsTidyIdentityWhitelist
func (a *Auth) PostAuthAwsTidyIdentityWhitelist(ctx context.Context, awsTidyIdentityWhitelistRequest AwsTidyIdentityWhitelistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/tidy/identity-whitelist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyIdentityWhitelistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsTidyRoletagBlacklist
func (a *Auth) PostAuthAwsTidyRoletagBlacklist(ctx context.Context, awsTidyRoletagBlacklistRequest AwsTidyRoletagBlacklistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/tidy/roletag-blacklist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyRoletagBlacklistRequest,
		nil, // request query parameters
	)
}

// PostAuthAwsTidyRoletagDenylist
func (a *Auth) PostAuthAwsTidyRoletagDenylist(ctx context.Context, awsTidyRoletagDenylistRequest AwsTidyRoletagDenylistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/aws/tidy/roletag-denylist"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyRoletagDenylistRequest,
		nil, // request query parameters
	)
}

// PostAuthAzureConfig
func (a *Auth) PostAuthAzureConfig(ctx context.Context, azureConfigRequest AzureConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		azureConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthAzureLogin
func (a *Auth) PostAuthAzureLogin(ctx context.Context, azureLoginRequest AzureLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		azureLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthAzureRoleName
// name: Name of the role.
func (a *Auth) PostAuthAzureRoleName(ctx context.Context, name string, azureRoleRequest AzureRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/azure/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		azureRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthCentrifyConfig This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
func (a *Auth) PostAuthCentrifyConfig(ctx context.Context, centrifyConfigRequest CentrifyConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/centrify/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		centrifyConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthCentrifyLogin Log in with a username and password.
func (a *Auth) PostAuthCentrifyLogin(ctx context.Context, centrifyLoginRequest CentrifyLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/centrify/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		centrifyLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthCertCertsName Manage trusted certificates used for authentication.
// name: The name of the certificate
func (a *Auth) PostAuthCertCertsName(ctx context.Context, name string, certCertsRequest CertCertsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certCertsRequest,
		nil, // request query parameters
	)
}

// PostAuthCertConfig
func (a *Auth) PostAuthCertConfig(ctx context.Context, certConfigRequest CertConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthCertCrlsName Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
func (a *Auth) PostAuthCertCrlsName(ctx context.Context, name string, certCrlsRequest CertCrlsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certCrlsRequest,
		nil, // request query parameters
	)
}

// PostAuthCertLogin
func (a *Auth) PostAuthCertLogin(ctx context.Context, certLoginRequest CertLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cert/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthCfConfig
func (a *Auth) PostAuthCfConfig(ctx context.Context, cfConfigRequest CfConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cfConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthCfLogin
func (a *Auth) PostAuthCfLogin(ctx context.Context, cfLoginRequest CfLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cfLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthCfRolesRole
// role: The name of the role.
func (a *Auth) PostAuthCfRolesRole(ctx context.Context, role string, cfRolesRequest CfRolesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/cf/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cfRolesRequest,
		nil, // request query parameters
	)
}

// PostAuthGcpConfig Configure credentials used to query the GCP IAM API to verify authenticating service accounts
func (a *Auth) PostAuthGcpConfig(ctx context.Context, gcpConfigRequest GcpConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthGcpLogin
func (a *Auth) PostAuthGcpLogin(ctx context.Context, gcpLoginRequest GcpLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthGcpRoleName Create a GCP role with associated policies and required attributes.
// name: Name of the role.
func (a *Auth) PostAuthGcpRoleName(ctx context.Context, name string, gcpRoleRequest GcpRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthGcpRoleNameLabels Add or remove labels for an existing 'gce' role
// name: Name of the role.
func (a *Auth) PostAuthGcpRoleNameLabels(ctx context.Context, name string, gcpRoleLabelsRequest GcpRoleLabelsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/role/{name}/labels"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpRoleLabelsRequest,
		nil, // request query parameters
	)
}

// PostAuthGcpRoleNameServiceAccounts Add or remove service accounts for an existing `iam` role
// name: Name of the role.
func (a *Auth) PostAuthGcpRoleNameServiceAccounts(ctx context.Context, name string, gcpRoleServiceAccountsRequest GcpRoleServiceAccountsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/gcp/role/{name}/service-accounts"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpRoleServiceAccountsRequest,
		nil, // request query parameters
	)
}

// PostAuthGithubConfig
func (a *Auth) PostAuthGithubConfig(ctx context.Context, githubConfigRequest GithubConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		githubConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthGithubLogin
func (a *Auth) PostAuthGithubLogin(ctx context.Context, githubLoginRequest GithubLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		githubLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthGithubMapTeamsKey Read/write/delete a single teams mapping
// key: Key for the teams mapping
func (a *Auth) PostAuthGithubMapTeamsKey(ctx context.Context, key string, githubMapTeamsRequest GithubMapTeamsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		githubMapTeamsRequest,
		nil, // request query parameters
	)
}

// PostAuthGithubMapUsersKey Read/write/delete a single users mapping
// key: Key for the users mapping
func (a *Auth) PostAuthGithubMapUsersKey(ctx context.Context, key string, githubMapUsersRequest GithubMapUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/github/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		githubMapUsersRequest,
		nil, // request query parameters
	)
}

// PostAuthJwtConfig Configure the JWT authentication backend.
// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
func (a *Auth) PostAuthJwtConfig(ctx context.Context, jwtConfigRequest JwtConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jwtConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthJwtLogin Authenticates to Vault using a JWT (or OIDC) token.
func (a *Auth) PostAuthJwtLogin(ctx context.Context, jwtLoginRequest JwtLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jwtLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthJwtOidcAuthUrl Request an authorization URL to start an OIDC login flow.
func (a *Auth) PostAuthJwtOidcAuthUrl(ctx context.Context, jwtOidcAuthUrlRequest JwtOidcAuthUrlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/oidc/auth_url"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jwtOidcAuthUrlRequest,
		nil, // request query parameters
	)
}

// PostAuthJwtOidcCallback Callback endpoint to handle form_posts.
func (a *Auth) PostAuthJwtOidcCallback(ctx context.Context, jwtOidcCallbackRequest JwtOidcCallbackRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/oidc/callback"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jwtOidcCallbackRequest,
		nil, // request query parameters
	)
}

// PostAuthJwtRoleName Register an role with the backend.
// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
// name: Name of the role.
func (a *Auth) PostAuthJwtRoleName(ctx context.Context, name string, jwtRoleRequest JwtRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/jwt/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jwtRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthKerberosConfig
func (a *Auth) PostAuthKerberosConfig(ctx context.Context, kerberosConfigRequest KerberosConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthKerberosConfigLdap
func (a *Auth) PostAuthKerberosConfigLdap(ctx context.Context, kerberosConfigLdapRequest KerberosConfigLdapRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/config/ldap"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosConfigLdapRequest,
		nil, // request query parameters
	)
}

// PostAuthKerberosGroupsName
// name: Name of the LDAP group.
func (a *Auth) PostAuthKerberosGroupsName(ctx context.Context, name string, kerberosGroupsRequest KerberosGroupsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosGroupsRequest,
		nil, // request query parameters
	)
}

// PostAuthKerberosLogin
func (a *Auth) PostAuthKerberosLogin(ctx context.Context, kerberosLoginRequest KerberosLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kerberos/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthKubernetesConfig Configures the JWT Public Key and Kubernetes API information.
func (a *Auth) PostAuthKubernetesConfig(ctx context.Context, kubernetesConfigRequest KubernetesConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kubernetesConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthKubernetesLogin Authenticates Kubernetes service accounts with Vault.
func (a *Auth) PostAuthKubernetesLogin(ctx context.Context, kubernetesLoginRequest KubernetesLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kubernetesLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthKubernetesRoleName Register an role with the backend.
// name: Name of the role.
func (a *Auth) PostAuthKubernetesRoleName(ctx context.Context, name string, kubernetesRoleRequest KubernetesRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/kubernetes/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kubernetesRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthLdapConfig Configure the LDAP server to connect to, along with its options.
func (a *Auth) PostAuthLdapConfig(ctx context.Context, ldapConfigRequest LdapConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ldapConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthLdapGroupsName Manage additional groups for users allowed to authenticate.
// name: Name of the LDAP group.
func (a *Auth) PostAuthLdapGroupsName(ctx context.Context, name string, ldapGroupsRequest LdapGroupsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ldapGroupsRequest,
		nil, // request query parameters
	)
}

// PostAuthLdapLoginUsername Log in with a username and password.
// username: DN (distinguished name) to be used for login.
func (a *Auth) PostAuthLdapLoginUsername(ctx context.Context, username string, ldapLoginRequest LdapLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ldapLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthLdapUsersName Manage users allowed to authenticate.
// name: Name of the LDAP user.
func (a *Auth) PostAuthLdapUsersName(ctx context.Context, name string, ldapUsersRequest LdapUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/ldap/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ldapUsersRequest,
		nil, // request query parameters
	)
}

// PostAuthOciConfig Manages the configuration for the Vault Auth Plugin.
func (a *Auth) PostAuthOciConfig(ctx context.Context, ociConfigRequest OciConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ociConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthOciLoginRole Authenticates to Vault using OCI credentials
// role: Name of the role.
func (a *Auth) PostAuthOciLoginRole(ctx context.Context, role string, ociLoginRequest OciLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/login/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ociLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthOciRoleRole Create a role and associate policies to it.
// role: Name of the role.
func (a *Auth) PostAuthOciRoleRole(ctx context.Context, role string, ociRoleRequest OciRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oci/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ociRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthOidcConfig Configure the JWT authentication backend.
// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
func (a *Auth) PostAuthOidcConfig(ctx context.Context, oidcConfigRequest OidcConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthOidcLogin Authenticates to Vault using a JWT (or OIDC) token.
func (a *Auth) PostAuthOidcLogin(ctx context.Context, oidcLoginRequest OidcLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthOidcOidcAuthUrl Request an authorization URL to start an OIDC login flow.
func (a *Auth) PostAuthOidcOidcAuthUrl(ctx context.Context, oidcOidcAuthUrlRequest OidcOidcAuthUrlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/oidc/auth_url"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcOidcAuthUrlRequest,
		nil, // request query parameters
	)
}

// PostAuthOidcOidcCallback Callback endpoint to handle form_posts.
func (a *Auth) PostAuthOidcOidcCallback(ctx context.Context, oidcOidcCallbackRequest OidcOidcCallbackRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/oidc/callback"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcOidcCallbackRequest,
		nil, // request query parameters
	)
}

// PostAuthOidcRoleName Register an role with the backend.
// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
// name: Name of the role.
func (a *Auth) PostAuthOidcRoleName(ctx context.Context, name string, oidcRoleRequest OidcRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcRoleRequest,
		nil, // request query parameters
	)
}

// PostAuthOktaConfig This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
func (a *Auth) PostAuthOktaConfig(ctx context.Context, oktaConfigRequest OktaConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthOktaGroupsName Manage users allowed to authenticate.
// name: Name of the Okta group.
func (a *Auth) PostAuthOktaGroupsName(ctx context.Context, name string, oktaGroupsRequest OktaGroupsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaGroupsRequest,
		nil, // request query parameters
	)
}

// PostAuthOktaLoginUsername Log in with a username and password.
// username: Username to be used for login.
func (a *Auth) PostAuthOktaLoginUsername(ctx context.Context, username string, oktaLoginRequest OktaLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthOktaUsersName Manage additional groups for users allowed to authenticate.
// name: Name of the user.
func (a *Auth) PostAuthOktaUsersName(ctx context.Context, name string, oktaUsersRequest OktaUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/okta/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaUsersRequest,
		nil, // request query parameters
	)
}

// PostAuthRadiusConfig Configure the RADIUS server to connect to, along with its options.
func (a *Auth) PostAuthRadiusConfig(ctx context.Context, radiusConfigRequest RadiusConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusConfigRequest,
		nil, // request query parameters
	)
}

// PostAuthRadiusLogin Log in with a username and password.
func (a *Auth) PostAuthRadiusLogin(ctx context.Context, radiusLoginRequest RadiusLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/login"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthRadiusLoginUrlusername Log in with a username and password.
// urlusername: Username to be used for login. (URL parameter)
func (a *Auth) PostAuthRadiusLoginUrlusername(ctx context.Context, urlusername string, radiusLoginRequest RadiusLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/login/{urlusername}"
	requestPath = strings.Replace(requestPath, "{"+"urlusername"+"}", url.PathEscape(urlusername), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthRadiusUsersName Manage users allowed to authenticate.
// name: Name of the RADIUS user.
func (a *Auth) PostAuthRadiusUsersName(ctx context.Context, name string, radiusUsersRequest RadiusUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/radius/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusUsersRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenCreate The token create path is used to create new tokens.
func (a *Auth) PostAuthTokenCreate(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/create"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthTokenCreateOrphan The token create path is used to create new orphan tokens.
func (a *Auth) PostAuthTokenCreateOrphan(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/create-orphan"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthTokenCreateRoleName This token create path is used to create new tokens adhering to the given role.
// roleName: Name of the role
func (a *Auth) PostAuthTokenCreateRoleName(ctx context.Context, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/create/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthTokenLookup This endpoint will lookup a token and its properties.
func (a *Auth) PostAuthTokenLookup(ctx context.Context, tokenLookupRequest TokenLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/lookup"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenLookupRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenLookupAccessor This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
func (a *Auth) PostAuthTokenLookupAccessor(ctx context.Context, tokenLookupAccessorRequest TokenLookupAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/lookup-accessor"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenLookupAccessorRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenLookupSelf This endpoint will lookup a token and its properties.
func (a *Auth) PostAuthTokenLookupSelf(ctx context.Context, tokenLookupSelfRequest TokenLookupSelfRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/lookup-self"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenLookupSelfRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRenew This endpoint will renew the given token and prevent expiration.
func (a *Auth) PostAuthTokenRenew(ctx context.Context, tokenRenewRequest TokenRenewRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/renew"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRenewAccessor This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
func (a *Auth) PostAuthTokenRenewAccessor(ctx context.Context, tokenRenewAccessorRequest TokenRenewAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/renew-accessor"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewAccessorRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRenewSelf This endpoint will renew the token used to call it and prevent expiration.
func (a *Auth) PostAuthTokenRenewSelf(ctx context.Context, tokenRenewSelfRequest TokenRenewSelfRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/renew-self"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewSelfRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRevoke This endpoint will delete the given token and all of its child tokens.
func (a *Auth) PostAuthTokenRevoke(ctx context.Context, tokenRevokeRequest TokenRevokeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/revoke"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRevokeAccessor This endpoint will delete the token associated with the accessor and all of its child tokens.
func (a *Auth) PostAuthTokenRevokeAccessor(ctx context.Context, tokenRevokeAccessorRequest TokenRevokeAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/revoke-accessor"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeAccessorRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRevokeOrphan This endpoint will delete the token and orphan its child tokens.
func (a *Auth) PostAuthTokenRevokeOrphan(ctx context.Context, tokenRevokeOrphanRequest TokenRevokeOrphanRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/revoke-orphan"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeOrphanRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenRevokeSelf This endpoint will delete the token used to call it and all of its child tokens.
func (a *Auth) PostAuthTokenRevokeSelf(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/revoke-self"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthTokenRolesRoleName
// roleName: Name of the role
func (a *Auth) PostAuthTokenRolesRoleName(ctx context.Context, roleName string, tokenRolesRequest TokenRolesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRolesRequest,
		nil, // request query parameters
	)
}

// PostAuthTokenTidy This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
func (a *Auth) PostAuthTokenTidy(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/token/tidy"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostAuthUserpassLoginUsername Log in with a username and password.
// username: Username of the user.
func (a *Auth) PostAuthUserpassLoginUsername(ctx context.Context, username string, userpassLoginRequest UserpassLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassLoginRequest,
		nil, // request query parameters
	)
}

// PostAuthUserpassUsersUsername Manage users allowed to authenticate.
// username: Username for this user.
func (a *Auth) PostAuthUserpassUsersUsername(ctx context.Context, username string, userpassUsersRequest UserpassUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassUsersRequest,
		nil, // request query parameters
	)
}

// PostAuthUserpassUsersUsernamePassword Reset user's password.
// username: Username for this user.
func (a *Auth) PostAuthUserpassUsersUsernamePassword(ctx context.Context, username string, userpassUsersPasswordRequest UserpassUsersPasswordRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/users/{username}/password"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassUsersPasswordRequest,
		nil, // request query parameters
	)
}

// PostAuthUserpassUsersUsernamePolicies Update the policies associated with the username.
// username: Username for this user.
func (a *Auth) PostAuthUserpassUsersUsernamePolicies(ctx context.Context, username string, userpassUsersPoliciesRequest UserpassUsersPoliciesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/userpass/users/{username}/policies"
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassUsersPoliciesRequest,
		nil, // request query parameters
	)
}
