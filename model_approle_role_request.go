/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// ApproleRoleRequest struct for ApproleRoleRequest
type ApproleRoleRequest struct {
	// Impose secret_id to be presented when logging in using this role. Defaults to 'true'.
	BindSecretId *bool `json:"bind_secret_id,omitempty"`
	// Use \"secret_id_bound_cidrs\" instead.
	// Deprecated
	BoundCidrList []string `json:"bound_cidr_list,omitempty"`
	// If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
	LocalSecretIds *bool `json:"local_secret_ids,omitempty"`
	// Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.
	// Deprecated
	Period *int32 `json:"period,omitempty"`
	// Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.
	// Deprecated
	Policies []string `json:"policies,omitempty"`
	// Identifier of the role. Defaults to a UUID.
	RoleId *string `json:"role_id,omitempty"`
	// Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can perform the login operation.
	SecretIdBoundCidrs []string `json:"secret_id_bound_cidrs,omitempty"`
	// Number of times a SecretID can access the role, after which the SecretID will expire. Defaults to 0 meaning that the the secret_id is of unlimited use.
	SecretIdNumUses *int32 `json:"secret_id_num_uses,omitempty"`
	// Duration in seconds after which the issued SecretID should expire. Defaults to 0, meaning no expiration.
	SecretIdTtl *int32 `json:"secret_id_ttl,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
	TokenExplicitMaxTtl *int32 `json:"token_explicit_max_ttl,omitempty"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int32 `json:"token_max_ttl,omitempty"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"token_no_default_policy,omitempty"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").
	TokenPeriod *int32 `json:"token_period,omitempty"`
	// Comma-separated list of policies
	TokenPolicies []string `json:"token_policies,omitempty"`
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
	// The type of token to generate, service or batch
	TokenType *string `json:"token_type,omitempty"`
}

// NewApproleRoleRequest instantiates a new ApproleRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproleRoleRequest() *ApproleRoleRequest {
	this := ApproleRoleRequest{}
	var bindSecretId bool = true
	this.BindSecretId = &bindSecretId
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// NewApproleRoleRequestWithDefaults instantiates a new ApproleRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproleRoleRequestWithDefaults() *ApproleRoleRequest {
	this := ApproleRoleRequest{}
	var bindSecretId bool = true
	this.BindSecretId = &bindSecretId
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// GetBindSecretId returns the BindSecretId field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetBindSecretId() bool {
	if o == nil || o.BindSecretId == nil {
		var ret bool
		return ret
	}
	return *o.BindSecretId
}

// GetBindSecretIdOk returns a tuple with the BindSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetBindSecretIdOk() (*bool, bool) {
	if o == nil || o.BindSecretId == nil {
		return nil, false
	}
	return o.BindSecretId, true
}

// HasBindSecretId returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasBindSecretId() bool {
	if o != nil && o.BindSecretId != nil {
		return true
	}

	return false
}

// SetBindSecretId gets a reference to the given bool and assigns it to the BindSecretId field.
func (o *ApproleRoleRequest) SetBindSecretId(v bool) {
	o.BindSecretId = &v
}

// GetBoundCidrList returns the BoundCidrList field value if set, zero value otherwise.
// Deprecated
func (o *ApproleRoleRequest) GetBoundCidrList() []string {
	if o == nil || o.BoundCidrList == nil {
		var ret []string
		return ret
	}
	return o.BoundCidrList
}

// GetBoundCidrListOk returns a tuple with the BoundCidrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ApproleRoleRequest) GetBoundCidrListOk() ([]string, bool) {
	if o == nil || o.BoundCidrList == nil {
		return nil, false
	}
	return o.BoundCidrList, true
}

// HasBoundCidrList returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasBoundCidrList() bool {
	if o != nil && o.BoundCidrList != nil {
		return true
	}

	return false
}

// SetBoundCidrList gets a reference to the given []string and assigns it to the BoundCidrList field.
// Deprecated
func (o *ApproleRoleRequest) SetBoundCidrList(v []string) {
	o.BoundCidrList = v
}

// GetLocalSecretIds returns the LocalSecretIds field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetLocalSecretIds() bool {
	if o == nil || o.LocalSecretIds == nil {
		var ret bool
		return ret
	}
	return *o.LocalSecretIds
}

// GetLocalSecretIdsOk returns a tuple with the LocalSecretIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetLocalSecretIdsOk() (*bool, bool) {
	if o == nil || o.LocalSecretIds == nil {
		return nil, false
	}
	return o.LocalSecretIds, true
}

// HasLocalSecretIds returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasLocalSecretIds() bool {
	if o != nil && o.LocalSecretIds != nil {
		return true
	}

	return false
}

// SetLocalSecretIds gets a reference to the given bool and assigns it to the LocalSecretIds field.
func (o *ApproleRoleRequest) SetLocalSecretIds(v bool) {
	o.LocalSecretIds = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
// Deprecated
func (o *ApproleRoleRequest) GetPeriod() int32 {
	if o == nil || o.Period == nil {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ApproleRoleRequest) GetPeriodOk() (*int32, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
// Deprecated
func (o *ApproleRoleRequest) SetPeriod(v int32) {
	o.Period = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
// Deprecated
func (o *ApproleRoleRequest) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ApproleRoleRequest) GetPoliciesOk() ([]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
// Deprecated
func (o *ApproleRoleRequest) SetPolicies(v []string) {
	o.Policies = v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetRoleId() string {
	if o == nil || o.RoleId == nil {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetRoleIdOk() (*string, bool) {
	if o == nil || o.RoleId == nil {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasRoleId() bool {
	if o != nil && o.RoleId != nil {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *ApproleRoleRequest) SetRoleId(v string) {
	o.RoleId = &v
}

// GetSecretIdBoundCidrs returns the SecretIdBoundCidrs field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetSecretIdBoundCidrs() []string {
	if o == nil || o.SecretIdBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.SecretIdBoundCidrs
}

// GetSecretIdBoundCidrsOk returns a tuple with the SecretIdBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetSecretIdBoundCidrsOk() ([]string, bool) {
	if o == nil || o.SecretIdBoundCidrs == nil {
		return nil, false
	}
	return o.SecretIdBoundCidrs, true
}

// HasSecretIdBoundCidrs returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasSecretIdBoundCidrs() bool {
	if o != nil && o.SecretIdBoundCidrs != nil {
		return true
	}

	return false
}

// SetSecretIdBoundCidrs gets a reference to the given []string and assigns it to the SecretIdBoundCidrs field.
func (o *ApproleRoleRequest) SetSecretIdBoundCidrs(v []string) {
	o.SecretIdBoundCidrs = v
}

// GetSecretIdNumUses returns the SecretIdNumUses field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetSecretIdNumUses() int32 {
	if o == nil || o.SecretIdNumUses == nil {
		var ret int32
		return ret
	}
	return *o.SecretIdNumUses
}

// GetSecretIdNumUsesOk returns a tuple with the SecretIdNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetSecretIdNumUsesOk() (*int32, bool) {
	if o == nil || o.SecretIdNumUses == nil {
		return nil, false
	}
	return o.SecretIdNumUses, true
}

// HasSecretIdNumUses returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasSecretIdNumUses() bool {
	if o != nil && o.SecretIdNumUses != nil {
		return true
	}

	return false
}

// SetSecretIdNumUses gets a reference to the given int32 and assigns it to the SecretIdNumUses field.
func (o *ApproleRoleRequest) SetSecretIdNumUses(v int32) {
	o.SecretIdNumUses = &v
}

// GetSecretIdTtl returns the SecretIdTtl field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetSecretIdTtl() int32 {
	if o == nil || o.SecretIdTtl == nil {
		var ret int32
		return ret
	}
	return *o.SecretIdTtl
}

// GetSecretIdTtlOk returns a tuple with the SecretIdTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetSecretIdTtlOk() (*int32, bool) {
	if o == nil || o.SecretIdTtl == nil {
		return nil, false
	}
	return o.SecretIdTtl, true
}

// HasSecretIdTtl returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasSecretIdTtl() bool {
	if o != nil && o.SecretIdTtl != nil {
		return true
	}

	return false
}

// SetSecretIdTtl gets a reference to the given int32 and assigns it to the SecretIdTtl field.
func (o *ApproleRoleRequest) SetSecretIdTtl(v int32) {
	o.SecretIdTtl = &v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *ApproleRoleRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

// GetTokenExplicitMaxTtl returns the TokenExplicitMaxTtl field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenExplicitMaxTtl() int32 {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenExplicitMaxTtl
}

// GetTokenExplicitMaxTtlOk returns a tuple with the TokenExplicitMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenExplicitMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		return nil, false
	}
	return o.TokenExplicitMaxTtl, true
}

// HasTokenExplicitMaxTtl returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenExplicitMaxTtl() bool {
	if o != nil && o.TokenExplicitMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenExplicitMaxTtl gets a reference to the given int32 and assigns it to the TokenExplicitMaxTtl field.
func (o *ApproleRoleRequest) SetTokenExplicitMaxTtl(v int32) {
	o.TokenExplicitMaxTtl = &v
}

// GetTokenMaxTtl returns the TokenMaxTtl field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenMaxTtl() int32 {
	if o == nil || o.TokenMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenMaxTtl
}

// GetTokenMaxTtlOk returns a tuple with the TokenMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenMaxTtl == nil {
		return nil, false
	}
	return o.TokenMaxTtl, true
}

// HasTokenMaxTtl returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenMaxTtl() bool {
	if o != nil && o.TokenMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenMaxTtl gets a reference to the given int32 and assigns it to the TokenMaxTtl field.
func (o *ApproleRoleRequest) SetTokenMaxTtl(v int32) {
	o.TokenMaxTtl = &v
}

// GetTokenNoDefaultPolicy returns the TokenNoDefaultPolicy field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenNoDefaultPolicy() bool {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		var ret bool
		return ret
	}
	return *o.TokenNoDefaultPolicy
}

// GetTokenNoDefaultPolicyOk returns a tuple with the TokenNoDefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenNoDefaultPolicyOk() (*bool, bool) {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		return nil, false
	}
	return o.TokenNoDefaultPolicy, true
}

// HasTokenNoDefaultPolicy returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenNoDefaultPolicy() bool {
	if o != nil && o.TokenNoDefaultPolicy != nil {
		return true
	}

	return false
}

// SetTokenNoDefaultPolicy gets a reference to the given bool and assigns it to the TokenNoDefaultPolicy field.
func (o *ApproleRoleRequest) SetTokenNoDefaultPolicy(v bool) {
	o.TokenNoDefaultPolicy = &v
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *ApproleRoleRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

// GetTokenPeriod returns the TokenPeriod field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenPeriod() int32 {
	if o == nil || o.TokenPeriod == nil {
		var ret int32
		return ret
	}
	return *o.TokenPeriod
}

// GetTokenPeriodOk returns a tuple with the TokenPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenPeriodOk() (*int32, bool) {
	if o == nil || o.TokenPeriod == nil {
		return nil, false
	}
	return o.TokenPeriod, true
}

// HasTokenPeriod returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenPeriod() bool {
	if o != nil && o.TokenPeriod != nil {
		return true
	}

	return false
}

// SetTokenPeriod gets a reference to the given int32 and assigns it to the TokenPeriod field.
func (o *ApproleRoleRequest) SetTokenPeriod(v int32) {
	o.TokenPeriod = &v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *ApproleRoleRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *ApproleRoleRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *ApproleRoleRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *ApproleRoleRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *ApproleRoleRequest) SetTokenType(v string) {
	o.TokenType = &v
}

func (o ApproleRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BindSecretId != nil {
		toSerialize["bind_secret_id"] = o.BindSecretId
	}
	if o.BoundCidrList != nil {
		toSerialize["bound_cidr_list"] = o.BoundCidrList
	}
	if o.LocalSecretIds != nil {
		toSerialize["local_secret_ids"] = o.LocalSecretIds
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.RoleId != nil {
		toSerialize["role_id"] = o.RoleId
	}
	if o.SecretIdBoundCidrs != nil {
		toSerialize["secret_id_bound_cidrs"] = o.SecretIdBoundCidrs
	}
	if o.SecretIdNumUses != nil {
		toSerialize["secret_id_num_uses"] = o.SecretIdNumUses
	}
	if o.SecretIdTtl != nil {
		toSerialize["secret_id_ttl"] = o.SecretIdTtl
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	if o.TokenExplicitMaxTtl != nil {
		toSerialize["token_explicit_max_ttl"] = o.TokenExplicitMaxTtl
	}
	if o.TokenMaxTtl != nil {
		toSerialize["token_max_ttl"] = o.TokenMaxTtl
	}
	if o.TokenNoDefaultPolicy != nil {
		toSerialize["token_no_default_policy"] = o.TokenNoDefaultPolicy
	}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	if o.TokenPeriod != nil {
		toSerialize["token_period"] = o.TokenPeriod
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	if o.TokenType != nil {
		toSerialize["token_type"] = o.TokenType
	}
	return json.Marshal(toSerialize)
}

type NullableApproleRoleRequest struct {
	value *ApproleRoleRequest
	isSet bool
}

func (v NullableApproleRoleRequest) Get() *ApproleRoleRequest {
	return v.value
}

func (v *NullableApproleRoleRequest) Set(val *ApproleRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproleRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproleRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproleRoleRequest(val *ApproleRoleRequest) *NullableApproleRoleRequest {
	return &NullableApproleRoleRequest{value: val, isSet: true}
}

func (v NullableApproleRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproleRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


