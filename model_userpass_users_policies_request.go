/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// UserpassUsersPoliciesRequest struct for UserpassUsersPoliciesRequest
type UserpassUsersPoliciesRequest struct {
	// Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.
	// Deprecated
	Policies []string `json:"policies,omitempty"`
	// Comma-separated list of policies
	TokenPolicies []string `json:"token_policies,omitempty"`
}

// NewUserpassUsersPoliciesRequest instantiates a new UserpassUsersPoliciesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserpassUsersPoliciesRequest() *UserpassUsersPoliciesRequest {
	this := UserpassUsersPoliciesRequest{}
	return &this
}

// NewUserpassUsersPoliciesRequestWithDefaults instantiates a new UserpassUsersPoliciesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserpassUsersPoliciesRequestWithDefaults() *UserpassUsersPoliciesRequest {
	this := UserpassUsersPoliciesRequest{}
	return &this
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
// Deprecated
func (o *UserpassUsersPoliciesRequest) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserpassUsersPoliciesRequest) GetPoliciesOk() ([]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *UserpassUsersPoliciesRequest) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
// Deprecated
func (o *UserpassUsersPoliciesRequest) SetPolicies(v []string) {
	o.Policies = v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *UserpassUsersPoliciesRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserpassUsersPoliciesRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *UserpassUsersPoliciesRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *UserpassUsersPoliciesRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

func (o UserpassUsersPoliciesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	return json.Marshal(toSerialize)
}

type NullableUserpassUsersPoliciesRequest struct {
	value *UserpassUsersPoliciesRequest
	isSet bool
}

func (v NullableUserpassUsersPoliciesRequest) Get() *UserpassUsersPoliciesRequest {
	return v.value
}

func (v *NullableUserpassUsersPoliciesRequest) Set(val *UserpassUsersPoliciesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserpassUsersPoliciesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserpassUsersPoliciesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserpassUsersPoliciesRequest(val *UserpassUsersPoliciesRequest) *NullableUserpassUsersPoliciesRequest {
	return &NullableUserpassUsersPoliciesRequest{value: val, isSet: true}
}

func (v NullableUserpassUsersPoliciesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserpassUsersPoliciesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


