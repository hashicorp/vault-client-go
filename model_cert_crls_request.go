/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// CertCrlsRequest struct for CertCrlsRequest
type CertCrlsRequest struct {
	// The public certificate that should be trusted. May be DER or PEM encoded. Note: the expiration time is ignored; if the CRL is no longer valid, delete it using the same name as specified here.
	Crl *string `json:"crl,omitempty"`
}

// NewCertCrlsRequest instantiates a new CertCrlsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertCrlsRequest() *CertCrlsRequest {
	this := CertCrlsRequest{}
	return &this
}

// NewCertCrlsRequestWithDefaults instantiates a new CertCrlsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertCrlsRequestWithDefaults() *CertCrlsRequest {
	this := CertCrlsRequest{}
	return &this
}

// GetCrl returns the Crl field value if set, zero value otherwise.
func (o *CertCrlsRequest) GetCrl() string {
	if o == nil || o.Crl == nil {
		var ret string
		return ret
	}
	return *o.Crl
}

// GetCrlOk returns a tuple with the Crl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCrlsRequest) GetCrlOk() (*string, bool) {
	if o == nil || o.Crl == nil {
		return nil, false
	}
	return o.Crl, true
}

// HasCrl returns a boolean if a field has been set.
func (o *CertCrlsRequest) HasCrl() bool {
	if o != nil && o.Crl != nil {
		return true
	}

	return false
}

// SetCrl gets a reference to the given string and assigns it to the Crl field.
func (o *CertCrlsRequest) SetCrl(v string) {
	o.Crl = &v
}

func (o CertCrlsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Crl != nil {
		toSerialize["crl"] = o.Crl
	}
	return json.Marshal(toSerialize)
}

type NullableCertCrlsRequest struct {
	value *CertCrlsRequest
	isSet bool
}

func (v NullableCertCrlsRequest) Get() *CertCrlsRequest {
	return v.value
}

func (v *NullableCertCrlsRequest) Set(val *CertCrlsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCertCrlsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCertCrlsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertCrlsRequest(val *CertCrlsRequest) *NullableCertCrlsRequest {
	return &NullableCertCrlsRequest{value: val, isSet: true}
}

func (v NullableCertCrlsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertCrlsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


