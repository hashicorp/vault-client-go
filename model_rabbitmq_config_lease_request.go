/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// RabbitmqConfigLeaseRequest struct for RabbitmqConfigLeaseRequest
type RabbitmqConfigLeaseRequest struct {
	// Duration after which the issued credentials should not be allowed to be renewed
	MaxTtl *int32 `json:"max_ttl,omitempty"`
	// Duration before which the issued credentials needs renewal
	Ttl *int32 `json:"ttl,omitempty"`
}

// NewRabbitmqConfigLeaseRequest instantiates a new RabbitmqConfigLeaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRabbitmqConfigLeaseRequest() *RabbitmqConfigLeaseRequest {
	this := RabbitmqConfigLeaseRequest{}
	var maxTtl int32 = 0
	this.MaxTtl = &maxTtl
	var ttl int32 = 0
	this.Ttl = &ttl
	return &this
}

// NewRabbitmqConfigLeaseRequestWithDefaults instantiates a new RabbitmqConfigLeaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRabbitmqConfigLeaseRequestWithDefaults() *RabbitmqConfigLeaseRequest {
	this := RabbitmqConfigLeaseRequest{}
	var maxTtl int32 = 0
	this.MaxTtl = &maxTtl
	var ttl int32 = 0
	this.Ttl = &ttl
	return &this
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
func (o *RabbitmqConfigLeaseRequest) GetMaxTtl() int32 {
	if o == nil || o.MaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RabbitmqConfigLeaseRequest) GetMaxTtlOk() (*int32, bool) {
	if o == nil || o.MaxTtl == nil {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *RabbitmqConfigLeaseRequest) HasMaxTtl() bool {
	if o != nil && o.MaxTtl != nil {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given int32 and assigns it to the MaxTtl field.
func (o *RabbitmqConfigLeaseRequest) SetMaxTtl(v int32) {
	o.MaxTtl = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *RabbitmqConfigLeaseRequest) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RabbitmqConfigLeaseRequest) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *RabbitmqConfigLeaseRequest) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *RabbitmqConfigLeaseRequest) SetTtl(v int32) {
	o.Ttl = &v
}

func (o RabbitmqConfigLeaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxTtl != nil {
		toSerialize["max_ttl"] = o.MaxTtl
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableRabbitmqConfigLeaseRequest struct {
	value *RabbitmqConfigLeaseRequest
	isSet bool
}

func (v NullableRabbitmqConfigLeaseRequest) Get() *RabbitmqConfigLeaseRequest {
	return v.value
}

func (v *NullableRabbitmqConfigLeaseRequest) Set(val *RabbitmqConfigLeaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRabbitmqConfigLeaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRabbitmqConfigLeaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRabbitmqConfigLeaseRequest(val *RabbitmqConfigLeaseRequest) *NullableRabbitmqConfigLeaseRequest {
	return &NullableRabbitmqConfigLeaseRequest{value: val, isSet: true}
}

func (v NullableRabbitmqConfigLeaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRabbitmqConfigLeaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


