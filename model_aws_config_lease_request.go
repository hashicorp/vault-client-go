/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// AwsConfigLeaseRequest struct for AwsConfigLeaseRequest
type AwsConfigLeaseRequest struct {
	// Default lease for roles.
	Lease *string `json:"lease,omitempty"`
	// Maximum time a credential is valid for.
	LeaseMax *string `json:"lease_max,omitempty"`
}

// NewAwsConfigLeaseRequest instantiates a new AwsConfigLeaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsConfigLeaseRequest() *AwsConfigLeaseRequest {
	this := AwsConfigLeaseRequest{}
	return &this
}

// NewAwsConfigLeaseRequestWithDefaults instantiates a new AwsConfigLeaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsConfigLeaseRequestWithDefaults() *AwsConfigLeaseRequest {
	this := AwsConfigLeaseRequest{}
	return &this
}

// GetLease returns the Lease field value if set, zero value otherwise.
func (o *AwsConfigLeaseRequest) GetLease() string {
	if o == nil || o.Lease == nil {
		var ret string
		return ret
	}
	return *o.Lease
}

// GetLeaseOk returns a tuple with the Lease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigLeaseRequest) GetLeaseOk() (*string, bool) {
	if o == nil || o.Lease == nil {
		return nil, false
	}
	return o.Lease, true
}

// HasLease returns a boolean if a field has been set.
func (o *AwsConfigLeaseRequest) HasLease() bool {
	if o != nil && o.Lease != nil {
		return true
	}

	return false
}

// SetLease gets a reference to the given string and assigns it to the Lease field.
func (o *AwsConfigLeaseRequest) SetLease(v string) {
	o.Lease = &v
}

// GetLeaseMax returns the LeaseMax field value if set, zero value otherwise.
func (o *AwsConfigLeaseRequest) GetLeaseMax() string {
	if o == nil || o.LeaseMax == nil {
		var ret string
		return ret
	}
	return *o.LeaseMax
}

// GetLeaseMaxOk returns a tuple with the LeaseMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigLeaseRequest) GetLeaseMaxOk() (*string, bool) {
	if o == nil || o.LeaseMax == nil {
		return nil, false
	}
	return o.LeaseMax, true
}

// HasLeaseMax returns a boolean if a field has been set.
func (o *AwsConfigLeaseRequest) HasLeaseMax() bool {
	if o != nil && o.LeaseMax != nil {
		return true
	}

	return false
}

// SetLeaseMax gets a reference to the given string and assigns it to the LeaseMax field.
func (o *AwsConfigLeaseRequest) SetLeaseMax(v string) {
	o.LeaseMax = &v
}

func (o AwsConfigLeaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lease != nil {
		toSerialize["lease"] = o.Lease
	}
	if o.LeaseMax != nil {
		toSerialize["lease_max"] = o.LeaseMax
	}
	return json.Marshal(toSerialize)
}

type NullableAwsConfigLeaseRequest struct {
	value *AwsConfigLeaseRequest
	isSet bool
}

func (v NullableAwsConfigLeaseRequest) Get() *AwsConfigLeaseRequest {
	return v.value
}

func (v *NullableAwsConfigLeaseRequest) Set(val *AwsConfigLeaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsConfigLeaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsConfigLeaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsConfigLeaseRequest(val *AwsConfigLeaseRequest) *NullableAwsConfigLeaseRequest {
	return &NullableAwsConfigLeaseRequest{value: val, isSet: true}
}

func (v NullableAwsConfigLeaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsConfigLeaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


