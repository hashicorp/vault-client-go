/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// IdentityPersonaRequest struct for IdentityPersonaRequest
type IdentityPersonaRequest struct {
	// Entity ID to which this persona belongs to
	EntityId *string `json:"entity_id,omitempty"`
	// ID of the persona
	Id *string `json:"id,omitempty"`
	// Metadata to be associated with the persona. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Mount accessor to which this persona belongs to
	MountAccessor *string `json:"mount_accessor,omitempty"`
	// Name of the persona
	Name *string `json:"name,omitempty"`
}

// NewIdentityPersonaRequest instantiates a new IdentityPersonaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityPersonaRequest() *IdentityPersonaRequest {
	this := IdentityPersonaRequest{}
	return &this
}

// NewIdentityPersonaRequestWithDefaults instantiates a new IdentityPersonaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityPersonaRequestWithDefaults() *IdentityPersonaRequest {
	this := IdentityPersonaRequest{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *IdentityPersonaRequest) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPersonaRequest) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *IdentityPersonaRequest) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *IdentityPersonaRequest) SetEntityId(v string) {
	o.EntityId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityPersonaRequest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPersonaRequest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityPersonaRequest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityPersonaRequest) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IdentityPersonaRequest) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPersonaRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IdentityPersonaRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *IdentityPersonaRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetMountAccessor returns the MountAccessor field value if set, zero value otherwise.
func (o *IdentityPersonaRequest) GetMountAccessor() string {
	if o == nil || o.MountAccessor == nil {
		var ret string
		return ret
	}
	return *o.MountAccessor
}

// GetMountAccessorOk returns a tuple with the MountAccessor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPersonaRequest) GetMountAccessorOk() (*string, bool) {
	if o == nil || o.MountAccessor == nil {
		return nil, false
	}
	return o.MountAccessor, true
}

// HasMountAccessor returns a boolean if a field has been set.
func (o *IdentityPersonaRequest) HasMountAccessor() bool {
	if o != nil && o.MountAccessor != nil {
		return true
	}

	return false
}

// SetMountAccessor gets a reference to the given string and assigns it to the MountAccessor field.
func (o *IdentityPersonaRequest) SetMountAccessor(v string) {
	o.MountAccessor = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityPersonaRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPersonaRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityPersonaRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityPersonaRequest) SetName(v string) {
	o.Name = &v
}

func (o IdentityPersonaRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId != nil {
		toSerialize["entity_id"] = o.EntityId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.MountAccessor != nil {
		toSerialize["mount_accessor"] = o.MountAccessor
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityPersonaRequest struct {
	value *IdentityPersonaRequest
	isSet bool
}

func (v NullableIdentityPersonaRequest) Get() *IdentityPersonaRequest {
	return v.value
}

func (v *NullableIdentityPersonaRequest) Set(val *IdentityPersonaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityPersonaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityPersonaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityPersonaRequest(val *IdentityPersonaRequest) *NullableIdentityPersonaRequest {
	return &NullableIdentityPersonaRequest{value: val, isSet: true}
}

func (v NullableIdentityPersonaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityPersonaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


