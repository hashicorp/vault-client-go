/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// GcpRoleRequest struct for GcpRoleRequest
type GcpRoleRequest struct {
	// If true, will add group aliases to auth tokens generated under this role. This will add the full list of ancestors (projects, folders, organizations) for the given entity's project. Requires IAM permission `resourcemanager.projects.get` on this project.
	AddGroupAliases *bool `json:"add_group_aliases,omitempty"`
	// 'iam' roles only. If false, Vault will not not allow GCE instances to login in against this role
	AllowGceInference *bool `json:"allow_gce_inference,omitempty"`
	// Deprecated: use \"bound_instance_groups\" instead.
	BoundInstanceGroup *string `json:"bound_instance_group,omitempty"`
	// Comma-separated list of permitted instance groups to which the GCE instance must belong. This option only applies to \"gce\" roles.
	BoundInstanceGroups []string `json:"bound_instance_groups,omitempty"`
	// Comma-separated list of GCP labels formatted as\"key:value\" strings that must be present on the GCE instance in order to authenticate. This option only applies to \"gce\" roles.
	BoundLabels []string `json:"bound_labels,omitempty"`
	// GCP Projects that authenticating entities must belong to.
	BoundProjects []string `json:"bound_projects,omitempty"`
	// Deprecated: use \"bound_regions\" instead.
	BoundRegion *string `json:"bound_region,omitempty"`
	// Comma-separated list of permitted regions to which the GCE instance must belong. If a group is provided, it is assumed to be a regional group. If \"zone\" is provided, this option is ignored. This can be a self-link or region name. This option only applies to \"gce\" roles.
	BoundRegions []string `json:"bound_regions,omitempty"`
	// Can be set for both 'iam' and 'gce' roles (required for 'iam'). A comma-seperated list of authorized service accounts. If the single value \"*\" is given, this is assumed to be all service accounts under the role's project. If this is set on a GCE role, the inferred service account from the instance metadata token will be used.
	BoundServiceAccounts []string `json:"bound_service_accounts,omitempty"`
	// Deprecated: use \"bound_zones\" instead.
	BoundZone *string `json:"bound_zone,omitempty"`
	// Comma-separated list of permitted zones to which the GCE instance must belong. If a group is provided, it is assumed to be a zonal group. This can be a self-link or zone name. This option only applies to \"gce\" roles.
	BoundZones []string `json:"bound_zones,omitempty"`
	// Currently enabled for 'iam' only. Duration in seconds from time of validation that a JWT must expire within.
	MaxJwtExp *int32 `json:"max_jwt_exp,omitempty"`
	// Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.
	// Deprecated
	MaxTtl *int32 `json:"max_ttl,omitempty"`
	// Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.
	// Deprecated
	Period *int32 `json:"period,omitempty"`
	// Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.
	// Deprecated
	Policies []string `json:"policies,omitempty"`
	// Deprecated: use \"bound_projects\" instead
	ProjectId *string `json:"project_id,omitempty"`
	// Deprecated: use \"bound_service_accounts\" instead.
	ServiceAccounts []string `json:"service_accounts,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
	TokenExplicitMaxTtl *int32 `json:"token_explicit_max_ttl,omitempty"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int32 `json:"token_max_ttl,omitempty"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"token_no_default_policy,omitempty"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").
	TokenPeriod *int32 `json:"token_period,omitempty"`
	// Comma-separated list of policies
	TokenPolicies []string `json:"token_policies,omitempty"`
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
	// The type of token to generate, service or batch
	TokenType *string `json:"token_type,omitempty"`
	// Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.
	// Deprecated
	Ttl *int32 `json:"ttl,omitempty"`
	// Type of the role. Currently supported: iam, gce
	Type *string `json:"type,omitempty"`
}

// NewGcpRoleRequest instantiates a new GcpRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpRoleRequest() *GcpRoleRequest {
	this := GcpRoleRequest{}
	var addGroupAliases bool = false
	this.AddGroupAliases = &addGroupAliases
	var allowGceInference bool = true
	this.AllowGceInference = &allowGceInference
	var maxJwtExp int32 = 900
	this.MaxJwtExp = &maxJwtExp
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// NewGcpRoleRequestWithDefaults instantiates a new GcpRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpRoleRequestWithDefaults() *GcpRoleRequest {
	this := GcpRoleRequest{}
	var addGroupAliases bool = false
	this.AddGroupAliases = &addGroupAliases
	var allowGceInference bool = true
	this.AllowGceInference = &allowGceInference
	var maxJwtExp int32 = 900
	this.MaxJwtExp = &maxJwtExp
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// GetAddGroupAliases returns the AddGroupAliases field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetAddGroupAliases() bool {
	if o == nil || o.AddGroupAliases == nil {
		var ret bool
		return ret
	}
	return *o.AddGroupAliases
}

// GetAddGroupAliasesOk returns a tuple with the AddGroupAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetAddGroupAliasesOk() (*bool, bool) {
	if o == nil || o.AddGroupAliases == nil {
		return nil, false
	}
	return o.AddGroupAliases, true
}

// HasAddGroupAliases returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasAddGroupAliases() bool {
	if o != nil && o.AddGroupAliases != nil {
		return true
	}

	return false
}

// SetAddGroupAliases gets a reference to the given bool and assigns it to the AddGroupAliases field.
func (o *GcpRoleRequest) SetAddGroupAliases(v bool) {
	o.AddGroupAliases = &v
}

// GetAllowGceInference returns the AllowGceInference field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetAllowGceInference() bool {
	if o == nil || o.AllowGceInference == nil {
		var ret bool
		return ret
	}
	return *o.AllowGceInference
}

// GetAllowGceInferenceOk returns a tuple with the AllowGceInference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetAllowGceInferenceOk() (*bool, bool) {
	if o == nil || o.AllowGceInference == nil {
		return nil, false
	}
	return o.AllowGceInference, true
}

// HasAllowGceInference returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasAllowGceInference() bool {
	if o != nil && o.AllowGceInference != nil {
		return true
	}

	return false
}

// SetAllowGceInference gets a reference to the given bool and assigns it to the AllowGceInference field.
func (o *GcpRoleRequest) SetAllowGceInference(v bool) {
	o.AllowGceInference = &v
}

// GetBoundInstanceGroup returns the BoundInstanceGroup field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundInstanceGroup() string {
	if o == nil || o.BoundInstanceGroup == nil {
		var ret string
		return ret
	}
	return *o.BoundInstanceGroup
}

// GetBoundInstanceGroupOk returns a tuple with the BoundInstanceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundInstanceGroupOk() (*string, bool) {
	if o == nil || o.BoundInstanceGroup == nil {
		return nil, false
	}
	return o.BoundInstanceGroup, true
}

// HasBoundInstanceGroup returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundInstanceGroup() bool {
	if o != nil && o.BoundInstanceGroup != nil {
		return true
	}

	return false
}

// SetBoundInstanceGroup gets a reference to the given string and assigns it to the BoundInstanceGroup field.
func (o *GcpRoleRequest) SetBoundInstanceGroup(v string) {
	o.BoundInstanceGroup = &v
}

// GetBoundInstanceGroups returns the BoundInstanceGroups field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundInstanceGroups() []string {
	if o == nil || o.BoundInstanceGroups == nil {
		var ret []string
		return ret
	}
	return o.BoundInstanceGroups
}

// GetBoundInstanceGroupsOk returns a tuple with the BoundInstanceGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundInstanceGroupsOk() ([]string, bool) {
	if o == nil || o.BoundInstanceGroups == nil {
		return nil, false
	}
	return o.BoundInstanceGroups, true
}

// HasBoundInstanceGroups returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundInstanceGroups() bool {
	if o != nil && o.BoundInstanceGroups != nil {
		return true
	}

	return false
}

// SetBoundInstanceGroups gets a reference to the given []string and assigns it to the BoundInstanceGroups field.
func (o *GcpRoleRequest) SetBoundInstanceGroups(v []string) {
	o.BoundInstanceGroups = v
}

// GetBoundLabels returns the BoundLabels field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundLabels() []string {
	if o == nil || o.BoundLabels == nil {
		var ret []string
		return ret
	}
	return o.BoundLabels
}

// GetBoundLabelsOk returns a tuple with the BoundLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundLabelsOk() ([]string, bool) {
	if o == nil || o.BoundLabels == nil {
		return nil, false
	}
	return o.BoundLabels, true
}

// HasBoundLabels returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundLabels() bool {
	if o != nil && o.BoundLabels != nil {
		return true
	}

	return false
}

// SetBoundLabels gets a reference to the given []string and assigns it to the BoundLabels field.
func (o *GcpRoleRequest) SetBoundLabels(v []string) {
	o.BoundLabels = v
}

// GetBoundProjects returns the BoundProjects field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundProjects() []string {
	if o == nil || o.BoundProjects == nil {
		var ret []string
		return ret
	}
	return o.BoundProjects
}

// GetBoundProjectsOk returns a tuple with the BoundProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundProjectsOk() ([]string, bool) {
	if o == nil || o.BoundProjects == nil {
		return nil, false
	}
	return o.BoundProjects, true
}

// HasBoundProjects returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundProjects() bool {
	if o != nil && o.BoundProjects != nil {
		return true
	}

	return false
}

// SetBoundProjects gets a reference to the given []string and assigns it to the BoundProjects field.
func (o *GcpRoleRequest) SetBoundProjects(v []string) {
	o.BoundProjects = v
}

// GetBoundRegion returns the BoundRegion field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundRegion() string {
	if o == nil || o.BoundRegion == nil {
		var ret string
		return ret
	}
	return *o.BoundRegion
}

// GetBoundRegionOk returns a tuple with the BoundRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundRegionOk() (*string, bool) {
	if o == nil || o.BoundRegion == nil {
		return nil, false
	}
	return o.BoundRegion, true
}

// HasBoundRegion returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundRegion() bool {
	if o != nil && o.BoundRegion != nil {
		return true
	}

	return false
}

// SetBoundRegion gets a reference to the given string and assigns it to the BoundRegion field.
func (o *GcpRoleRequest) SetBoundRegion(v string) {
	o.BoundRegion = &v
}

// GetBoundRegions returns the BoundRegions field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundRegions() []string {
	if o == nil || o.BoundRegions == nil {
		var ret []string
		return ret
	}
	return o.BoundRegions
}

// GetBoundRegionsOk returns a tuple with the BoundRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundRegionsOk() ([]string, bool) {
	if o == nil || o.BoundRegions == nil {
		return nil, false
	}
	return o.BoundRegions, true
}

// HasBoundRegions returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundRegions() bool {
	if o != nil && o.BoundRegions != nil {
		return true
	}

	return false
}

// SetBoundRegions gets a reference to the given []string and assigns it to the BoundRegions field.
func (o *GcpRoleRequest) SetBoundRegions(v []string) {
	o.BoundRegions = v
}

// GetBoundServiceAccounts returns the BoundServiceAccounts field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundServiceAccounts() []string {
	if o == nil || o.BoundServiceAccounts == nil {
		var ret []string
		return ret
	}
	return o.BoundServiceAccounts
}

// GetBoundServiceAccountsOk returns a tuple with the BoundServiceAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundServiceAccountsOk() ([]string, bool) {
	if o == nil || o.BoundServiceAccounts == nil {
		return nil, false
	}
	return o.BoundServiceAccounts, true
}

// HasBoundServiceAccounts returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundServiceAccounts() bool {
	if o != nil && o.BoundServiceAccounts != nil {
		return true
	}

	return false
}

// SetBoundServiceAccounts gets a reference to the given []string and assigns it to the BoundServiceAccounts field.
func (o *GcpRoleRequest) SetBoundServiceAccounts(v []string) {
	o.BoundServiceAccounts = v
}

// GetBoundZone returns the BoundZone field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundZone() string {
	if o == nil || o.BoundZone == nil {
		var ret string
		return ret
	}
	return *o.BoundZone
}

// GetBoundZoneOk returns a tuple with the BoundZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundZoneOk() (*string, bool) {
	if o == nil || o.BoundZone == nil {
		return nil, false
	}
	return o.BoundZone, true
}

// HasBoundZone returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundZone() bool {
	if o != nil && o.BoundZone != nil {
		return true
	}

	return false
}

// SetBoundZone gets a reference to the given string and assigns it to the BoundZone field.
func (o *GcpRoleRequest) SetBoundZone(v string) {
	o.BoundZone = &v
}

// GetBoundZones returns the BoundZones field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetBoundZones() []string {
	if o == nil || o.BoundZones == nil {
		var ret []string
		return ret
	}
	return o.BoundZones
}

// GetBoundZonesOk returns a tuple with the BoundZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetBoundZonesOk() ([]string, bool) {
	if o == nil || o.BoundZones == nil {
		return nil, false
	}
	return o.BoundZones, true
}

// HasBoundZones returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasBoundZones() bool {
	if o != nil && o.BoundZones != nil {
		return true
	}

	return false
}

// SetBoundZones gets a reference to the given []string and assigns it to the BoundZones field.
func (o *GcpRoleRequest) SetBoundZones(v []string) {
	o.BoundZones = v
}

// GetMaxJwtExp returns the MaxJwtExp field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetMaxJwtExp() int32 {
	if o == nil || o.MaxJwtExp == nil {
		var ret int32
		return ret
	}
	return *o.MaxJwtExp
}

// GetMaxJwtExpOk returns a tuple with the MaxJwtExp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetMaxJwtExpOk() (*int32, bool) {
	if o == nil || o.MaxJwtExp == nil {
		return nil, false
	}
	return o.MaxJwtExp, true
}

// HasMaxJwtExp returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasMaxJwtExp() bool {
	if o != nil && o.MaxJwtExp != nil {
		return true
	}

	return false
}

// SetMaxJwtExp gets a reference to the given int32 and assigns it to the MaxJwtExp field.
func (o *GcpRoleRequest) SetMaxJwtExp(v int32) {
	o.MaxJwtExp = &v
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
// Deprecated
func (o *GcpRoleRequest) GetMaxTtl() int32 {
	if o == nil || o.MaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GcpRoleRequest) GetMaxTtlOk() (*int32, bool) {
	if o == nil || o.MaxTtl == nil {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasMaxTtl() bool {
	if o != nil && o.MaxTtl != nil {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given int32 and assigns it to the MaxTtl field.
// Deprecated
func (o *GcpRoleRequest) SetMaxTtl(v int32) {
	o.MaxTtl = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
// Deprecated
func (o *GcpRoleRequest) GetPeriod() int32 {
	if o == nil || o.Period == nil {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GcpRoleRequest) GetPeriodOk() (*int32, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
// Deprecated
func (o *GcpRoleRequest) SetPeriod(v int32) {
	o.Period = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
// Deprecated
func (o *GcpRoleRequest) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GcpRoleRequest) GetPoliciesOk() ([]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
// Deprecated
func (o *GcpRoleRequest) SetPolicies(v []string) {
	o.Policies = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *GcpRoleRequest) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetServiceAccounts returns the ServiceAccounts field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetServiceAccounts() []string {
	if o == nil || o.ServiceAccounts == nil {
		var ret []string
		return ret
	}
	return o.ServiceAccounts
}

// GetServiceAccountsOk returns a tuple with the ServiceAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetServiceAccountsOk() ([]string, bool) {
	if o == nil || o.ServiceAccounts == nil {
		return nil, false
	}
	return o.ServiceAccounts, true
}

// HasServiceAccounts returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasServiceAccounts() bool {
	if o != nil && o.ServiceAccounts != nil {
		return true
	}

	return false
}

// SetServiceAccounts gets a reference to the given []string and assigns it to the ServiceAccounts field.
func (o *GcpRoleRequest) SetServiceAccounts(v []string) {
	o.ServiceAccounts = v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *GcpRoleRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

// GetTokenExplicitMaxTtl returns the TokenExplicitMaxTtl field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenExplicitMaxTtl() int32 {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenExplicitMaxTtl
}

// GetTokenExplicitMaxTtlOk returns a tuple with the TokenExplicitMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenExplicitMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		return nil, false
	}
	return o.TokenExplicitMaxTtl, true
}

// HasTokenExplicitMaxTtl returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenExplicitMaxTtl() bool {
	if o != nil && o.TokenExplicitMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenExplicitMaxTtl gets a reference to the given int32 and assigns it to the TokenExplicitMaxTtl field.
func (o *GcpRoleRequest) SetTokenExplicitMaxTtl(v int32) {
	o.TokenExplicitMaxTtl = &v
}

// GetTokenMaxTtl returns the TokenMaxTtl field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenMaxTtl() int32 {
	if o == nil || o.TokenMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenMaxTtl
}

// GetTokenMaxTtlOk returns a tuple with the TokenMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenMaxTtl == nil {
		return nil, false
	}
	return o.TokenMaxTtl, true
}

// HasTokenMaxTtl returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenMaxTtl() bool {
	if o != nil && o.TokenMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenMaxTtl gets a reference to the given int32 and assigns it to the TokenMaxTtl field.
func (o *GcpRoleRequest) SetTokenMaxTtl(v int32) {
	o.TokenMaxTtl = &v
}

// GetTokenNoDefaultPolicy returns the TokenNoDefaultPolicy field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenNoDefaultPolicy() bool {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		var ret bool
		return ret
	}
	return *o.TokenNoDefaultPolicy
}

// GetTokenNoDefaultPolicyOk returns a tuple with the TokenNoDefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenNoDefaultPolicyOk() (*bool, bool) {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		return nil, false
	}
	return o.TokenNoDefaultPolicy, true
}

// HasTokenNoDefaultPolicy returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenNoDefaultPolicy() bool {
	if o != nil && o.TokenNoDefaultPolicy != nil {
		return true
	}

	return false
}

// SetTokenNoDefaultPolicy gets a reference to the given bool and assigns it to the TokenNoDefaultPolicy field.
func (o *GcpRoleRequest) SetTokenNoDefaultPolicy(v bool) {
	o.TokenNoDefaultPolicy = &v
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *GcpRoleRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

// GetTokenPeriod returns the TokenPeriod field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenPeriod() int32 {
	if o == nil || o.TokenPeriod == nil {
		var ret int32
		return ret
	}
	return *o.TokenPeriod
}

// GetTokenPeriodOk returns a tuple with the TokenPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenPeriodOk() (*int32, bool) {
	if o == nil || o.TokenPeriod == nil {
		return nil, false
	}
	return o.TokenPeriod, true
}

// HasTokenPeriod returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenPeriod() bool {
	if o != nil && o.TokenPeriod != nil {
		return true
	}

	return false
}

// SetTokenPeriod gets a reference to the given int32 and assigns it to the TokenPeriod field.
func (o *GcpRoleRequest) SetTokenPeriod(v int32) {
	o.TokenPeriod = &v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *GcpRoleRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *GcpRoleRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *GcpRoleRequest) SetTokenType(v string) {
	o.TokenType = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
// Deprecated
func (o *GcpRoleRequest) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GcpRoleRequest) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
// Deprecated
func (o *GcpRoleRequest) SetTtl(v int32) {
	o.Ttl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GcpRoleRequest) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleRequest) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GcpRoleRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GcpRoleRequest) SetType(v string) {
	o.Type = &v
}

func (o GcpRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AddGroupAliases != nil {
		toSerialize["add_group_aliases"] = o.AddGroupAliases
	}
	if o.AllowGceInference != nil {
		toSerialize["allow_gce_inference"] = o.AllowGceInference
	}
	if o.BoundInstanceGroup != nil {
		toSerialize["bound_instance_group"] = o.BoundInstanceGroup
	}
	if o.BoundInstanceGroups != nil {
		toSerialize["bound_instance_groups"] = o.BoundInstanceGroups
	}
	if o.BoundLabels != nil {
		toSerialize["bound_labels"] = o.BoundLabels
	}
	if o.BoundProjects != nil {
		toSerialize["bound_projects"] = o.BoundProjects
	}
	if o.BoundRegion != nil {
		toSerialize["bound_region"] = o.BoundRegion
	}
	if o.BoundRegions != nil {
		toSerialize["bound_regions"] = o.BoundRegions
	}
	if o.BoundServiceAccounts != nil {
		toSerialize["bound_service_accounts"] = o.BoundServiceAccounts
	}
	if o.BoundZone != nil {
		toSerialize["bound_zone"] = o.BoundZone
	}
	if o.BoundZones != nil {
		toSerialize["bound_zones"] = o.BoundZones
	}
	if o.MaxJwtExp != nil {
		toSerialize["max_jwt_exp"] = o.MaxJwtExp
	}
	if o.MaxTtl != nil {
		toSerialize["max_ttl"] = o.MaxTtl
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.ProjectId != nil {
		toSerialize["project_id"] = o.ProjectId
	}
	if o.ServiceAccounts != nil {
		toSerialize["service_accounts"] = o.ServiceAccounts
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	if o.TokenExplicitMaxTtl != nil {
		toSerialize["token_explicit_max_ttl"] = o.TokenExplicitMaxTtl
	}
	if o.TokenMaxTtl != nil {
		toSerialize["token_max_ttl"] = o.TokenMaxTtl
	}
	if o.TokenNoDefaultPolicy != nil {
		toSerialize["token_no_default_policy"] = o.TokenNoDefaultPolicy
	}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	if o.TokenPeriod != nil {
		toSerialize["token_period"] = o.TokenPeriod
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	if o.TokenType != nil {
		toSerialize["token_type"] = o.TokenType
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableGcpRoleRequest struct {
	value *GcpRoleRequest
	isSet bool
}

func (v NullableGcpRoleRequest) Get() *GcpRoleRequest {
	return v.value
}

func (v *NullableGcpRoleRequest) Set(val *GcpRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpRoleRequest(val *GcpRoleRequest) *NullableGcpRoleRequest {
	return &NullableGcpRoleRequest{value: val, isSet: true}
}

func (v NullableGcpRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


