/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// ApproleRoleSecretIdRequest struct for ApproleRoleSecretIdRequest
type ApproleRoleSecretIdRequest struct {
	// Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If 'bound_cidr_list' is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.
	CidrList []string `json:"cidr_list,omitempty"`
	// Metadata to be tied to the SecretID. This should be a JSON formatted string containing the metadata in key value pairs.
	Metadata *string `json:"metadata,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
}

// NewApproleRoleSecretIdRequest instantiates a new ApproleRoleSecretIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproleRoleSecretIdRequest() *ApproleRoleSecretIdRequest {
	this := ApproleRoleSecretIdRequest{}
	return &this
}

// NewApproleRoleSecretIdRequestWithDefaults instantiates a new ApproleRoleSecretIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproleRoleSecretIdRequestWithDefaults() *ApproleRoleSecretIdRequest {
	this := ApproleRoleSecretIdRequest{}
	return &this
}

// GetCidrList returns the CidrList field value if set, zero value otherwise.
func (o *ApproleRoleSecretIdRequest) GetCidrList() []string {
	if o == nil || o.CidrList == nil {
		var ret []string
		return ret
	}
	return o.CidrList
}

// GetCidrListOk returns a tuple with the CidrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleSecretIdRequest) GetCidrListOk() ([]string, bool) {
	if o == nil || o.CidrList == nil {
		return nil, false
	}
	return o.CidrList, true
}

// HasCidrList returns a boolean if a field has been set.
func (o *ApproleRoleSecretIdRequest) HasCidrList() bool {
	if o != nil && o.CidrList != nil {
		return true
	}

	return false
}

// SetCidrList gets a reference to the given []string and assigns it to the CidrList field.
func (o *ApproleRoleSecretIdRequest) SetCidrList(v []string) {
	o.CidrList = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApproleRoleSecretIdRequest) GetMetadata() string {
	if o == nil || o.Metadata == nil {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleSecretIdRequest) GetMetadataOk() (*string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApproleRoleSecretIdRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *ApproleRoleSecretIdRequest) SetMetadata(v string) {
	o.Metadata = &v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *ApproleRoleSecretIdRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleSecretIdRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *ApproleRoleSecretIdRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *ApproleRoleSecretIdRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

func (o ApproleRoleSecretIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CidrList != nil {
		toSerialize["cidr_list"] = o.CidrList
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	return json.Marshal(toSerialize)
}

type NullableApproleRoleSecretIdRequest struct {
	value *ApproleRoleSecretIdRequest
	isSet bool
}

func (v NullableApproleRoleSecretIdRequest) Get() *ApproleRoleSecretIdRequest {
	return v.value
}

func (v *NullableApproleRoleSecretIdRequest) Set(val *ApproleRoleSecretIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproleRoleSecretIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproleRoleSecretIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproleRoleSecretIdRequest(val *ApproleRoleSecretIdRequest) *NullableApproleRoleSecretIdRequest {
	return &NullableApproleRoleSecretIdRequest{value: val, isSet: true}
}

func (v NullableApproleRoleSecretIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproleRoleSecretIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


