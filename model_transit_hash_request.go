/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// TransitHashRequest struct for TransitHashRequest
type TransitHashRequest struct {
	// Algorithm to use (POST body parameter). Valid values are: * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 Defaults to \"sha2-256\".
	Algorithm *string `json:"algorithm,omitempty"`
	// Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"hex\".
	Format *string `json:"format,omitempty"`
	// The base64-encoded input data
	Input *string `json:"input,omitempty"`
	// Algorithm to use (POST URL parameter)
	Urlalgorithm *string `json:"urlalgorithm,omitempty"`
}

// NewTransitHashRequest instantiates a new TransitHashRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransitHashRequest() *TransitHashRequest {
	this := TransitHashRequest{}
	var algorithm string = "sha2-256"
	this.Algorithm = &algorithm
	var format string = "hex"
	this.Format = &format
	return &this
}

// NewTransitHashRequestWithDefaults instantiates a new TransitHashRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitHashRequestWithDefaults() *TransitHashRequest {
	this := TransitHashRequest{}
	var algorithm string = "sha2-256"
	this.Algorithm = &algorithm
	var format string = "hex"
	this.Format = &format
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *TransitHashRequest) GetAlgorithm() string {
	if o == nil || o.Algorithm == nil {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitHashRequest) GetAlgorithmOk() (*string, bool) {
	if o == nil || o.Algorithm == nil {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *TransitHashRequest) HasAlgorithm() bool {
	if o != nil && o.Algorithm != nil {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *TransitHashRequest) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *TransitHashRequest) GetFormat() string {
	if o == nil || o.Format == nil {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitHashRequest) GetFormatOk() (*string, bool) {
	if o == nil || o.Format == nil {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *TransitHashRequest) HasFormat() bool {
	if o != nil && o.Format != nil {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *TransitHashRequest) SetFormat(v string) {
	o.Format = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *TransitHashRequest) GetInput() string {
	if o == nil || o.Input == nil {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitHashRequest) GetInputOk() (*string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *TransitHashRequest) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *TransitHashRequest) SetInput(v string) {
	o.Input = &v
}

// GetUrlalgorithm returns the Urlalgorithm field value if set, zero value otherwise.
func (o *TransitHashRequest) GetUrlalgorithm() string {
	if o == nil || o.Urlalgorithm == nil {
		var ret string
		return ret
	}
	return *o.Urlalgorithm
}

// GetUrlalgorithmOk returns a tuple with the Urlalgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitHashRequest) GetUrlalgorithmOk() (*string, bool) {
	if o == nil || o.Urlalgorithm == nil {
		return nil, false
	}
	return o.Urlalgorithm, true
}

// HasUrlalgorithm returns a boolean if a field has been set.
func (o *TransitHashRequest) HasUrlalgorithm() bool {
	if o != nil && o.Urlalgorithm != nil {
		return true
	}

	return false
}

// SetUrlalgorithm gets a reference to the given string and assigns it to the Urlalgorithm field.
func (o *TransitHashRequest) SetUrlalgorithm(v string) {
	o.Urlalgorithm = &v
}

func (o TransitHashRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Algorithm != nil {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.Format != nil {
		toSerialize["format"] = o.Format
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.Urlalgorithm != nil {
		toSerialize["urlalgorithm"] = o.Urlalgorithm
	}
	return json.Marshal(toSerialize)
}

type NullableTransitHashRequest struct {
	value *TransitHashRequest
	isSet bool
}

func (v NullableTransitHashRequest) Get() *TransitHashRequest {
	return v.value
}

func (v *NullableTransitHashRequest) Set(val *TransitHashRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitHashRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitHashRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitHashRequest(val *TransitHashRequest) *NullableTransitHashRequest {
	return &NullableTransitHashRequest{value: val, isSet: true}
}

func (v NullableTransitHashRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitHashRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


