/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// OciRoleRequest struct for OciRoleRequest
type OciRoleRequest struct {
	// A comma separated list of Group or Dynamic Group OCIDs that are allowed to take this role.
	OcidList []string `json:"ocid_list,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
	TokenExplicitMaxTtl *int32 `json:"token_explicit_max_ttl,omitempty"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int32 `json:"token_max_ttl,omitempty"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"token_no_default_policy,omitempty"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").
	TokenPeriod *int32 `json:"token_period,omitempty"`
	// Comma-separated list of policies
	TokenPolicies []string `json:"token_policies,omitempty"`
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
	// The type of token to generate, service or batch
	TokenType *string `json:"token_type,omitempty"`
}

// NewOciRoleRequest instantiates a new OciRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOciRoleRequest() *OciRoleRequest {
	this := OciRoleRequest{}
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// NewOciRoleRequestWithDefaults instantiates a new OciRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOciRoleRequestWithDefaults() *OciRoleRequest {
	this := OciRoleRequest{}
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// GetOcidList returns the OcidList field value if set, zero value otherwise.
func (o *OciRoleRequest) GetOcidList() []string {
	if o == nil || o.OcidList == nil {
		var ret []string
		return ret
	}
	return o.OcidList
}

// GetOcidListOk returns a tuple with the OcidList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetOcidListOk() ([]string, bool) {
	if o == nil || o.OcidList == nil {
		return nil, false
	}
	return o.OcidList, true
}

// HasOcidList returns a boolean if a field has been set.
func (o *OciRoleRequest) HasOcidList() bool {
	if o != nil && o.OcidList != nil {
		return true
	}

	return false
}

// SetOcidList gets a reference to the given []string and assigns it to the OcidList field.
func (o *OciRoleRequest) SetOcidList(v []string) {
	o.OcidList = v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *OciRoleRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

// GetTokenExplicitMaxTtl returns the TokenExplicitMaxTtl field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenExplicitMaxTtl() int32 {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenExplicitMaxTtl
}

// GetTokenExplicitMaxTtlOk returns a tuple with the TokenExplicitMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenExplicitMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		return nil, false
	}
	return o.TokenExplicitMaxTtl, true
}

// HasTokenExplicitMaxTtl returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenExplicitMaxTtl() bool {
	if o != nil && o.TokenExplicitMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenExplicitMaxTtl gets a reference to the given int32 and assigns it to the TokenExplicitMaxTtl field.
func (o *OciRoleRequest) SetTokenExplicitMaxTtl(v int32) {
	o.TokenExplicitMaxTtl = &v
}

// GetTokenMaxTtl returns the TokenMaxTtl field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenMaxTtl() int32 {
	if o == nil || o.TokenMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenMaxTtl
}

// GetTokenMaxTtlOk returns a tuple with the TokenMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenMaxTtl == nil {
		return nil, false
	}
	return o.TokenMaxTtl, true
}

// HasTokenMaxTtl returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenMaxTtl() bool {
	if o != nil && o.TokenMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenMaxTtl gets a reference to the given int32 and assigns it to the TokenMaxTtl field.
func (o *OciRoleRequest) SetTokenMaxTtl(v int32) {
	o.TokenMaxTtl = &v
}

// GetTokenNoDefaultPolicy returns the TokenNoDefaultPolicy field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenNoDefaultPolicy() bool {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		var ret bool
		return ret
	}
	return *o.TokenNoDefaultPolicy
}

// GetTokenNoDefaultPolicyOk returns a tuple with the TokenNoDefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenNoDefaultPolicyOk() (*bool, bool) {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		return nil, false
	}
	return o.TokenNoDefaultPolicy, true
}

// HasTokenNoDefaultPolicy returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenNoDefaultPolicy() bool {
	if o != nil && o.TokenNoDefaultPolicy != nil {
		return true
	}

	return false
}

// SetTokenNoDefaultPolicy gets a reference to the given bool and assigns it to the TokenNoDefaultPolicy field.
func (o *OciRoleRequest) SetTokenNoDefaultPolicy(v bool) {
	o.TokenNoDefaultPolicy = &v
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *OciRoleRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

// GetTokenPeriod returns the TokenPeriod field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenPeriod() int32 {
	if o == nil || o.TokenPeriod == nil {
		var ret int32
		return ret
	}
	return *o.TokenPeriod
}

// GetTokenPeriodOk returns a tuple with the TokenPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenPeriodOk() (*int32, bool) {
	if o == nil || o.TokenPeriod == nil {
		return nil, false
	}
	return o.TokenPeriod, true
}

// HasTokenPeriod returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenPeriod() bool {
	if o != nil && o.TokenPeriod != nil {
		return true
	}

	return false
}

// SetTokenPeriod gets a reference to the given int32 and assigns it to the TokenPeriod field.
func (o *OciRoleRequest) SetTokenPeriod(v int32) {
	o.TokenPeriod = &v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *OciRoleRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *OciRoleRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *OciRoleRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OciRoleRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *OciRoleRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *OciRoleRequest) SetTokenType(v string) {
	o.TokenType = &v
}

func (o OciRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OcidList != nil {
		toSerialize["ocid_list"] = o.OcidList
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	if o.TokenExplicitMaxTtl != nil {
		toSerialize["token_explicit_max_ttl"] = o.TokenExplicitMaxTtl
	}
	if o.TokenMaxTtl != nil {
		toSerialize["token_max_ttl"] = o.TokenMaxTtl
	}
	if o.TokenNoDefaultPolicy != nil {
		toSerialize["token_no_default_policy"] = o.TokenNoDefaultPolicy
	}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	if o.TokenPeriod != nil {
		toSerialize["token_period"] = o.TokenPeriod
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	if o.TokenType != nil {
		toSerialize["token_type"] = o.TokenType
	}
	return json.Marshal(toSerialize)
}

type NullableOciRoleRequest struct {
	value *OciRoleRequest
	isSet bool
}

func (v NullableOciRoleRequest) Get() *OciRoleRequest {
	return v.value
}

func (v *NullableOciRoleRequest) Set(val *OciRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOciRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOciRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOciRoleRequest(val *OciRoleRequest) *NullableOciRoleRequest {
	return &NullableOciRoleRequest{value: val, isSet: true}
}

func (v NullableOciRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOciRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


