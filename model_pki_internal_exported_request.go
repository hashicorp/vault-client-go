/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// PkiInternalExportedRequest struct for PkiInternalExportedRequest
type PkiInternalExportedRequest struct {
	// The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.
	KeyBits *int32 `json:"key_bits,omitempty"`
	// Optional name to be used for this key
	KeyName *string `json:"key_name,omitempty"`
	// The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.
	KeyType *string `json:"key_type,omitempty"`
	// The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types.
	ManagedKeyId *string `json:"managed_key_id,omitempty"`
	// The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types.
	ManagedKeyName *string `json:"managed_key_name,omitempty"`
}

// NewPkiInternalExportedRequest instantiates a new PkiInternalExportedRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkiInternalExportedRequest() *PkiInternalExportedRequest {
	this := PkiInternalExportedRequest{}
	var keyBits int32 = 0
	this.KeyBits = &keyBits
	var keyType string = "rsa"
	this.KeyType = &keyType
	return &this
}

// NewPkiInternalExportedRequestWithDefaults instantiates a new PkiInternalExportedRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkiInternalExportedRequestWithDefaults() *PkiInternalExportedRequest {
	this := PkiInternalExportedRequest{}
	var keyBits int32 = 0
	this.KeyBits = &keyBits
	var keyType string = "rsa"
	this.KeyType = &keyType
	return &this
}

// GetKeyBits returns the KeyBits field value if set, zero value otherwise.
func (o *PkiInternalExportedRequest) GetKeyBits() int32 {
	if o == nil || o.KeyBits == nil {
		var ret int32
		return ret
	}
	return *o.KeyBits
}

// GetKeyBitsOk returns a tuple with the KeyBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiInternalExportedRequest) GetKeyBitsOk() (*int32, bool) {
	if o == nil || o.KeyBits == nil {
		return nil, false
	}
	return o.KeyBits, true
}

// HasKeyBits returns a boolean if a field has been set.
func (o *PkiInternalExportedRequest) HasKeyBits() bool {
	if o != nil && o.KeyBits != nil {
		return true
	}

	return false
}

// SetKeyBits gets a reference to the given int32 and assigns it to the KeyBits field.
func (o *PkiInternalExportedRequest) SetKeyBits(v int32) {
	o.KeyBits = &v
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *PkiInternalExportedRequest) GetKeyName() string {
	if o == nil || o.KeyName == nil {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiInternalExportedRequest) GetKeyNameOk() (*string, bool) {
	if o == nil || o.KeyName == nil {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *PkiInternalExportedRequest) HasKeyName() bool {
	if o != nil && o.KeyName != nil {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *PkiInternalExportedRequest) SetKeyName(v string) {
	o.KeyName = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *PkiInternalExportedRequest) GetKeyType() string {
	if o == nil || o.KeyType == nil {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiInternalExportedRequest) GetKeyTypeOk() (*string, bool) {
	if o == nil || o.KeyType == nil {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *PkiInternalExportedRequest) HasKeyType() bool {
	if o != nil && o.KeyType != nil {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *PkiInternalExportedRequest) SetKeyType(v string) {
	o.KeyType = &v
}

// GetManagedKeyId returns the ManagedKeyId field value if set, zero value otherwise.
func (o *PkiInternalExportedRequest) GetManagedKeyId() string {
	if o == nil || o.ManagedKeyId == nil {
		var ret string
		return ret
	}
	return *o.ManagedKeyId
}

// GetManagedKeyIdOk returns a tuple with the ManagedKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiInternalExportedRequest) GetManagedKeyIdOk() (*string, bool) {
	if o == nil || o.ManagedKeyId == nil {
		return nil, false
	}
	return o.ManagedKeyId, true
}

// HasManagedKeyId returns a boolean if a field has been set.
func (o *PkiInternalExportedRequest) HasManagedKeyId() bool {
	if o != nil && o.ManagedKeyId != nil {
		return true
	}

	return false
}

// SetManagedKeyId gets a reference to the given string and assigns it to the ManagedKeyId field.
func (o *PkiInternalExportedRequest) SetManagedKeyId(v string) {
	o.ManagedKeyId = &v
}

// GetManagedKeyName returns the ManagedKeyName field value if set, zero value otherwise.
func (o *PkiInternalExportedRequest) GetManagedKeyName() string {
	if o == nil || o.ManagedKeyName == nil {
		var ret string
		return ret
	}
	return *o.ManagedKeyName
}

// GetManagedKeyNameOk returns a tuple with the ManagedKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiInternalExportedRequest) GetManagedKeyNameOk() (*string, bool) {
	if o == nil || o.ManagedKeyName == nil {
		return nil, false
	}
	return o.ManagedKeyName, true
}

// HasManagedKeyName returns a boolean if a field has been set.
func (o *PkiInternalExportedRequest) HasManagedKeyName() bool {
	if o != nil && o.ManagedKeyName != nil {
		return true
	}

	return false
}

// SetManagedKeyName gets a reference to the given string and assigns it to the ManagedKeyName field.
func (o *PkiInternalExportedRequest) SetManagedKeyName(v string) {
	o.ManagedKeyName = &v
}

func (o PkiInternalExportedRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyBits != nil {
		toSerialize["key_bits"] = o.KeyBits
	}
	if o.KeyName != nil {
		toSerialize["key_name"] = o.KeyName
	}
	if o.KeyType != nil {
		toSerialize["key_type"] = o.KeyType
	}
	if o.ManagedKeyId != nil {
		toSerialize["managed_key_id"] = o.ManagedKeyId
	}
	if o.ManagedKeyName != nil {
		toSerialize["managed_key_name"] = o.ManagedKeyName
	}
	return json.Marshal(toSerialize)
}

type NullablePkiInternalExportedRequest struct {
	value *PkiInternalExportedRequest
	isSet bool
}

func (v NullablePkiInternalExportedRequest) Get() *PkiInternalExportedRequest {
	return v.value
}

func (v *NullablePkiInternalExportedRequest) Set(val *PkiInternalExportedRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePkiInternalExportedRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePkiInternalExportedRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkiInternalExportedRequest(val *PkiInternalExportedRequest) *NullablePkiInternalExportedRequest {
	return &NullablePkiInternalExportedRequest{value: val, isSet: true}
}

func (v NullablePkiInternalExportedRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkiInternalExportedRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


