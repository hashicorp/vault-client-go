/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// GcpkmsKeysRequest struct for GcpkmsKeysRequest
type GcpkmsKeysRequest struct {
	// Algorithm to use for encryption, decryption, or signing. The value depends on the key purpose. The value cannot be changed after creation. For a key purpose of \"encrypt_decrypt\", the valid values are: - symmetric_encryption (default) For a key purpose of \"asymmetric_sign\", valid values are: - rsa_sign_pss_2048_sha256 - rsa_sign_pss_3072_sha256 - rsa_sign_pss_4096_sha256 - rsa_sign_pkcs1_2048_sha256 - rsa_sign_pkcs1_3072_sha256 - rsa_sign_pkcs1_4096_sha256 - ec_sign_p256_sha256 - ec_sign_p384_sha384 For a key purpose of \"asymmetric_decrypt\", valid values are: - rsa_decrypt_oaep_2048_sha256 - rsa_decrypt_oaep_3072_sha256 - rsa_decrypt_oaep_4096_sha256
	Algorithm *string `json:"algorithm,omitempty"`
	// Name of the crypto key to use. If the given crypto key does not exist, Vault will try to create it. This defaults to the name of the key given to Vault as the parameter if unspecified.
	CryptoKey *string `json:"crypto_key,omitempty"`
	// Full Google Cloud resource ID of the key ring with the project and location (e.g. projects/my-project/locations/global/keyRings/my-keyring). If the given key ring does not exist, Vault will try to create it during a create operation.
	KeyRing *string `json:"key_ring,omitempty"`
	// Arbitrary key=value label to apply to the crypto key. To specify multiple labels, specify this argument multiple times (e.g. labels=\"a=b\" labels=\"c=d\").
	Labels map[string]interface{} `json:"labels,omitempty"`
	// Level of protection to use for the key management. Valid values are \"software\" and \"hsm\". The default value is \"software\". The value cannot be changed after creation.
	ProtectionLevel *string `json:"protection_level,omitempty"`
	// Purpose of the key. Valid options are \"asymmetric_decrypt\", \"asymmetric_sign\", and \"encrypt_decrypt\". The default value is \"encrypt_decrypt\". The value cannot be changed after creation.
	Purpose *string `json:"purpose,omitempty"`
	// Amount of time between crypto key version rotations. This is specified as a time duration value like 72h (72 hours). The smallest possible value is 24h. This value only applies to keys with a purpose of \"encrypt_decrypt\".
	RotationPeriod *int32 `json:"rotation_period,omitempty"`
}

// NewGcpkmsKeysRequest instantiates a new GcpkmsKeysRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpkmsKeysRequest() *GcpkmsKeysRequest {
	this := GcpkmsKeysRequest{}
	return &this
}

// NewGcpkmsKeysRequestWithDefaults instantiates a new GcpkmsKeysRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpkmsKeysRequestWithDefaults() *GcpkmsKeysRequest {
	this := GcpkmsKeysRequest{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetAlgorithm() string {
	if o == nil || o.Algorithm == nil {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetAlgorithmOk() (*string, bool) {
	if o == nil || o.Algorithm == nil {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasAlgorithm() bool {
	if o != nil && o.Algorithm != nil {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *GcpkmsKeysRequest) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetCryptoKey returns the CryptoKey field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetCryptoKey() string {
	if o == nil || o.CryptoKey == nil {
		var ret string
		return ret
	}
	return *o.CryptoKey
}

// GetCryptoKeyOk returns a tuple with the CryptoKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetCryptoKeyOk() (*string, bool) {
	if o == nil || o.CryptoKey == nil {
		return nil, false
	}
	return o.CryptoKey, true
}

// HasCryptoKey returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasCryptoKey() bool {
	if o != nil && o.CryptoKey != nil {
		return true
	}

	return false
}

// SetCryptoKey gets a reference to the given string and assigns it to the CryptoKey field.
func (o *GcpkmsKeysRequest) SetCryptoKey(v string) {
	o.CryptoKey = &v
}

// GetKeyRing returns the KeyRing field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetKeyRing() string {
	if o == nil || o.KeyRing == nil {
		var ret string
		return ret
	}
	return *o.KeyRing
}

// GetKeyRingOk returns a tuple with the KeyRing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetKeyRingOk() (*string, bool) {
	if o == nil || o.KeyRing == nil {
		return nil, false
	}
	return o.KeyRing, true
}

// HasKeyRing returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasKeyRing() bool {
	if o != nil && o.KeyRing != nil {
		return true
	}

	return false
}

// SetKeyRing gets a reference to the given string and assigns it to the KeyRing field.
func (o *GcpkmsKeysRequest) SetKeyRing(v string) {
	o.KeyRing = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetLabels() map[string]interface{} {
	if o == nil || o.Labels == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *GcpkmsKeysRequest) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

// GetProtectionLevel returns the ProtectionLevel field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetProtectionLevel() string {
	if o == nil || o.ProtectionLevel == nil {
		var ret string
		return ret
	}
	return *o.ProtectionLevel
}

// GetProtectionLevelOk returns a tuple with the ProtectionLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetProtectionLevelOk() (*string, bool) {
	if o == nil || o.ProtectionLevel == nil {
		return nil, false
	}
	return o.ProtectionLevel, true
}

// HasProtectionLevel returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasProtectionLevel() bool {
	if o != nil && o.ProtectionLevel != nil {
		return true
	}

	return false
}

// SetProtectionLevel gets a reference to the given string and assigns it to the ProtectionLevel field.
func (o *GcpkmsKeysRequest) SetProtectionLevel(v string) {
	o.ProtectionLevel = &v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetPurpose() string {
	if o == nil || o.Purpose == nil {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetPurposeOk() (*string, bool) {
	if o == nil || o.Purpose == nil {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasPurpose() bool {
	if o != nil && o.Purpose != nil {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *GcpkmsKeysRequest) SetPurpose(v string) {
	o.Purpose = &v
}

// GetRotationPeriod returns the RotationPeriod field value if set, zero value otherwise.
func (o *GcpkmsKeysRequest) GetRotationPeriod() int32 {
	if o == nil || o.RotationPeriod == nil {
		var ret int32
		return ret
	}
	return *o.RotationPeriod
}

// GetRotationPeriodOk returns a tuple with the RotationPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysRequest) GetRotationPeriodOk() (*int32, bool) {
	if o == nil || o.RotationPeriod == nil {
		return nil, false
	}
	return o.RotationPeriod, true
}

// HasRotationPeriod returns a boolean if a field has been set.
func (o *GcpkmsKeysRequest) HasRotationPeriod() bool {
	if o != nil && o.RotationPeriod != nil {
		return true
	}

	return false
}

// SetRotationPeriod gets a reference to the given int32 and assigns it to the RotationPeriod field.
func (o *GcpkmsKeysRequest) SetRotationPeriod(v int32) {
	o.RotationPeriod = &v
}

func (o GcpkmsKeysRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Algorithm != nil {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.CryptoKey != nil {
		toSerialize["crypto_key"] = o.CryptoKey
	}
	if o.KeyRing != nil {
		toSerialize["key_ring"] = o.KeyRing
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.ProtectionLevel != nil {
		toSerialize["protection_level"] = o.ProtectionLevel
	}
	if o.Purpose != nil {
		toSerialize["purpose"] = o.Purpose
	}
	if o.RotationPeriod != nil {
		toSerialize["rotation_period"] = o.RotationPeriod
	}
	return json.Marshal(toSerialize)
}

type NullableGcpkmsKeysRequest struct {
	value *GcpkmsKeysRequest
	isSet bool
}

func (v NullableGcpkmsKeysRequest) Get() *GcpkmsKeysRequest {
	return v.value
}

func (v *NullableGcpkmsKeysRequest) Set(val *GcpkmsKeysRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpkmsKeysRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpkmsKeysRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpkmsKeysRequest(val *GcpkmsKeysRequest) *NullableGcpkmsKeysRequest {
	return &NullableGcpkmsKeysRequest{value: val, isSet: true}
}

func (v NullableGcpkmsKeysRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpkmsKeysRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


