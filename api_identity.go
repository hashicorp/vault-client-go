/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Identity is a simple wrapper around the client for Identity requests
type Identity struct {
	client *Client
}

// DeleteIdentityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) DeleteIdentityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityEntityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) DeleteIdentityEntityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityEntityIdId Update, read or delete an entity using entity ID
// id: ID of the entity. If set, updates the corresponding existing entity.
func (a *Identity) DeleteIdentityEntityIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityEntityNameName Update, read or delete an entity using entity name
// name: Name of the entity
func (a *Identity) DeleteIdentityEntityNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityGroupAliasIdId
// id: ID of the group alias.
func (a *Identity) DeleteIdentityGroupAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityGroupIdId Update or delete an existing group using its ID.
// id: ID of the group. If set, updates the corresponding existing group.
func (a *Identity) DeleteIdentityGroupIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityGroupNameName
// name: Name of the group.
func (a *Identity) DeleteIdentityGroupNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaLoginEnforcementName Delete a login enforcement
// name: Name for this login enforcement configuration
func (a *Identity) DeleteIdentityMfaLoginEnforcementName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodDuoMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodDuoMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodOktaMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodOktaMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodPingidMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodPingidMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodTotpMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodTotpMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcAssignmentName
// name: Name of the assignment
func (a *Identity) DeleteIdentityOidcAssignmentName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcClientName
// name: Name of the client.
func (a *Identity) DeleteIdentityOidcClientName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcKeyName CRUD operations for OIDC keys.
// name: Name of the key
func (a *Identity) DeleteIdentityOidcKeyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcProviderName
// name: Name of the provider
func (a *Identity) DeleteIdentityOidcProviderName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcRoleName CRUD operations on OIDC Roles
// name: Name of the role
func (a *Identity) DeleteIdentityOidcRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcScopeName
// name: Name of the scope
func (a *Identity) DeleteIdentityOidcScopeName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityPersonaIdId Update, read or delete an alias ID.
// id: ID of the persona
func (a *Identity) DeleteIdentityPersonaIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityAliasId List all the alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityAliasId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) GetIdentityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityEntityAliasId List all the alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityEntityAliasId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityEntityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) GetIdentityEntityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityEntityId List all the entity IDs
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityEntityId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityEntityIdId Update, read or delete an entity using entity ID
// id: ID of the entity. If set, updates the corresponding existing entity.
func (a *Identity) GetIdentityEntityIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityEntityName List all the entity names
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityEntityName(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityEntityNameName Update, read or delete an entity using entity name
// name: Name of the entity
func (a *Identity) GetIdentityEntityNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityGroupAliasId List all the group alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityGroupAliasId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityGroupAliasIdId
// id: ID of the group alias.
func (a *Identity) GetIdentityGroupAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityGroupId List all the group IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityGroupId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityGroupIdId Update or delete an existing group using its ID.
// id: ID of the group. If set, updates the corresponding existing group.
func (a *Identity) GetIdentityGroupIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityGroupName
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityGroupName(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityGroupNameName
// name: Name of the group.
func (a *Identity) GetIdentityGroupNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaLoginEnforcement List login enforcements
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityMfaLoginEnforcement(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaLoginEnforcementName Read the current login enforcement
// name: Name for this login enforcement configuration
func (a *Identity) GetIdentityMfaLoginEnforcementName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethod List MFA method configurations for all MFA methods
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityMfaMethod(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodDuo List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityMfaMethodDuo(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodDuoMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) GetIdentityMfaMethodDuoMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodMethodId Read the current configuration for the given ID regardless of the MFA method type
// methodId: The unique identifier for this MFA method.
func (a *Identity) GetIdentityMfaMethodMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodOkta List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityMfaMethodOkta(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodOktaMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) GetIdentityMfaMethodOktaMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodPingid List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityMfaMethodPingid(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodPingidMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) GetIdentityMfaMethodPingidMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodTotp List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityMfaMethodTotp(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityMfaMethodTotpMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) GetIdentityMfaMethodTotpMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcAssignment
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityOidcAssignment(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcAssignmentName
// name: Name of the assignment
func (a *Identity) GetIdentityOidcAssignmentName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcClient
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityOidcClient(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcClientName
// name: Name of the client.
func (a *Identity) GetIdentityOidcClientName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcConfig OIDC configuration
func (a *Identity) GetIdentityOidcConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcKey List OIDC keys
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityOidcKey(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcKeyName CRUD operations for OIDC keys.
// name: Name of the key
func (a *Identity) GetIdentityOidcKeyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcProvider
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityOidcProvider(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcProviderName
// name: Name of the provider
func (a *Identity) GetIdentityOidcProviderName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcProviderNameAuthorize
// name: Name of the provider
func (a *Identity) GetIdentityOidcProviderNameAuthorize(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/authorize"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcProviderNameUserinfo
// name: Name of the provider
func (a *Identity) GetIdentityOidcProviderNameUserinfo(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/userinfo"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcProviderNameWellKnownKeys
// name: Name of the provider
func (a *Identity) GetIdentityOidcProviderNameWellKnownKeys(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/.well-known/keys"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcProviderNameWellKnownOpenidConfiguration
// name: Name of the provider
func (a *Identity) GetIdentityOidcProviderNameWellKnownOpenidConfiguration(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/.well-known/openid-configuration"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcRole List configured OIDC roles
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityOidcRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcRoleName CRUD operations on OIDC Roles
// name: Name of the role
func (a *Identity) GetIdentityOidcRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcScope
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityOidcScope(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcScopeName
// name: Name of the scope
func (a *Identity) GetIdentityOidcScopeName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcTokenName Generate an OIDC token
// name: Name of the role
func (a *Identity) GetIdentityOidcTokenName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/token/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcWellKnownKeys Retrieve public keys
func (a *Identity) GetIdentityOidcWellKnownKeys(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/.well-known/keys"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityOidcWellKnownOpenidConfiguration Query OIDC configurations
func (a *Identity) GetIdentityOidcWellKnownOpenidConfiguration(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/.well-known/openid-configuration"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityPersonaId List all the alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) GetIdentityPersonaId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetIdentityPersonaIdId Update, read or delete an alias ID.
// id: ID of the persona
func (a *Identity) GetIdentityPersonaIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostIdentityAlias Create a new alias.
func (a *Identity) PostIdentityAlias(ctx context.Context, identityAliasRequest IdentityAliasRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityAliasRequest,
		nil, // request query parameters
	)
}

// PostIdentityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) PostIdentityAliasIdId(ctx context.Context, id string, identityAliasIdRequest IdentityAliasIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityAliasIdRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntity Create a new entity
func (a *Identity) PostIdentityEntity(ctx context.Context, identityEntityRequest IdentityEntityRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntityAlias Create a new alias.
func (a *Identity) PostIdentityEntityAlias(ctx context.Context, identityEntityAliasRequest IdentityEntityAliasRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityAliasRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) PostIdentityEntityAliasIdId(ctx context.Context, id string, identityEntityAliasIdRequest IdentityEntityAliasIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityAliasIdRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntityBatchDelete Delete all of the entities provided
func (a *Identity) PostIdentityEntityBatchDelete(ctx context.Context, identityEntityBatchDeleteRequest IdentityEntityBatchDeleteRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/batch-delete"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityBatchDeleteRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntityIdId Update, read or delete an entity using entity ID
// id: ID of the entity. If set, updates the corresponding existing entity.
func (a *Identity) PostIdentityEntityIdId(ctx context.Context, id string, identityEntityIdRequest IdentityEntityIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityIdRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntityMerge Merge two or more entities together
func (a *Identity) PostIdentityEntityMerge(ctx context.Context, identityEntityMergeRequest IdentityEntityMergeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/merge"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityMergeRequest,
		nil, // request query parameters
	)
}

// PostIdentityEntityNameName Update, read or delete an entity using entity name
// name: Name of the entity
func (a *Identity) PostIdentityEntityNameName(ctx context.Context, name string, identityEntityNameRequest IdentityEntityNameRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityNameRequest,
		nil, // request query parameters
	)
}

// PostIdentityGroup Create a new group.
func (a *Identity) PostIdentityGroup(ctx context.Context, identityGroupRequest IdentityGroupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupRequest,
		nil, // request query parameters
	)
}

// PostIdentityGroupAlias Creates a new group alias, or updates an existing one.
func (a *Identity) PostIdentityGroupAlias(ctx context.Context, identityGroupAliasRequest IdentityGroupAliasRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupAliasRequest,
		nil, // request query parameters
	)
}

// PostIdentityGroupAliasIdId
// id: ID of the group alias.
func (a *Identity) PostIdentityGroupAliasIdId(ctx context.Context, id string, identityGroupAliasIdRequest IdentityGroupAliasIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupAliasIdRequest,
		nil, // request query parameters
	)
}

// PostIdentityGroupIdId Update or delete an existing group using its ID.
// id: ID of the group. If set, updates the corresponding existing group.
func (a *Identity) PostIdentityGroupIdId(ctx context.Context, id string, identityGroupIdRequest IdentityGroupIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupIdRequest,
		nil, // request query parameters
	)
}

// PostIdentityGroupNameName
// name: Name of the group.
func (a *Identity) PostIdentityGroupNameName(ctx context.Context, name string, identityGroupNameRequest IdentityGroupNameRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupNameRequest,
		nil, // request query parameters
	)
}

// PostIdentityLookupEntity Query entities based on various properties.
func (a *Identity) PostIdentityLookupEntity(ctx context.Context, identityLookupEntityRequest IdentityLookupEntityRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/lookup/entity"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityLookupEntityRequest,
		nil, // request query parameters
	)
}

// PostIdentityLookupGroup Query groups based on various properties.
func (a *Identity) PostIdentityLookupGroup(ctx context.Context, identityLookupGroupRequest IdentityLookupGroupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/lookup/group"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityLookupGroupRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaLoginEnforcementName Create or update a login enforcement
// name: Name for this login enforcement configuration
func (a *Identity) PostIdentityMfaLoginEnforcementName(ctx context.Context, name string, identityMfaLoginEnforcementRequest IdentityMfaLoginEnforcementRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaLoginEnforcementRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodDuoMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) PostIdentityMfaMethodDuoMethodId(ctx context.Context, methodId string, identityMfaMethodDuoRequest IdentityMfaMethodDuoRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodDuoRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodOktaMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) PostIdentityMfaMethodOktaMethodId(ctx context.Context, methodId string, identityMfaMethodOktaRequest IdentityMfaMethodOktaRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodOktaRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodPingidMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) PostIdentityMfaMethodPingidMethodId(ctx context.Context, methodId string, identityMfaMethodPingidRequest IdentityMfaMethodPingidRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodPingidRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodTotpAdminDestroy Destroys a TOTP secret for the given MFA method ID on the given entity
func (a *Identity) PostIdentityMfaMethodTotpAdminDestroy(ctx context.Context, identityMfaMethodTotpAdminDestroyRequest IdentityMfaMethodTotpAdminDestroyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/admin-destroy"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpAdminDestroyRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodTotpAdminGenerate Update or create TOTP secret for the given method ID on the given entity.
func (a *Identity) PostIdentityMfaMethodTotpAdminGenerate(ctx context.Context, identityMfaMethodTotpAdminGenerateRequest IdentityMfaMethodTotpAdminGenerateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/admin-generate"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpAdminGenerateRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodTotpGenerate Update or create TOTP secret for the given method ID on the given entity.
func (a *Identity) PostIdentityMfaMethodTotpGenerate(ctx context.Context, identityMfaMethodTotpGenerateRequest IdentityMfaMethodTotpGenerateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/generate"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpGenerateRequest,
		nil, // request query parameters
	)
}

// PostIdentityMfaMethodTotpMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) PostIdentityMfaMethodTotpMethodId(ctx context.Context, methodId string, identityMfaMethodTotpRequest IdentityMfaMethodTotpRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcAssignmentName
// name: Name of the assignment
func (a *Identity) PostIdentityOidcAssignmentName(ctx context.Context, name string, identityOidcAssignmentRequest IdentityOidcAssignmentRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcAssignmentRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcClientName
// name: Name of the client.
func (a *Identity) PostIdentityOidcClientName(ctx context.Context, name string, identityOidcClientRequest IdentityOidcClientRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcClientRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcConfig OIDC configuration
func (a *Identity) PostIdentityOidcConfig(ctx context.Context, identityOidcConfigRequest IdentityOidcConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcConfigRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcIntrospect Verify the authenticity of an OIDC token
func (a *Identity) PostIdentityOidcIntrospect(ctx context.Context, identityOidcIntrospectRequest IdentityOidcIntrospectRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/introspect"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcIntrospectRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcKeyName CRUD operations for OIDC keys.
// name: Name of the key
func (a *Identity) PostIdentityOidcKeyName(ctx context.Context, name string, identityOidcKeyRequest IdentityOidcKeyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcKeyRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcKeyNameRotate Rotate a named OIDC key.
// name: Name of the key
func (a *Identity) PostIdentityOidcKeyNameRotate(ctx context.Context, name string, identityOidcKeyRotateRequest IdentityOidcKeyRotateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}/rotate"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcKeyRotateRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcProviderName
// name: Name of the provider
func (a *Identity) PostIdentityOidcProviderName(ctx context.Context, name string, identityOidcProviderRequest IdentityOidcProviderRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcProviderRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcProviderNameAuthorize
// name: Name of the provider
func (a *Identity) PostIdentityOidcProviderNameAuthorize(ctx context.Context, name string, identityOidcProviderAuthorizeRequest IdentityOidcProviderAuthorizeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/authorize"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcProviderAuthorizeRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcProviderNameToken
// name: Name of the provider
func (a *Identity) PostIdentityOidcProviderNameToken(ctx context.Context, name string, identityOidcProviderTokenRequest IdentityOidcProviderTokenRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/token"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcProviderTokenRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcProviderNameUserinfo
// name: Name of the provider
func (a *Identity) PostIdentityOidcProviderNameUserinfo(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/userinfo"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostIdentityOidcRoleName CRUD operations on OIDC Roles
// name: Name of the role
func (a *Identity) PostIdentityOidcRoleName(ctx context.Context, name string, identityOidcRoleRequest IdentityOidcRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcRoleRequest,
		nil, // request query parameters
	)
}

// PostIdentityOidcScopeName
// name: Name of the scope
func (a *Identity) PostIdentityOidcScopeName(ctx context.Context, name string, identityOidcScopeRequest IdentityOidcScopeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcScopeRequest,
		nil, // request query parameters
	)
}

// PostIdentityPersona Create a new alias.
func (a *Identity) PostIdentityPersona(ctx context.Context, identityPersonaRequest IdentityPersonaRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityPersonaRequest,
		nil, // request query parameters
	)
}

// PostIdentityPersonaIdId Update, read or delete an alias ID.
// id: ID of the persona
func (a *Identity) PostIdentityPersonaIdId(ctx context.Context, id string, identityPersonaIdRequest IdentityPersonaIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityPersonaIdRequest,
		nil, // request query parameters
	)
}
