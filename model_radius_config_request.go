/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// RadiusConfigRequest struct for RadiusConfigRequest
type RadiusConfigRequest struct {
	// Number of seconds before connect times out (default: 10)
	DialTimeout *int32 `json:"dial_timeout,omitempty"`
	// RADIUS server host
	Host *string `json:"host,omitempty"`
	// RADIUS NAS Identifier field (optional)
	NasIdentifier *string `json:"nas_identifier,omitempty"`
	// RADIUS NAS port field (default: 10)
	NasPort *int32 `json:"nas_port,omitempty"`
	// RADIUS server port (default: 1812)
	Port *int32 `json:"port,omitempty"`
	// Number of seconds before response times out (default: 10)
	ReadTimeout *int32 `json:"read_timeout,omitempty"`
	// Secret shared with the RADIUS server
	Secret *string `json:"secret,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
	TokenExplicitMaxTtl *int32 `json:"token_explicit_max_ttl,omitempty"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int32 `json:"token_max_ttl,omitempty"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"token_no_default_policy,omitempty"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").
	TokenPeriod *int32 `json:"token_period,omitempty"`
	// Comma-separated list of policies. This will apply to all tokens generated by this auth method, in addition to any configured for specific users.
	TokenPolicies []string `json:"token_policies,omitempty"`
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
	// The type of token to generate, service or batch
	TokenType *string `json:"token_type,omitempty"`
	// Comma-separated list of policies to grant upon successful RADIUS authentication of an unregisted user (default: empty)
	UnregisteredUserPolicies *string `json:"unregistered_user_policies,omitempty"`
}

// NewRadiusConfigRequest instantiates a new RadiusConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadiusConfigRequest() *RadiusConfigRequest {
	this := RadiusConfigRequest{}
	var dialTimeout int32 = 10
	this.DialTimeout = &dialTimeout
	var nasIdentifier string = ""
	this.NasIdentifier = &nasIdentifier
	var nasPort int32 = 10
	this.NasPort = &nasPort
	var port int32 = 1812
	this.Port = &port
	var readTimeout int32 = 10
	this.ReadTimeout = &readTimeout
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	var unregisteredUserPolicies string = ""
	this.UnregisteredUserPolicies = &unregisteredUserPolicies
	return &this
}

// NewRadiusConfigRequestWithDefaults instantiates a new RadiusConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadiusConfigRequestWithDefaults() *RadiusConfigRequest {
	this := RadiusConfigRequest{}
	var dialTimeout int32 = 10
	this.DialTimeout = &dialTimeout
	var nasIdentifier string = ""
	this.NasIdentifier = &nasIdentifier
	var nasPort int32 = 10
	this.NasPort = &nasPort
	var port int32 = 1812
	this.Port = &port
	var readTimeout int32 = 10
	this.ReadTimeout = &readTimeout
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	var unregisteredUserPolicies string = ""
	this.UnregisteredUserPolicies = &unregisteredUserPolicies
	return &this
}

// GetDialTimeout returns the DialTimeout field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetDialTimeout() int32 {
	if o == nil || o.DialTimeout == nil {
		var ret int32
		return ret
	}
	return *o.DialTimeout
}

// GetDialTimeoutOk returns a tuple with the DialTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetDialTimeoutOk() (*int32, bool) {
	if o == nil || o.DialTimeout == nil {
		return nil, false
	}
	return o.DialTimeout, true
}

// HasDialTimeout returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasDialTimeout() bool {
	if o != nil && o.DialTimeout != nil {
		return true
	}

	return false
}

// SetDialTimeout gets a reference to the given int32 and assigns it to the DialTimeout field.
func (o *RadiusConfigRequest) SetDialTimeout(v int32) {
	o.DialTimeout = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *RadiusConfigRequest) SetHost(v string) {
	o.Host = &v
}

// GetNasIdentifier returns the NasIdentifier field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetNasIdentifier() string {
	if o == nil || o.NasIdentifier == nil {
		var ret string
		return ret
	}
	return *o.NasIdentifier
}

// GetNasIdentifierOk returns a tuple with the NasIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetNasIdentifierOk() (*string, bool) {
	if o == nil || o.NasIdentifier == nil {
		return nil, false
	}
	return o.NasIdentifier, true
}

// HasNasIdentifier returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasNasIdentifier() bool {
	if o != nil && o.NasIdentifier != nil {
		return true
	}

	return false
}

// SetNasIdentifier gets a reference to the given string and assigns it to the NasIdentifier field.
func (o *RadiusConfigRequest) SetNasIdentifier(v string) {
	o.NasIdentifier = &v
}

// GetNasPort returns the NasPort field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetNasPort() int32 {
	if o == nil || o.NasPort == nil {
		var ret int32
		return ret
	}
	return *o.NasPort
}

// GetNasPortOk returns a tuple with the NasPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetNasPortOk() (*int32, bool) {
	if o == nil || o.NasPort == nil {
		return nil, false
	}
	return o.NasPort, true
}

// HasNasPort returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasNasPort() bool {
	if o != nil && o.NasPort != nil {
		return true
	}

	return false
}

// SetNasPort gets a reference to the given int32 and assigns it to the NasPort field.
func (o *RadiusConfigRequest) SetNasPort(v int32) {
	o.NasPort = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *RadiusConfigRequest) SetPort(v int32) {
	o.Port = &v
}

// GetReadTimeout returns the ReadTimeout field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetReadTimeout() int32 {
	if o == nil || o.ReadTimeout == nil {
		var ret int32
		return ret
	}
	return *o.ReadTimeout
}

// GetReadTimeoutOk returns a tuple with the ReadTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetReadTimeoutOk() (*int32, bool) {
	if o == nil || o.ReadTimeout == nil {
		return nil, false
	}
	return o.ReadTimeout, true
}

// HasReadTimeout returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasReadTimeout() bool {
	if o != nil && o.ReadTimeout != nil {
		return true
	}

	return false
}

// SetReadTimeout gets a reference to the given int32 and assigns it to the ReadTimeout field.
func (o *RadiusConfigRequest) SetReadTimeout(v int32) {
	o.ReadTimeout = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *RadiusConfigRequest) SetSecret(v string) {
	o.Secret = &v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *RadiusConfigRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

// GetTokenExplicitMaxTtl returns the TokenExplicitMaxTtl field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenExplicitMaxTtl() int32 {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenExplicitMaxTtl
}

// GetTokenExplicitMaxTtlOk returns a tuple with the TokenExplicitMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenExplicitMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		return nil, false
	}
	return o.TokenExplicitMaxTtl, true
}

// HasTokenExplicitMaxTtl returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenExplicitMaxTtl() bool {
	if o != nil && o.TokenExplicitMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenExplicitMaxTtl gets a reference to the given int32 and assigns it to the TokenExplicitMaxTtl field.
func (o *RadiusConfigRequest) SetTokenExplicitMaxTtl(v int32) {
	o.TokenExplicitMaxTtl = &v
}

// GetTokenMaxTtl returns the TokenMaxTtl field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenMaxTtl() int32 {
	if o == nil || o.TokenMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenMaxTtl
}

// GetTokenMaxTtlOk returns a tuple with the TokenMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenMaxTtl == nil {
		return nil, false
	}
	return o.TokenMaxTtl, true
}

// HasTokenMaxTtl returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenMaxTtl() bool {
	if o != nil && o.TokenMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenMaxTtl gets a reference to the given int32 and assigns it to the TokenMaxTtl field.
func (o *RadiusConfigRequest) SetTokenMaxTtl(v int32) {
	o.TokenMaxTtl = &v
}

// GetTokenNoDefaultPolicy returns the TokenNoDefaultPolicy field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenNoDefaultPolicy() bool {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		var ret bool
		return ret
	}
	return *o.TokenNoDefaultPolicy
}

// GetTokenNoDefaultPolicyOk returns a tuple with the TokenNoDefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenNoDefaultPolicyOk() (*bool, bool) {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		return nil, false
	}
	return o.TokenNoDefaultPolicy, true
}

// HasTokenNoDefaultPolicy returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenNoDefaultPolicy() bool {
	if o != nil && o.TokenNoDefaultPolicy != nil {
		return true
	}

	return false
}

// SetTokenNoDefaultPolicy gets a reference to the given bool and assigns it to the TokenNoDefaultPolicy field.
func (o *RadiusConfigRequest) SetTokenNoDefaultPolicy(v bool) {
	o.TokenNoDefaultPolicy = &v
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *RadiusConfigRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

// GetTokenPeriod returns the TokenPeriod field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenPeriod() int32 {
	if o == nil || o.TokenPeriod == nil {
		var ret int32
		return ret
	}
	return *o.TokenPeriod
}

// GetTokenPeriodOk returns a tuple with the TokenPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenPeriodOk() (*int32, bool) {
	if o == nil || o.TokenPeriod == nil {
		return nil, false
	}
	return o.TokenPeriod, true
}

// HasTokenPeriod returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenPeriod() bool {
	if o != nil && o.TokenPeriod != nil {
		return true
	}

	return false
}

// SetTokenPeriod gets a reference to the given int32 and assigns it to the TokenPeriod field.
func (o *RadiusConfigRequest) SetTokenPeriod(v int32) {
	o.TokenPeriod = &v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *RadiusConfigRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *RadiusConfigRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *RadiusConfigRequest) SetTokenType(v string) {
	o.TokenType = &v
}

// GetUnregisteredUserPolicies returns the UnregisteredUserPolicies field value if set, zero value otherwise.
func (o *RadiusConfigRequest) GetUnregisteredUserPolicies() string {
	if o == nil || o.UnregisteredUserPolicies == nil {
		var ret string
		return ret
	}
	return *o.UnregisteredUserPolicies
}

// GetUnregisteredUserPoliciesOk returns a tuple with the UnregisteredUserPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusConfigRequest) GetUnregisteredUserPoliciesOk() (*string, bool) {
	if o == nil || o.UnregisteredUserPolicies == nil {
		return nil, false
	}
	return o.UnregisteredUserPolicies, true
}

// HasUnregisteredUserPolicies returns a boolean if a field has been set.
func (o *RadiusConfigRequest) HasUnregisteredUserPolicies() bool {
	if o != nil && o.UnregisteredUserPolicies != nil {
		return true
	}

	return false
}

// SetUnregisteredUserPolicies gets a reference to the given string and assigns it to the UnregisteredUserPolicies field.
func (o *RadiusConfigRequest) SetUnregisteredUserPolicies(v string) {
	o.UnregisteredUserPolicies = &v
}

func (o RadiusConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DialTimeout != nil {
		toSerialize["dial_timeout"] = o.DialTimeout
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.NasIdentifier != nil {
		toSerialize["nas_identifier"] = o.NasIdentifier
	}
	if o.NasPort != nil {
		toSerialize["nas_port"] = o.NasPort
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.ReadTimeout != nil {
		toSerialize["read_timeout"] = o.ReadTimeout
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	if o.TokenExplicitMaxTtl != nil {
		toSerialize["token_explicit_max_ttl"] = o.TokenExplicitMaxTtl
	}
	if o.TokenMaxTtl != nil {
		toSerialize["token_max_ttl"] = o.TokenMaxTtl
	}
	if o.TokenNoDefaultPolicy != nil {
		toSerialize["token_no_default_policy"] = o.TokenNoDefaultPolicy
	}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	if o.TokenPeriod != nil {
		toSerialize["token_period"] = o.TokenPeriod
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	if o.TokenType != nil {
		toSerialize["token_type"] = o.TokenType
	}
	if o.UnregisteredUserPolicies != nil {
		toSerialize["unregistered_user_policies"] = o.UnregisteredUserPolicies
	}
	return json.Marshal(toSerialize)
}

type NullableRadiusConfigRequest struct {
	value *RadiusConfigRequest
	isSet bool
}

func (v NullableRadiusConfigRequest) Get() *RadiusConfigRequest {
	return v.value
}

func (v *NullableRadiusConfigRequest) Set(val *RadiusConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRadiusConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRadiusConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadiusConfigRequest(val *RadiusConfigRequest) *NullableRadiusConfigRequest {
	return &NullableRadiusConfigRequest{value: val, isSet: true}
}

func (v NullableRadiusConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadiusConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


