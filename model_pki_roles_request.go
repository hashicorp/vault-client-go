/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// PkiRolesRequest struct for PkiRolesRequest
type PkiRolesRequest struct {
	// If set, clients can request certificates for any domain, regardless of allowed_domains restrictions. See the documentation for more information.
	AllowAnyName *bool `json:"allow_any_name,omitempty"`
	// If set, clients can request certificates for the base domains themselves, e.g. \"example.com\" of domains listed in allowed_domains. This is a separate option as in some cases this can be considered a security threat. See the documentation for more information.
	AllowBareDomains *bool `json:"allow_bare_domains,omitempty"`
	// If set, domains specified in allowed_domains can include shell-style glob patterns, e.g. \"ftp*.example.com\". See the documentation for more information.
	AllowGlobDomains *bool `json:"allow_glob_domains,omitempty"`
	// If set, IP Subject Alternative Names are allowed. Any valid IP is accepted and No authorization checking is performed.
	AllowIpSans *bool `json:"allow_ip_sans,omitempty"`
	// Whether to allow \"localhost\" and \"localdomain\" as a valid common name in a request, independent of allowed_domains value.
	AllowLocalhost *bool `json:"allow_localhost,omitempty"`
	// If set, clients can request certificates for subdomains of domains listed in allowed_domains, including wildcard subdomains. See the documentation for more information.
	AllowSubdomains *bool `json:"allow_subdomains,omitempty"`
	// If set, allows certificates with wildcards in the common name to be issued, conforming to RFC 6125's Section 6.4.3; e.g., \"*.example.net\" or \"b*z.example.net\". See the documentation for more information.
	AllowWildcardCertificates *bool `json:"allow_wildcard_certificates,omitempty"`
	// Specifies the domains this role is allowed to issue certificates for. This is used with the allow_bare_domains, allow_subdomains, and allow_glob_domains to determine matches for the common name, DNS-typed SAN entries, and Email-typed SAN entries of certificates. See the documentation for more information. This parameter accepts a comma-separated string or list of domains.
	AllowedDomains []string `json:"allowed_domains,omitempty"`
	// If set, Allowed domains can be specified using identity template policies. Non-templated domains are also permitted.
	AllowedDomainsTemplate *bool `json:"allowed_domains_template,omitempty"`
	// If set, an array of allowed other names to put in SANs. These values support globbing and must be in the format <oid>;<type>:<value>. Currently only \"utf8\" is a valid type. All values, including globbing values, must use this syntax, with the exception being a single \"*\" which allows any OID and any value (but type must still be utf8).
	AllowedOtherSans []string `json:"allowed_other_sans,omitempty"`
	// If set, an array of allowed serial numbers to put in Subject. These values support globbing.
	AllowedSerialNumbers []string `json:"allowed_serial_numbers,omitempty"`
	// If set, an array of allowed URIs for URI Subject Alternative Names. Any valid URI is accepted, these values support globbing.
	AllowedUriSans []string `json:"allowed_uri_sans,omitempty"`
	// If set, Allowed URI SANs can be specified using identity template policies. Non-templated URI SANs are also permitted.
	AllowedUriSansTemplate *bool `json:"allowed_uri_sans_template,omitempty"`
	// Backend Type
	Backend *string `json:"backend,omitempty"`
	// Mark Basic Constraints valid when issuing non-CA certificates.
	BasicConstraintsValidForNonCa *bool `json:"basic_constraints_valid_for_non_ca,omitempty"`
	// If set, certificates are flagged for client auth use. Defaults to true. See also RFC 5280 Section 4.2.1.12.
	ClientFlag *bool `json:"client_flag,omitempty"`
	// If set, certificates are flagged for code signing use. Defaults to false. See also RFC 5280 Section 4.2.1.12.
	CodeSigningFlag *bool `json:"code_signing_flag,omitempty"`
	// If set, Country will be set to this value in certificates issued by this role.
	Country []string `json:"country,omitempty"`
	// If set, certificates are flagged for email protection use. Defaults to false. See also RFC 5280 Section 4.2.1.12.
	EmailProtectionFlag *bool `json:"email_protection_flag,omitempty"`
	// If set, only valid host names are allowed for CN and DNS SANs, and the host part of email addresses. Defaults to true.
	EnforceHostnames *bool `json:"enforce_hostnames,omitempty"`
	// A comma-separated string or list of extended key usages. Valid values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage -- simply drop the \"ExtKeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list. See also RFC 5280 Section 4.2.1.12.
	ExtKeyUsage []string `json:"ext_key_usage,omitempty"`
	// A comma-separated string or list of extended key usage oids.
	ExtKeyUsageOids []string `json:"ext_key_usage_oids,omitempty"`
	// If set, certificates issued/signed against this role will have Vault leases attached to them. Defaults to \"false\". Certificates can be added to the CRL by \"vault revoke <lease_id>\" when certificates are associated with leases. It can also be done using the \"pki/revoke\" endpoint. However, when lease generation is disabled, invoking \"pki/revoke\" would be the only way to add the certificates to the CRL. When large number of certificates are generated with long lifetimes, it is recommended that lease generation be disabled, as large amount of leases adversely affect the startup time of Vault.
	GenerateLease *bool `json:"generate_lease,omitempty"`
	// Reference to the issuer used to sign requests serviced by this role.
	IssuerRef *string `json:"issuer_ref,omitempty"`
	// The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.
	KeyBits *int32 `json:"key_bits,omitempty"`
	// The type of key to use; defaults to RSA. \"rsa\" \"ec\", \"ed25519\" and \"any\" are the only valid values.
	KeyType *string `json:"key_type,omitempty"`
	// A comma-separated string or list of key usages (not extended key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- simply drop the \"KeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list. See also RFC 5280 Section 4.2.1.3.
	KeyUsage []string `json:"key_usage,omitempty"`
	// If set, Locality will be set to this value in certificates issued by this role.
	Locality []string `json:"locality,omitempty"`
	// The maximum allowed lease duration. If not set, defaults to the system maximum lease TTL.
	MaxTtl *int32 `json:"max_ttl,omitempty"`
	// If set, certificates issued/signed against this role will not be stored in the storage backend. This can improve performance when issuing large numbers of certificates. However, certificates issued in this way cannot be enumerated or revoked, so this option is recommended only for certificates that are non-sensitive, or extremely short-lived. This option implies a value of \"false\" for \"generate_lease\".
	NoStore *bool `json:"no_store,omitempty"`
	// Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ.
	NotAfter *string `json:"not_after,omitempty"`
	// The duration before now which the certificate needs to be backdated by.
	NotBeforeDuration *int32 `json:"not_before_duration,omitempty"`
	// If set, O (Organization) will be set to this value in certificates issued by this role.
	Organization []string `json:"organization,omitempty"`
	// If set, OU (OrganizationalUnit) will be set to this value in certificates issued by this role.
	Ou []string `json:"ou,omitempty"`
	// A comma-separated string or list of policy OIDs, or a JSON list of qualified policy information, which must include an oid, and may include a notice and/or cps url, using the form [{\"oid\"=\"1.3.6.1.4.1.7.8\",\"notice\"=\"I am a user Notice\"}, {\"oid\"=\"1.3.6.1.4.1.44947.1.2.4 \",\"cps\"=\"https://example.com\"}].
	PolicyIdentifiers []string `json:"policy_identifiers,omitempty"`
	// If set, Postal Code will be set to this value in certificates issued by this role.
	PostalCode []string `json:"postal_code,omitempty"`
	// If set, Province will be set to this value in certificates issued by this role.
	Province []string `json:"province,omitempty"`
	// If set to false, makes the 'common_name' field optional while generating a certificate.
	RequireCn *bool `json:"require_cn,omitempty"`
	// If set, certificates are flagged for server auth use. Defaults to true. See also RFC 5280 Section 4.2.1.12.
	ServerFlag *bool `json:"server_flag,omitempty"`
	// The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).
	SignatureBits *int32 `json:"signature_bits,omitempty"`
	// If set, Street Address will be set to this value in certificates issued by this role.
	StreetAddress []string `json:"street_address,omitempty"`
	// The lease duration (validity period of the certificate) if no specific lease duration is requested. The lease duration controls the expiration of certificates issued by this backend. Defaults to the system default value or the value of max_ttl, whichever is shorter.
	Ttl *int32 `json:"ttl,omitempty"`
	// If set, when used with a signing profile, the common name in the CSR will be used. This does *not* include any requested Subject Alternative Names; use use_csr_sans for that. Defaults to true.
	UseCsrCommonName *bool `json:"use_csr_common_name,omitempty"`
	// If set, when used with a signing profile, the SANs in the CSR will be used. This does *not* include the Common Name (cn); use use_csr_common_name for that. Defaults to true.
	UseCsrSans *bool `json:"use_csr_sans,omitempty"`
}

// NewPkiRolesRequest instantiates a new PkiRolesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkiRolesRequest() *PkiRolesRequest {
	this := PkiRolesRequest{}
	var allowIpSans bool = true
	this.AllowIpSans = &allowIpSans
	var allowLocalhost bool = true
	this.AllowLocalhost = &allowLocalhost
	var allowWildcardCertificates bool = true
	this.AllowWildcardCertificates = &allowWildcardCertificates
	var allowedDomainsTemplate bool = false
	this.AllowedDomainsTemplate = &allowedDomainsTemplate
	var allowedUriSansTemplate bool = false
	this.AllowedUriSansTemplate = &allowedUriSansTemplate
	var clientFlag bool = true
	this.ClientFlag = &clientFlag
	var enforceHostnames bool = true
	this.EnforceHostnames = &enforceHostnames
	var issuerRef string = "default"
	this.IssuerRef = &issuerRef
	var keyBits int32 = 0
	this.KeyBits = &keyBits
	var keyType string = "rsa"
	this.KeyType = &keyType
	var notBeforeDuration int32 = 30
	this.NotBeforeDuration = &notBeforeDuration
	var requireCn bool = true
	this.RequireCn = &requireCn
	var serverFlag bool = true
	this.ServerFlag = &serverFlag
	var signatureBits int32 = 0
	this.SignatureBits = &signatureBits
	var useCsrCommonName bool = true
	this.UseCsrCommonName = &useCsrCommonName
	var useCsrSans bool = true
	this.UseCsrSans = &useCsrSans
	return &this
}

// NewPkiRolesRequestWithDefaults instantiates a new PkiRolesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkiRolesRequestWithDefaults() *PkiRolesRequest {
	this := PkiRolesRequest{}
	var allowIpSans bool = true
	this.AllowIpSans = &allowIpSans
	var allowLocalhost bool = true
	this.AllowLocalhost = &allowLocalhost
	var allowWildcardCertificates bool = true
	this.AllowWildcardCertificates = &allowWildcardCertificates
	var allowedDomainsTemplate bool = false
	this.AllowedDomainsTemplate = &allowedDomainsTemplate
	var allowedUriSansTemplate bool = false
	this.AllowedUriSansTemplate = &allowedUriSansTemplate
	var clientFlag bool = true
	this.ClientFlag = &clientFlag
	var enforceHostnames bool = true
	this.EnforceHostnames = &enforceHostnames
	var issuerRef string = "default"
	this.IssuerRef = &issuerRef
	var keyBits int32 = 0
	this.KeyBits = &keyBits
	var keyType string = "rsa"
	this.KeyType = &keyType
	var notBeforeDuration int32 = 30
	this.NotBeforeDuration = &notBeforeDuration
	var requireCn bool = true
	this.RequireCn = &requireCn
	var serverFlag bool = true
	this.ServerFlag = &serverFlag
	var signatureBits int32 = 0
	this.SignatureBits = &signatureBits
	var useCsrCommonName bool = true
	this.UseCsrCommonName = &useCsrCommonName
	var useCsrSans bool = true
	this.UseCsrSans = &useCsrSans
	return &this
}

// GetAllowAnyName returns the AllowAnyName field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowAnyName() bool {
	if o == nil || o.AllowAnyName == nil {
		var ret bool
		return ret
	}
	return *o.AllowAnyName
}

// GetAllowAnyNameOk returns a tuple with the AllowAnyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowAnyNameOk() (*bool, bool) {
	if o == nil || o.AllowAnyName == nil {
		return nil, false
	}
	return o.AllowAnyName, true
}

// HasAllowAnyName returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowAnyName() bool {
	if o != nil && o.AllowAnyName != nil {
		return true
	}

	return false
}

// SetAllowAnyName gets a reference to the given bool and assigns it to the AllowAnyName field.
func (o *PkiRolesRequest) SetAllowAnyName(v bool) {
	o.AllowAnyName = &v
}

// GetAllowBareDomains returns the AllowBareDomains field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowBareDomains() bool {
	if o == nil || o.AllowBareDomains == nil {
		var ret bool
		return ret
	}
	return *o.AllowBareDomains
}

// GetAllowBareDomainsOk returns a tuple with the AllowBareDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowBareDomainsOk() (*bool, bool) {
	if o == nil || o.AllowBareDomains == nil {
		return nil, false
	}
	return o.AllowBareDomains, true
}

// HasAllowBareDomains returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowBareDomains() bool {
	if o != nil && o.AllowBareDomains != nil {
		return true
	}

	return false
}

// SetAllowBareDomains gets a reference to the given bool and assigns it to the AllowBareDomains field.
func (o *PkiRolesRequest) SetAllowBareDomains(v bool) {
	o.AllowBareDomains = &v
}

// GetAllowGlobDomains returns the AllowGlobDomains field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowGlobDomains() bool {
	if o == nil || o.AllowGlobDomains == nil {
		var ret bool
		return ret
	}
	return *o.AllowGlobDomains
}

// GetAllowGlobDomainsOk returns a tuple with the AllowGlobDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowGlobDomainsOk() (*bool, bool) {
	if o == nil || o.AllowGlobDomains == nil {
		return nil, false
	}
	return o.AllowGlobDomains, true
}

// HasAllowGlobDomains returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowGlobDomains() bool {
	if o != nil && o.AllowGlobDomains != nil {
		return true
	}

	return false
}

// SetAllowGlobDomains gets a reference to the given bool and assigns it to the AllowGlobDomains field.
func (o *PkiRolesRequest) SetAllowGlobDomains(v bool) {
	o.AllowGlobDomains = &v
}

// GetAllowIpSans returns the AllowIpSans field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowIpSans() bool {
	if o == nil || o.AllowIpSans == nil {
		var ret bool
		return ret
	}
	return *o.AllowIpSans
}

// GetAllowIpSansOk returns a tuple with the AllowIpSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowIpSansOk() (*bool, bool) {
	if o == nil || o.AllowIpSans == nil {
		return nil, false
	}
	return o.AllowIpSans, true
}

// HasAllowIpSans returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowIpSans() bool {
	if o != nil && o.AllowIpSans != nil {
		return true
	}

	return false
}

// SetAllowIpSans gets a reference to the given bool and assigns it to the AllowIpSans field.
func (o *PkiRolesRequest) SetAllowIpSans(v bool) {
	o.AllowIpSans = &v
}

// GetAllowLocalhost returns the AllowLocalhost field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowLocalhost() bool {
	if o == nil || o.AllowLocalhost == nil {
		var ret bool
		return ret
	}
	return *o.AllowLocalhost
}

// GetAllowLocalhostOk returns a tuple with the AllowLocalhost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowLocalhostOk() (*bool, bool) {
	if o == nil || o.AllowLocalhost == nil {
		return nil, false
	}
	return o.AllowLocalhost, true
}

// HasAllowLocalhost returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowLocalhost() bool {
	if o != nil && o.AllowLocalhost != nil {
		return true
	}

	return false
}

// SetAllowLocalhost gets a reference to the given bool and assigns it to the AllowLocalhost field.
func (o *PkiRolesRequest) SetAllowLocalhost(v bool) {
	o.AllowLocalhost = &v
}

// GetAllowSubdomains returns the AllowSubdomains field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowSubdomains() bool {
	if o == nil || o.AllowSubdomains == nil {
		var ret bool
		return ret
	}
	return *o.AllowSubdomains
}

// GetAllowSubdomainsOk returns a tuple with the AllowSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowSubdomainsOk() (*bool, bool) {
	if o == nil || o.AllowSubdomains == nil {
		return nil, false
	}
	return o.AllowSubdomains, true
}

// HasAllowSubdomains returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowSubdomains() bool {
	if o != nil && o.AllowSubdomains != nil {
		return true
	}

	return false
}

// SetAllowSubdomains gets a reference to the given bool and assigns it to the AllowSubdomains field.
func (o *PkiRolesRequest) SetAllowSubdomains(v bool) {
	o.AllowSubdomains = &v
}

// GetAllowWildcardCertificates returns the AllowWildcardCertificates field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowWildcardCertificates() bool {
	if o == nil || o.AllowWildcardCertificates == nil {
		var ret bool
		return ret
	}
	return *o.AllowWildcardCertificates
}

// GetAllowWildcardCertificatesOk returns a tuple with the AllowWildcardCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowWildcardCertificatesOk() (*bool, bool) {
	if o == nil || o.AllowWildcardCertificates == nil {
		return nil, false
	}
	return o.AllowWildcardCertificates, true
}

// HasAllowWildcardCertificates returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowWildcardCertificates() bool {
	if o != nil && o.AllowWildcardCertificates != nil {
		return true
	}

	return false
}

// SetAllowWildcardCertificates gets a reference to the given bool and assigns it to the AllowWildcardCertificates field.
func (o *PkiRolesRequest) SetAllowWildcardCertificates(v bool) {
	o.AllowWildcardCertificates = &v
}

// GetAllowedDomains returns the AllowedDomains field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowedDomains() []string {
	if o == nil || o.AllowedDomains == nil {
		var ret []string
		return ret
	}
	return o.AllowedDomains
}

// GetAllowedDomainsOk returns a tuple with the AllowedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowedDomainsOk() ([]string, bool) {
	if o == nil || o.AllowedDomains == nil {
		return nil, false
	}
	return o.AllowedDomains, true
}

// HasAllowedDomains returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowedDomains() bool {
	if o != nil && o.AllowedDomains != nil {
		return true
	}

	return false
}

// SetAllowedDomains gets a reference to the given []string and assigns it to the AllowedDomains field.
func (o *PkiRolesRequest) SetAllowedDomains(v []string) {
	o.AllowedDomains = v
}

// GetAllowedDomainsTemplate returns the AllowedDomainsTemplate field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowedDomainsTemplate() bool {
	if o == nil || o.AllowedDomainsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.AllowedDomainsTemplate
}

// GetAllowedDomainsTemplateOk returns a tuple with the AllowedDomainsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowedDomainsTemplateOk() (*bool, bool) {
	if o == nil || o.AllowedDomainsTemplate == nil {
		return nil, false
	}
	return o.AllowedDomainsTemplate, true
}

// HasAllowedDomainsTemplate returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowedDomainsTemplate() bool {
	if o != nil && o.AllowedDomainsTemplate != nil {
		return true
	}

	return false
}

// SetAllowedDomainsTemplate gets a reference to the given bool and assigns it to the AllowedDomainsTemplate field.
func (o *PkiRolesRequest) SetAllowedDomainsTemplate(v bool) {
	o.AllowedDomainsTemplate = &v
}

// GetAllowedOtherSans returns the AllowedOtherSans field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowedOtherSans() []string {
	if o == nil || o.AllowedOtherSans == nil {
		var ret []string
		return ret
	}
	return o.AllowedOtherSans
}

// GetAllowedOtherSansOk returns a tuple with the AllowedOtherSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowedOtherSansOk() ([]string, bool) {
	if o == nil || o.AllowedOtherSans == nil {
		return nil, false
	}
	return o.AllowedOtherSans, true
}

// HasAllowedOtherSans returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowedOtherSans() bool {
	if o != nil && o.AllowedOtherSans != nil {
		return true
	}

	return false
}

// SetAllowedOtherSans gets a reference to the given []string and assigns it to the AllowedOtherSans field.
func (o *PkiRolesRequest) SetAllowedOtherSans(v []string) {
	o.AllowedOtherSans = v
}

// GetAllowedSerialNumbers returns the AllowedSerialNumbers field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowedSerialNumbers() []string {
	if o == nil || o.AllowedSerialNumbers == nil {
		var ret []string
		return ret
	}
	return o.AllowedSerialNumbers
}

// GetAllowedSerialNumbersOk returns a tuple with the AllowedSerialNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowedSerialNumbersOk() ([]string, bool) {
	if o == nil || o.AllowedSerialNumbers == nil {
		return nil, false
	}
	return o.AllowedSerialNumbers, true
}

// HasAllowedSerialNumbers returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowedSerialNumbers() bool {
	if o != nil && o.AllowedSerialNumbers != nil {
		return true
	}

	return false
}

// SetAllowedSerialNumbers gets a reference to the given []string and assigns it to the AllowedSerialNumbers field.
func (o *PkiRolesRequest) SetAllowedSerialNumbers(v []string) {
	o.AllowedSerialNumbers = v
}

// GetAllowedUriSans returns the AllowedUriSans field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowedUriSans() []string {
	if o == nil || o.AllowedUriSans == nil {
		var ret []string
		return ret
	}
	return o.AllowedUriSans
}

// GetAllowedUriSansOk returns a tuple with the AllowedUriSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowedUriSansOk() ([]string, bool) {
	if o == nil || o.AllowedUriSans == nil {
		return nil, false
	}
	return o.AllowedUriSans, true
}

// HasAllowedUriSans returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowedUriSans() bool {
	if o != nil && o.AllowedUriSans != nil {
		return true
	}

	return false
}

// SetAllowedUriSans gets a reference to the given []string and assigns it to the AllowedUriSans field.
func (o *PkiRolesRequest) SetAllowedUriSans(v []string) {
	o.AllowedUriSans = v
}

// GetAllowedUriSansTemplate returns the AllowedUriSansTemplate field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetAllowedUriSansTemplate() bool {
	if o == nil || o.AllowedUriSansTemplate == nil {
		var ret bool
		return ret
	}
	return *o.AllowedUriSansTemplate
}

// GetAllowedUriSansTemplateOk returns a tuple with the AllowedUriSansTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetAllowedUriSansTemplateOk() (*bool, bool) {
	if o == nil || o.AllowedUriSansTemplate == nil {
		return nil, false
	}
	return o.AllowedUriSansTemplate, true
}

// HasAllowedUriSansTemplate returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasAllowedUriSansTemplate() bool {
	if o != nil && o.AllowedUriSansTemplate != nil {
		return true
	}

	return false
}

// SetAllowedUriSansTemplate gets a reference to the given bool and assigns it to the AllowedUriSansTemplate field.
func (o *PkiRolesRequest) SetAllowedUriSansTemplate(v bool) {
	o.AllowedUriSansTemplate = &v
}

// GetBackend returns the Backend field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetBackend() string {
	if o == nil || o.Backend == nil {
		var ret string
		return ret
	}
	return *o.Backend
}

// GetBackendOk returns a tuple with the Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetBackendOk() (*string, bool) {
	if o == nil || o.Backend == nil {
		return nil, false
	}
	return o.Backend, true
}

// HasBackend returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasBackend() bool {
	if o != nil && o.Backend != nil {
		return true
	}

	return false
}

// SetBackend gets a reference to the given string and assigns it to the Backend field.
func (o *PkiRolesRequest) SetBackend(v string) {
	o.Backend = &v
}

// GetBasicConstraintsValidForNonCa returns the BasicConstraintsValidForNonCa field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetBasicConstraintsValidForNonCa() bool {
	if o == nil || o.BasicConstraintsValidForNonCa == nil {
		var ret bool
		return ret
	}
	return *o.BasicConstraintsValidForNonCa
}

// GetBasicConstraintsValidForNonCaOk returns a tuple with the BasicConstraintsValidForNonCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetBasicConstraintsValidForNonCaOk() (*bool, bool) {
	if o == nil || o.BasicConstraintsValidForNonCa == nil {
		return nil, false
	}
	return o.BasicConstraintsValidForNonCa, true
}

// HasBasicConstraintsValidForNonCa returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasBasicConstraintsValidForNonCa() bool {
	if o != nil && o.BasicConstraintsValidForNonCa != nil {
		return true
	}

	return false
}

// SetBasicConstraintsValidForNonCa gets a reference to the given bool and assigns it to the BasicConstraintsValidForNonCa field.
func (o *PkiRolesRequest) SetBasicConstraintsValidForNonCa(v bool) {
	o.BasicConstraintsValidForNonCa = &v
}

// GetClientFlag returns the ClientFlag field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetClientFlag() bool {
	if o == nil || o.ClientFlag == nil {
		var ret bool
		return ret
	}
	return *o.ClientFlag
}

// GetClientFlagOk returns a tuple with the ClientFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetClientFlagOk() (*bool, bool) {
	if o == nil || o.ClientFlag == nil {
		return nil, false
	}
	return o.ClientFlag, true
}

// HasClientFlag returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasClientFlag() bool {
	if o != nil && o.ClientFlag != nil {
		return true
	}

	return false
}

// SetClientFlag gets a reference to the given bool and assigns it to the ClientFlag field.
func (o *PkiRolesRequest) SetClientFlag(v bool) {
	o.ClientFlag = &v
}

// GetCodeSigningFlag returns the CodeSigningFlag field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetCodeSigningFlag() bool {
	if o == nil || o.CodeSigningFlag == nil {
		var ret bool
		return ret
	}
	return *o.CodeSigningFlag
}

// GetCodeSigningFlagOk returns a tuple with the CodeSigningFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetCodeSigningFlagOk() (*bool, bool) {
	if o == nil || o.CodeSigningFlag == nil {
		return nil, false
	}
	return o.CodeSigningFlag, true
}

// HasCodeSigningFlag returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasCodeSigningFlag() bool {
	if o != nil && o.CodeSigningFlag != nil {
		return true
	}

	return false
}

// SetCodeSigningFlag gets a reference to the given bool and assigns it to the CodeSigningFlag field.
func (o *PkiRolesRequest) SetCodeSigningFlag(v bool) {
	o.CodeSigningFlag = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetCountry() []string {
	if o == nil || o.Country == nil {
		var ret []string
		return ret
	}
	return o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetCountryOk() ([]string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given []string and assigns it to the Country field.
func (o *PkiRolesRequest) SetCountry(v []string) {
	o.Country = v
}

// GetEmailProtectionFlag returns the EmailProtectionFlag field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetEmailProtectionFlag() bool {
	if o == nil || o.EmailProtectionFlag == nil {
		var ret bool
		return ret
	}
	return *o.EmailProtectionFlag
}

// GetEmailProtectionFlagOk returns a tuple with the EmailProtectionFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetEmailProtectionFlagOk() (*bool, bool) {
	if o == nil || o.EmailProtectionFlag == nil {
		return nil, false
	}
	return o.EmailProtectionFlag, true
}

// HasEmailProtectionFlag returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasEmailProtectionFlag() bool {
	if o != nil && o.EmailProtectionFlag != nil {
		return true
	}

	return false
}

// SetEmailProtectionFlag gets a reference to the given bool and assigns it to the EmailProtectionFlag field.
func (o *PkiRolesRequest) SetEmailProtectionFlag(v bool) {
	o.EmailProtectionFlag = &v
}

// GetEnforceHostnames returns the EnforceHostnames field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetEnforceHostnames() bool {
	if o == nil || o.EnforceHostnames == nil {
		var ret bool
		return ret
	}
	return *o.EnforceHostnames
}

// GetEnforceHostnamesOk returns a tuple with the EnforceHostnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetEnforceHostnamesOk() (*bool, bool) {
	if o == nil || o.EnforceHostnames == nil {
		return nil, false
	}
	return o.EnforceHostnames, true
}

// HasEnforceHostnames returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasEnforceHostnames() bool {
	if o != nil && o.EnforceHostnames != nil {
		return true
	}

	return false
}

// SetEnforceHostnames gets a reference to the given bool and assigns it to the EnforceHostnames field.
func (o *PkiRolesRequest) SetEnforceHostnames(v bool) {
	o.EnforceHostnames = &v
}

// GetExtKeyUsage returns the ExtKeyUsage field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetExtKeyUsage() []string {
	if o == nil || o.ExtKeyUsage == nil {
		var ret []string
		return ret
	}
	return o.ExtKeyUsage
}

// GetExtKeyUsageOk returns a tuple with the ExtKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetExtKeyUsageOk() ([]string, bool) {
	if o == nil || o.ExtKeyUsage == nil {
		return nil, false
	}
	return o.ExtKeyUsage, true
}

// HasExtKeyUsage returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasExtKeyUsage() bool {
	if o != nil && o.ExtKeyUsage != nil {
		return true
	}

	return false
}

// SetExtKeyUsage gets a reference to the given []string and assigns it to the ExtKeyUsage field.
func (o *PkiRolesRequest) SetExtKeyUsage(v []string) {
	o.ExtKeyUsage = v
}

// GetExtKeyUsageOids returns the ExtKeyUsageOids field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetExtKeyUsageOids() []string {
	if o == nil || o.ExtKeyUsageOids == nil {
		var ret []string
		return ret
	}
	return o.ExtKeyUsageOids
}

// GetExtKeyUsageOidsOk returns a tuple with the ExtKeyUsageOids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetExtKeyUsageOidsOk() ([]string, bool) {
	if o == nil || o.ExtKeyUsageOids == nil {
		return nil, false
	}
	return o.ExtKeyUsageOids, true
}

// HasExtKeyUsageOids returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasExtKeyUsageOids() bool {
	if o != nil && o.ExtKeyUsageOids != nil {
		return true
	}

	return false
}

// SetExtKeyUsageOids gets a reference to the given []string and assigns it to the ExtKeyUsageOids field.
func (o *PkiRolesRequest) SetExtKeyUsageOids(v []string) {
	o.ExtKeyUsageOids = v
}

// GetGenerateLease returns the GenerateLease field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetGenerateLease() bool {
	if o == nil || o.GenerateLease == nil {
		var ret bool
		return ret
	}
	return *o.GenerateLease
}

// GetGenerateLeaseOk returns a tuple with the GenerateLease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetGenerateLeaseOk() (*bool, bool) {
	if o == nil || o.GenerateLease == nil {
		return nil, false
	}
	return o.GenerateLease, true
}

// HasGenerateLease returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasGenerateLease() bool {
	if o != nil && o.GenerateLease != nil {
		return true
	}

	return false
}

// SetGenerateLease gets a reference to the given bool and assigns it to the GenerateLease field.
func (o *PkiRolesRequest) SetGenerateLease(v bool) {
	o.GenerateLease = &v
}

// GetIssuerRef returns the IssuerRef field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetIssuerRef() string {
	if o == nil || o.IssuerRef == nil {
		var ret string
		return ret
	}
	return *o.IssuerRef
}

// GetIssuerRefOk returns a tuple with the IssuerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetIssuerRefOk() (*string, bool) {
	if o == nil || o.IssuerRef == nil {
		return nil, false
	}
	return o.IssuerRef, true
}

// HasIssuerRef returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasIssuerRef() bool {
	if o != nil && o.IssuerRef != nil {
		return true
	}

	return false
}

// SetIssuerRef gets a reference to the given string and assigns it to the IssuerRef field.
func (o *PkiRolesRequest) SetIssuerRef(v string) {
	o.IssuerRef = &v
}

// GetKeyBits returns the KeyBits field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetKeyBits() int32 {
	if o == nil || o.KeyBits == nil {
		var ret int32
		return ret
	}
	return *o.KeyBits
}

// GetKeyBitsOk returns a tuple with the KeyBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetKeyBitsOk() (*int32, bool) {
	if o == nil || o.KeyBits == nil {
		return nil, false
	}
	return o.KeyBits, true
}

// HasKeyBits returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasKeyBits() bool {
	if o != nil && o.KeyBits != nil {
		return true
	}

	return false
}

// SetKeyBits gets a reference to the given int32 and assigns it to the KeyBits field.
func (o *PkiRolesRequest) SetKeyBits(v int32) {
	o.KeyBits = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetKeyType() string {
	if o == nil || o.KeyType == nil {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetKeyTypeOk() (*string, bool) {
	if o == nil || o.KeyType == nil {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasKeyType() bool {
	if o != nil && o.KeyType != nil {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *PkiRolesRequest) SetKeyType(v string) {
	o.KeyType = &v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetKeyUsage() []string {
	if o == nil || o.KeyUsage == nil {
		var ret []string
		return ret
	}
	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetKeyUsageOk() ([]string, bool) {
	if o == nil || o.KeyUsage == nil {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasKeyUsage() bool {
	if o != nil && o.KeyUsage != nil {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given []string and assigns it to the KeyUsage field.
func (o *PkiRolesRequest) SetKeyUsage(v []string) {
	o.KeyUsage = v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetLocality() []string {
	if o == nil || o.Locality == nil {
		var ret []string
		return ret
	}
	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetLocalityOk() ([]string, bool) {
	if o == nil || o.Locality == nil {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasLocality() bool {
	if o != nil && o.Locality != nil {
		return true
	}

	return false
}

// SetLocality gets a reference to the given []string and assigns it to the Locality field.
func (o *PkiRolesRequest) SetLocality(v []string) {
	o.Locality = v
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetMaxTtl() int32 {
	if o == nil || o.MaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetMaxTtlOk() (*int32, bool) {
	if o == nil || o.MaxTtl == nil {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasMaxTtl() bool {
	if o != nil && o.MaxTtl != nil {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given int32 and assigns it to the MaxTtl field.
func (o *PkiRolesRequest) SetMaxTtl(v int32) {
	o.MaxTtl = &v
}

// GetNoStore returns the NoStore field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetNoStore() bool {
	if o == nil || o.NoStore == nil {
		var ret bool
		return ret
	}
	return *o.NoStore
}

// GetNoStoreOk returns a tuple with the NoStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetNoStoreOk() (*bool, bool) {
	if o == nil || o.NoStore == nil {
		return nil, false
	}
	return o.NoStore, true
}

// HasNoStore returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasNoStore() bool {
	if o != nil && o.NoStore != nil {
		return true
	}

	return false
}

// SetNoStore gets a reference to the given bool and assigns it to the NoStore field.
func (o *PkiRolesRequest) SetNoStore(v bool) {
	o.NoStore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetNotAfter() string {
	if o == nil || o.NotAfter == nil {
		var ret string
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetNotAfterOk() (*string, bool) {
	if o == nil || o.NotAfter == nil {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasNotAfter() bool {
	if o != nil && o.NotAfter != nil {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given string and assigns it to the NotAfter field.
func (o *PkiRolesRequest) SetNotAfter(v string) {
	o.NotAfter = &v
}

// GetNotBeforeDuration returns the NotBeforeDuration field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetNotBeforeDuration() int32 {
	if o == nil || o.NotBeforeDuration == nil {
		var ret int32
		return ret
	}
	return *o.NotBeforeDuration
}

// GetNotBeforeDurationOk returns a tuple with the NotBeforeDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetNotBeforeDurationOk() (*int32, bool) {
	if o == nil || o.NotBeforeDuration == nil {
		return nil, false
	}
	return o.NotBeforeDuration, true
}

// HasNotBeforeDuration returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasNotBeforeDuration() bool {
	if o != nil && o.NotBeforeDuration != nil {
		return true
	}

	return false
}

// SetNotBeforeDuration gets a reference to the given int32 and assigns it to the NotBeforeDuration field.
func (o *PkiRolesRequest) SetNotBeforeDuration(v int32) {
	o.NotBeforeDuration = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetOrganization() []string {
	if o == nil || o.Organization == nil {
		var ret []string
		return ret
	}
	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetOrganizationOk() ([]string, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given []string and assigns it to the Organization field.
func (o *PkiRolesRequest) SetOrganization(v []string) {
	o.Organization = v
}

// GetOu returns the Ou field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetOu() []string {
	if o == nil || o.Ou == nil {
		var ret []string
		return ret
	}
	return o.Ou
}

// GetOuOk returns a tuple with the Ou field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetOuOk() ([]string, bool) {
	if o == nil || o.Ou == nil {
		return nil, false
	}
	return o.Ou, true
}

// HasOu returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasOu() bool {
	if o != nil && o.Ou != nil {
		return true
	}

	return false
}

// SetOu gets a reference to the given []string and assigns it to the Ou field.
func (o *PkiRolesRequest) SetOu(v []string) {
	o.Ou = v
}

// GetPolicyIdentifiers returns the PolicyIdentifiers field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetPolicyIdentifiers() []string {
	if o == nil || o.PolicyIdentifiers == nil {
		var ret []string
		return ret
	}
	return o.PolicyIdentifiers
}

// GetPolicyIdentifiersOk returns a tuple with the PolicyIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetPolicyIdentifiersOk() ([]string, bool) {
	if o == nil || o.PolicyIdentifiers == nil {
		return nil, false
	}
	return o.PolicyIdentifiers, true
}

// HasPolicyIdentifiers returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasPolicyIdentifiers() bool {
	if o != nil && o.PolicyIdentifiers != nil {
		return true
	}

	return false
}

// SetPolicyIdentifiers gets a reference to the given []string and assigns it to the PolicyIdentifiers field.
func (o *PkiRolesRequest) SetPolicyIdentifiers(v []string) {
	o.PolicyIdentifiers = v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetPostalCode() []string {
	if o == nil || o.PostalCode == nil {
		var ret []string
		return ret
	}
	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetPostalCodeOk() ([]string, bool) {
	if o == nil || o.PostalCode == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasPostalCode() bool {
	if o != nil && o.PostalCode != nil {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given []string and assigns it to the PostalCode field.
func (o *PkiRolesRequest) SetPostalCode(v []string) {
	o.PostalCode = v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetProvince() []string {
	if o == nil || o.Province == nil {
		var ret []string
		return ret
	}
	return o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetProvinceOk() ([]string, bool) {
	if o == nil || o.Province == nil {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasProvince() bool {
	if o != nil && o.Province != nil {
		return true
	}

	return false
}

// SetProvince gets a reference to the given []string and assigns it to the Province field.
func (o *PkiRolesRequest) SetProvince(v []string) {
	o.Province = v
}

// GetRequireCn returns the RequireCn field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetRequireCn() bool {
	if o == nil || o.RequireCn == nil {
		var ret bool
		return ret
	}
	return *o.RequireCn
}

// GetRequireCnOk returns a tuple with the RequireCn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetRequireCnOk() (*bool, bool) {
	if o == nil || o.RequireCn == nil {
		return nil, false
	}
	return o.RequireCn, true
}

// HasRequireCn returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasRequireCn() bool {
	if o != nil && o.RequireCn != nil {
		return true
	}

	return false
}

// SetRequireCn gets a reference to the given bool and assigns it to the RequireCn field.
func (o *PkiRolesRequest) SetRequireCn(v bool) {
	o.RequireCn = &v
}

// GetServerFlag returns the ServerFlag field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetServerFlag() bool {
	if o == nil || o.ServerFlag == nil {
		var ret bool
		return ret
	}
	return *o.ServerFlag
}

// GetServerFlagOk returns a tuple with the ServerFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetServerFlagOk() (*bool, bool) {
	if o == nil || o.ServerFlag == nil {
		return nil, false
	}
	return o.ServerFlag, true
}

// HasServerFlag returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasServerFlag() bool {
	if o != nil && o.ServerFlag != nil {
		return true
	}

	return false
}

// SetServerFlag gets a reference to the given bool and assigns it to the ServerFlag field.
func (o *PkiRolesRequest) SetServerFlag(v bool) {
	o.ServerFlag = &v
}

// GetSignatureBits returns the SignatureBits field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetSignatureBits() int32 {
	if o == nil || o.SignatureBits == nil {
		var ret int32
		return ret
	}
	return *o.SignatureBits
}

// GetSignatureBitsOk returns a tuple with the SignatureBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetSignatureBitsOk() (*int32, bool) {
	if o == nil || o.SignatureBits == nil {
		return nil, false
	}
	return o.SignatureBits, true
}

// HasSignatureBits returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasSignatureBits() bool {
	if o != nil && o.SignatureBits != nil {
		return true
	}

	return false
}

// SetSignatureBits gets a reference to the given int32 and assigns it to the SignatureBits field.
func (o *PkiRolesRequest) SetSignatureBits(v int32) {
	o.SignatureBits = &v
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetStreetAddress() []string {
	if o == nil || o.StreetAddress == nil {
		var ret []string
		return ret
	}
	return o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetStreetAddressOk() ([]string, bool) {
	if o == nil || o.StreetAddress == nil {
		return nil, false
	}
	return o.StreetAddress, true
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasStreetAddress() bool {
	if o != nil && o.StreetAddress != nil {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given []string and assigns it to the StreetAddress field.
func (o *PkiRolesRequest) SetStreetAddress(v []string) {
	o.StreetAddress = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *PkiRolesRequest) SetTtl(v int32) {
	o.Ttl = &v
}

// GetUseCsrCommonName returns the UseCsrCommonName field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetUseCsrCommonName() bool {
	if o == nil || o.UseCsrCommonName == nil {
		var ret bool
		return ret
	}
	return *o.UseCsrCommonName
}

// GetUseCsrCommonNameOk returns a tuple with the UseCsrCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetUseCsrCommonNameOk() (*bool, bool) {
	if o == nil || o.UseCsrCommonName == nil {
		return nil, false
	}
	return o.UseCsrCommonName, true
}

// HasUseCsrCommonName returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasUseCsrCommonName() bool {
	if o != nil && o.UseCsrCommonName != nil {
		return true
	}

	return false
}

// SetUseCsrCommonName gets a reference to the given bool and assigns it to the UseCsrCommonName field.
func (o *PkiRolesRequest) SetUseCsrCommonName(v bool) {
	o.UseCsrCommonName = &v
}

// GetUseCsrSans returns the UseCsrSans field value if set, zero value otherwise.
func (o *PkiRolesRequest) GetUseCsrSans() bool {
	if o == nil || o.UseCsrSans == nil {
		var ret bool
		return ret
	}
	return *o.UseCsrSans
}

// GetUseCsrSansOk returns a tuple with the UseCsrSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiRolesRequest) GetUseCsrSansOk() (*bool, bool) {
	if o == nil || o.UseCsrSans == nil {
		return nil, false
	}
	return o.UseCsrSans, true
}

// HasUseCsrSans returns a boolean if a field has been set.
func (o *PkiRolesRequest) HasUseCsrSans() bool {
	if o != nil && o.UseCsrSans != nil {
		return true
	}

	return false
}

// SetUseCsrSans gets a reference to the given bool and assigns it to the UseCsrSans field.
func (o *PkiRolesRequest) SetUseCsrSans(v bool) {
	o.UseCsrSans = &v
}

func (o PkiRolesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowAnyName != nil {
		toSerialize["allow_any_name"] = o.AllowAnyName
	}
	if o.AllowBareDomains != nil {
		toSerialize["allow_bare_domains"] = o.AllowBareDomains
	}
	if o.AllowGlobDomains != nil {
		toSerialize["allow_glob_domains"] = o.AllowGlobDomains
	}
	if o.AllowIpSans != nil {
		toSerialize["allow_ip_sans"] = o.AllowIpSans
	}
	if o.AllowLocalhost != nil {
		toSerialize["allow_localhost"] = o.AllowLocalhost
	}
	if o.AllowSubdomains != nil {
		toSerialize["allow_subdomains"] = o.AllowSubdomains
	}
	if o.AllowWildcardCertificates != nil {
		toSerialize["allow_wildcard_certificates"] = o.AllowWildcardCertificates
	}
	if o.AllowedDomains != nil {
		toSerialize["allowed_domains"] = o.AllowedDomains
	}
	if o.AllowedDomainsTemplate != nil {
		toSerialize["allowed_domains_template"] = o.AllowedDomainsTemplate
	}
	if o.AllowedOtherSans != nil {
		toSerialize["allowed_other_sans"] = o.AllowedOtherSans
	}
	if o.AllowedSerialNumbers != nil {
		toSerialize["allowed_serial_numbers"] = o.AllowedSerialNumbers
	}
	if o.AllowedUriSans != nil {
		toSerialize["allowed_uri_sans"] = o.AllowedUriSans
	}
	if o.AllowedUriSansTemplate != nil {
		toSerialize["allowed_uri_sans_template"] = o.AllowedUriSansTemplate
	}
	if o.Backend != nil {
		toSerialize["backend"] = o.Backend
	}
	if o.BasicConstraintsValidForNonCa != nil {
		toSerialize["basic_constraints_valid_for_non_ca"] = o.BasicConstraintsValidForNonCa
	}
	if o.ClientFlag != nil {
		toSerialize["client_flag"] = o.ClientFlag
	}
	if o.CodeSigningFlag != nil {
		toSerialize["code_signing_flag"] = o.CodeSigningFlag
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.EmailProtectionFlag != nil {
		toSerialize["email_protection_flag"] = o.EmailProtectionFlag
	}
	if o.EnforceHostnames != nil {
		toSerialize["enforce_hostnames"] = o.EnforceHostnames
	}
	if o.ExtKeyUsage != nil {
		toSerialize["ext_key_usage"] = o.ExtKeyUsage
	}
	if o.ExtKeyUsageOids != nil {
		toSerialize["ext_key_usage_oids"] = o.ExtKeyUsageOids
	}
	if o.GenerateLease != nil {
		toSerialize["generate_lease"] = o.GenerateLease
	}
	if o.IssuerRef != nil {
		toSerialize["issuer_ref"] = o.IssuerRef
	}
	if o.KeyBits != nil {
		toSerialize["key_bits"] = o.KeyBits
	}
	if o.KeyType != nil {
		toSerialize["key_type"] = o.KeyType
	}
	if o.KeyUsage != nil {
		toSerialize["key_usage"] = o.KeyUsage
	}
	if o.Locality != nil {
		toSerialize["locality"] = o.Locality
	}
	if o.MaxTtl != nil {
		toSerialize["max_ttl"] = o.MaxTtl
	}
	if o.NoStore != nil {
		toSerialize["no_store"] = o.NoStore
	}
	if o.NotAfter != nil {
		toSerialize["not_after"] = o.NotAfter
	}
	if o.NotBeforeDuration != nil {
		toSerialize["not_before_duration"] = o.NotBeforeDuration
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.Ou != nil {
		toSerialize["ou"] = o.Ou
	}
	if o.PolicyIdentifiers != nil {
		toSerialize["policy_identifiers"] = o.PolicyIdentifiers
	}
	if o.PostalCode != nil {
		toSerialize["postal_code"] = o.PostalCode
	}
	if o.Province != nil {
		toSerialize["province"] = o.Province
	}
	if o.RequireCn != nil {
		toSerialize["require_cn"] = o.RequireCn
	}
	if o.ServerFlag != nil {
		toSerialize["server_flag"] = o.ServerFlag
	}
	if o.SignatureBits != nil {
		toSerialize["signature_bits"] = o.SignatureBits
	}
	if o.StreetAddress != nil {
		toSerialize["street_address"] = o.StreetAddress
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	if o.UseCsrCommonName != nil {
		toSerialize["use_csr_common_name"] = o.UseCsrCommonName
	}
	if o.UseCsrSans != nil {
		toSerialize["use_csr_sans"] = o.UseCsrSans
	}
	return json.Marshal(toSerialize)
}

type NullablePkiRolesRequest struct {
	value *PkiRolesRequest
	isSet bool
}

func (v NullablePkiRolesRequest) Get() *PkiRolesRequest {
	return v.value
}

func (v *NullablePkiRolesRequest) Set(val *PkiRolesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePkiRolesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePkiRolesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkiRolesRequest(val *PkiRolesRequest) *NullablePkiRolesRequest {
	return &NullablePkiRolesRequest{value: val, isSet: true}
}

func (v NullablePkiRolesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkiRolesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


