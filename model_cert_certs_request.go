/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// CertCertsRequest struct for CertCertsRequest
type CertCertsRequest struct {
	// A comma-separated list of names. At least one must exist in the Common Name. Supports globbing.
	AllowedCommonNames []string `json:"allowed_common_names,omitempty"`
	// A comma-separated list of DNS names. At least one must exist in the SANs. Supports globbing.
	AllowedDnsSans []string `json:"allowed_dns_sans,omitempty"`
	// A comma-separated list of Email Addresses. At least one must exist in the SANs. Supports globbing.
	AllowedEmailSans []string `json:"allowed_email_sans,omitempty"`
	// A comma-separated string or array of oid extensions. Upon successfull authentication, these extensions will be added as metadata if they are present in the certificate. The metadata key will be the string consisting of the oid numbers separated by a dash (-) instead of a dot (.) to allow usage in ACL templates.
	AllowedMetadataExtensions []string `json:"allowed_metadata_extensions,omitempty"`
	// A comma-separated list of names. At least one must exist in either the Common Name or SANs. Supports globbing. This parameter is deprecated, please use allowed_common_names, allowed_dns_sans, allowed_email_sans, allowed_uri_sans.
	AllowedNames []string `json:"allowed_names,omitempty"`
	// A comma-separated list of Organizational Units names. At least one must exist in the OU field.
	AllowedOrganizationalUnits []string `json:"allowed_organizational_units,omitempty"`
	// A comma-separated list of URIs. At least one must exist in the SANs. Supports globbing.
	AllowedUriSans []string `json:"allowed_uri_sans,omitempty"`
	// Use \"token_bound_cidrs\" instead. If this and \"token_bound_cidrs\" are both specified, only \"token_bound_cidrs\" will be used.
	// Deprecated
	BoundCidrs []string `json:"bound_cidrs,omitempty"`
	// The public certificate that should be trusted. Must be x509 PEM encoded.
	Certificate *string `json:"certificate,omitempty"`
	// The display name to use for clients using this certificate.
	DisplayName *string `json:"display_name,omitempty"`
	// Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.
	// Deprecated
	Lease *int32 `json:"lease,omitempty"`
	// Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.
	// Deprecated
	MaxTtl *int32 `json:"max_ttl,omitempty"`
	// Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.
	// Deprecated
	Period *int32 `json:"period,omitempty"`
	// Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.
	// Deprecated
	Policies []string `json:"policies,omitempty"`
	// A comma-separated string or array of extensions formatted as \"oid:value\". Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \"value\".
	RequiredExtensions []string `json:"required_extensions,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
	TokenExplicitMaxTtl *int32 `json:"token_explicit_max_ttl,omitempty"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int32 `json:"token_max_ttl,omitempty"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"token_no_default_policy,omitempty"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").
	TokenPeriod *int32 `json:"token_period,omitempty"`
	// Comma-separated list of policies
	TokenPolicies []string `json:"token_policies,omitempty"`
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
	// The type of token to generate, service or batch
	TokenType *string `json:"token_type,omitempty"`
	// Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.
	// Deprecated
	Ttl *int32 `json:"ttl,omitempty"`
}

// NewCertCertsRequest instantiates a new CertCertsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertCertsRequest() *CertCertsRequest {
	this := CertCertsRequest{}
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// NewCertCertsRequestWithDefaults instantiates a new CertCertsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertCertsRequestWithDefaults() *CertCertsRequest {
	this := CertCertsRequest{}
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	return &this
}

// GetAllowedCommonNames returns the AllowedCommonNames field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedCommonNames() []string {
	if o == nil || o.AllowedCommonNames == nil {
		var ret []string
		return ret
	}
	return o.AllowedCommonNames
}

// GetAllowedCommonNamesOk returns a tuple with the AllowedCommonNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedCommonNamesOk() ([]string, bool) {
	if o == nil || o.AllowedCommonNames == nil {
		return nil, false
	}
	return o.AllowedCommonNames, true
}

// HasAllowedCommonNames returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedCommonNames() bool {
	if o != nil && o.AllowedCommonNames != nil {
		return true
	}

	return false
}

// SetAllowedCommonNames gets a reference to the given []string and assigns it to the AllowedCommonNames field.
func (o *CertCertsRequest) SetAllowedCommonNames(v []string) {
	o.AllowedCommonNames = v
}

// GetAllowedDnsSans returns the AllowedDnsSans field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedDnsSans() []string {
	if o == nil || o.AllowedDnsSans == nil {
		var ret []string
		return ret
	}
	return o.AllowedDnsSans
}

// GetAllowedDnsSansOk returns a tuple with the AllowedDnsSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedDnsSansOk() ([]string, bool) {
	if o == nil || o.AllowedDnsSans == nil {
		return nil, false
	}
	return o.AllowedDnsSans, true
}

// HasAllowedDnsSans returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedDnsSans() bool {
	if o != nil && o.AllowedDnsSans != nil {
		return true
	}

	return false
}

// SetAllowedDnsSans gets a reference to the given []string and assigns it to the AllowedDnsSans field.
func (o *CertCertsRequest) SetAllowedDnsSans(v []string) {
	o.AllowedDnsSans = v
}

// GetAllowedEmailSans returns the AllowedEmailSans field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedEmailSans() []string {
	if o == nil || o.AllowedEmailSans == nil {
		var ret []string
		return ret
	}
	return o.AllowedEmailSans
}

// GetAllowedEmailSansOk returns a tuple with the AllowedEmailSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedEmailSansOk() ([]string, bool) {
	if o == nil || o.AllowedEmailSans == nil {
		return nil, false
	}
	return o.AllowedEmailSans, true
}

// HasAllowedEmailSans returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedEmailSans() bool {
	if o != nil && o.AllowedEmailSans != nil {
		return true
	}

	return false
}

// SetAllowedEmailSans gets a reference to the given []string and assigns it to the AllowedEmailSans field.
func (o *CertCertsRequest) SetAllowedEmailSans(v []string) {
	o.AllowedEmailSans = v
}

// GetAllowedMetadataExtensions returns the AllowedMetadataExtensions field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedMetadataExtensions() []string {
	if o == nil || o.AllowedMetadataExtensions == nil {
		var ret []string
		return ret
	}
	return o.AllowedMetadataExtensions
}

// GetAllowedMetadataExtensionsOk returns a tuple with the AllowedMetadataExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedMetadataExtensionsOk() ([]string, bool) {
	if o == nil || o.AllowedMetadataExtensions == nil {
		return nil, false
	}
	return o.AllowedMetadataExtensions, true
}

// HasAllowedMetadataExtensions returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedMetadataExtensions() bool {
	if o != nil && o.AllowedMetadataExtensions != nil {
		return true
	}

	return false
}

// SetAllowedMetadataExtensions gets a reference to the given []string and assigns it to the AllowedMetadataExtensions field.
func (o *CertCertsRequest) SetAllowedMetadataExtensions(v []string) {
	o.AllowedMetadataExtensions = v
}

// GetAllowedNames returns the AllowedNames field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedNames() []string {
	if o == nil || o.AllowedNames == nil {
		var ret []string
		return ret
	}
	return o.AllowedNames
}

// GetAllowedNamesOk returns a tuple with the AllowedNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedNamesOk() ([]string, bool) {
	if o == nil || o.AllowedNames == nil {
		return nil, false
	}
	return o.AllowedNames, true
}

// HasAllowedNames returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedNames() bool {
	if o != nil && o.AllowedNames != nil {
		return true
	}

	return false
}

// SetAllowedNames gets a reference to the given []string and assigns it to the AllowedNames field.
func (o *CertCertsRequest) SetAllowedNames(v []string) {
	o.AllowedNames = v
}

// GetAllowedOrganizationalUnits returns the AllowedOrganizationalUnits field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedOrganizationalUnits() []string {
	if o == nil || o.AllowedOrganizationalUnits == nil {
		var ret []string
		return ret
	}
	return o.AllowedOrganizationalUnits
}

// GetAllowedOrganizationalUnitsOk returns a tuple with the AllowedOrganizationalUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedOrganizationalUnitsOk() ([]string, bool) {
	if o == nil || o.AllowedOrganizationalUnits == nil {
		return nil, false
	}
	return o.AllowedOrganizationalUnits, true
}

// HasAllowedOrganizationalUnits returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedOrganizationalUnits() bool {
	if o != nil && o.AllowedOrganizationalUnits != nil {
		return true
	}

	return false
}

// SetAllowedOrganizationalUnits gets a reference to the given []string and assigns it to the AllowedOrganizationalUnits field.
func (o *CertCertsRequest) SetAllowedOrganizationalUnits(v []string) {
	o.AllowedOrganizationalUnits = v
}

// GetAllowedUriSans returns the AllowedUriSans field value if set, zero value otherwise.
func (o *CertCertsRequest) GetAllowedUriSans() []string {
	if o == nil || o.AllowedUriSans == nil {
		var ret []string
		return ret
	}
	return o.AllowedUriSans
}

// GetAllowedUriSansOk returns a tuple with the AllowedUriSans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetAllowedUriSansOk() ([]string, bool) {
	if o == nil || o.AllowedUriSans == nil {
		return nil, false
	}
	return o.AllowedUriSans, true
}

// HasAllowedUriSans returns a boolean if a field has been set.
func (o *CertCertsRequest) HasAllowedUriSans() bool {
	if o != nil && o.AllowedUriSans != nil {
		return true
	}

	return false
}

// SetAllowedUriSans gets a reference to the given []string and assigns it to the AllowedUriSans field.
func (o *CertCertsRequest) SetAllowedUriSans(v []string) {
	o.AllowedUriSans = v
}

// GetBoundCidrs returns the BoundCidrs field value if set, zero value otherwise.
// Deprecated
func (o *CertCertsRequest) GetBoundCidrs() []string {
	if o == nil || o.BoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.BoundCidrs
}

// GetBoundCidrsOk returns a tuple with the BoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CertCertsRequest) GetBoundCidrsOk() ([]string, bool) {
	if o == nil || o.BoundCidrs == nil {
		return nil, false
	}
	return o.BoundCidrs, true
}

// HasBoundCidrs returns a boolean if a field has been set.
func (o *CertCertsRequest) HasBoundCidrs() bool {
	if o != nil && o.BoundCidrs != nil {
		return true
	}

	return false
}

// SetBoundCidrs gets a reference to the given []string and assigns it to the BoundCidrs field.
// Deprecated
func (o *CertCertsRequest) SetBoundCidrs(v []string) {
	o.BoundCidrs = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertCertsRequest) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertCertsRequest) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertCertsRequest) SetCertificate(v string) {
	o.Certificate = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CertCertsRequest) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CertCertsRequest) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CertCertsRequest) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetLease returns the Lease field value if set, zero value otherwise.
// Deprecated
func (o *CertCertsRequest) GetLease() int32 {
	if o == nil || o.Lease == nil {
		var ret int32
		return ret
	}
	return *o.Lease
}

// GetLeaseOk returns a tuple with the Lease field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CertCertsRequest) GetLeaseOk() (*int32, bool) {
	if o == nil || o.Lease == nil {
		return nil, false
	}
	return o.Lease, true
}

// HasLease returns a boolean if a field has been set.
func (o *CertCertsRequest) HasLease() bool {
	if o != nil && o.Lease != nil {
		return true
	}

	return false
}

// SetLease gets a reference to the given int32 and assigns it to the Lease field.
// Deprecated
func (o *CertCertsRequest) SetLease(v int32) {
	o.Lease = &v
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
// Deprecated
func (o *CertCertsRequest) GetMaxTtl() int32 {
	if o == nil || o.MaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CertCertsRequest) GetMaxTtlOk() (*int32, bool) {
	if o == nil || o.MaxTtl == nil {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *CertCertsRequest) HasMaxTtl() bool {
	if o != nil && o.MaxTtl != nil {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given int32 and assigns it to the MaxTtl field.
// Deprecated
func (o *CertCertsRequest) SetMaxTtl(v int32) {
	o.MaxTtl = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
// Deprecated
func (o *CertCertsRequest) GetPeriod() int32 {
	if o == nil || o.Period == nil {
		var ret int32
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CertCertsRequest) GetPeriodOk() (*int32, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *CertCertsRequest) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int32 and assigns it to the Period field.
// Deprecated
func (o *CertCertsRequest) SetPeriod(v int32) {
	o.Period = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
// Deprecated
func (o *CertCertsRequest) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CertCertsRequest) GetPoliciesOk() ([]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *CertCertsRequest) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
// Deprecated
func (o *CertCertsRequest) SetPolicies(v []string) {
	o.Policies = v
}

// GetRequiredExtensions returns the RequiredExtensions field value if set, zero value otherwise.
func (o *CertCertsRequest) GetRequiredExtensions() []string {
	if o == nil || o.RequiredExtensions == nil {
		var ret []string
		return ret
	}
	return o.RequiredExtensions
}

// GetRequiredExtensionsOk returns a tuple with the RequiredExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetRequiredExtensionsOk() ([]string, bool) {
	if o == nil || o.RequiredExtensions == nil {
		return nil, false
	}
	return o.RequiredExtensions, true
}

// HasRequiredExtensions returns a boolean if a field has been set.
func (o *CertCertsRequest) HasRequiredExtensions() bool {
	if o != nil && o.RequiredExtensions != nil {
		return true
	}

	return false
}

// SetRequiredExtensions gets a reference to the given []string and assigns it to the RequiredExtensions field.
func (o *CertCertsRequest) SetRequiredExtensions(v []string) {
	o.RequiredExtensions = v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *CertCertsRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

// GetTokenExplicitMaxTtl returns the TokenExplicitMaxTtl field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenExplicitMaxTtl() int32 {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenExplicitMaxTtl
}

// GetTokenExplicitMaxTtlOk returns a tuple with the TokenExplicitMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenExplicitMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		return nil, false
	}
	return o.TokenExplicitMaxTtl, true
}

// HasTokenExplicitMaxTtl returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenExplicitMaxTtl() bool {
	if o != nil && o.TokenExplicitMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenExplicitMaxTtl gets a reference to the given int32 and assigns it to the TokenExplicitMaxTtl field.
func (o *CertCertsRequest) SetTokenExplicitMaxTtl(v int32) {
	o.TokenExplicitMaxTtl = &v
}

// GetTokenMaxTtl returns the TokenMaxTtl field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenMaxTtl() int32 {
	if o == nil || o.TokenMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenMaxTtl
}

// GetTokenMaxTtlOk returns a tuple with the TokenMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenMaxTtl == nil {
		return nil, false
	}
	return o.TokenMaxTtl, true
}

// HasTokenMaxTtl returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenMaxTtl() bool {
	if o != nil && o.TokenMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenMaxTtl gets a reference to the given int32 and assigns it to the TokenMaxTtl field.
func (o *CertCertsRequest) SetTokenMaxTtl(v int32) {
	o.TokenMaxTtl = &v
}

// GetTokenNoDefaultPolicy returns the TokenNoDefaultPolicy field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenNoDefaultPolicy() bool {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		var ret bool
		return ret
	}
	return *o.TokenNoDefaultPolicy
}

// GetTokenNoDefaultPolicyOk returns a tuple with the TokenNoDefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenNoDefaultPolicyOk() (*bool, bool) {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		return nil, false
	}
	return o.TokenNoDefaultPolicy, true
}

// HasTokenNoDefaultPolicy returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenNoDefaultPolicy() bool {
	if o != nil && o.TokenNoDefaultPolicy != nil {
		return true
	}

	return false
}

// SetTokenNoDefaultPolicy gets a reference to the given bool and assigns it to the TokenNoDefaultPolicy field.
func (o *CertCertsRequest) SetTokenNoDefaultPolicy(v bool) {
	o.TokenNoDefaultPolicy = &v
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *CertCertsRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

// GetTokenPeriod returns the TokenPeriod field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenPeriod() int32 {
	if o == nil || o.TokenPeriod == nil {
		var ret int32
		return ret
	}
	return *o.TokenPeriod
}

// GetTokenPeriodOk returns a tuple with the TokenPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenPeriodOk() (*int32, bool) {
	if o == nil || o.TokenPeriod == nil {
		return nil, false
	}
	return o.TokenPeriod, true
}

// HasTokenPeriod returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenPeriod() bool {
	if o != nil && o.TokenPeriod != nil {
		return true
	}

	return false
}

// SetTokenPeriod gets a reference to the given int32 and assigns it to the TokenPeriod field.
func (o *CertCertsRequest) SetTokenPeriod(v int32) {
	o.TokenPeriod = &v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *CertCertsRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *CertCertsRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *CertCertsRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertCertsRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *CertCertsRequest) SetTokenType(v string) {
	o.TokenType = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
// Deprecated
func (o *CertCertsRequest) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CertCertsRequest) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *CertCertsRequest) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
// Deprecated
func (o *CertCertsRequest) SetTtl(v int32) {
	o.Ttl = &v
}

func (o CertCertsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedCommonNames != nil {
		toSerialize["allowed_common_names"] = o.AllowedCommonNames
	}
	if o.AllowedDnsSans != nil {
		toSerialize["allowed_dns_sans"] = o.AllowedDnsSans
	}
	if o.AllowedEmailSans != nil {
		toSerialize["allowed_email_sans"] = o.AllowedEmailSans
	}
	if o.AllowedMetadataExtensions != nil {
		toSerialize["allowed_metadata_extensions"] = o.AllowedMetadataExtensions
	}
	if o.AllowedNames != nil {
		toSerialize["allowed_names"] = o.AllowedNames
	}
	if o.AllowedOrganizationalUnits != nil {
		toSerialize["allowed_organizational_units"] = o.AllowedOrganizationalUnits
	}
	if o.AllowedUriSans != nil {
		toSerialize["allowed_uri_sans"] = o.AllowedUriSans
	}
	if o.BoundCidrs != nil {
		toSerialize["bound_cidrs"] = o.BoundCidrs
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Lease != nil {
		toSerialize["lease"] = o.Lease
	}
	if o.MaxTtl != nil {
		toSerialize["max_ttl"] = o.MaxTtl
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.RequiredExtensions != nil {
		toSerialize["required_extensions"] = o.RequiredExtensions
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	if o.TokenExplicitMaxTtl != nil {
		toSerialize["token_explicit_max_ttl"] = o.TokenExplicitMaxTtl
	}
	if o.TokenMaxTtl != nil {
		toSerialize["token_max_ttl"] = o.TokenMaxTtl
	}
	if o.TokenNoDefaultPolicy != nil {
		toSerialize["token_no_default_policy"] = o.TokenNoDefaultPolicy
	}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	if o.TokenPeriod != nil {
		toSerialize["token_period"] = o.TokenPeriod
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	if o.TokenType != nil {
		toSerialize["token_type"] = o.TokenType
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableCertCertsRequest struct {
	value *CertCertsRequest
	isSet bool
}

func (v NullableCertCertsRequest) Get() *CertCertsRequest {
	return v.value
}

func (v *NullableCertCertsRequest) Set(val *CertCertsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCertCertsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCertCertsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertCertsRequest(val *CertCertsRequest) *NullableCertCertsRequest {
	return &NullableCertCertsRequest{value: val, isSet: true}
}

func (v NullableCertCertsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertCertsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


