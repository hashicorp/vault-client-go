/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Auth is a simple wrapper around the client for Auth requests
type Auth struct {
	client *Client
}

// AWSConfigDeleteCertificate
// certName: Name of the certificate.
func (a *Auth) AWSConfigDeleteCertificate(ctx context.Context, certName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigDeleteClient
func (a *Auth) AWSConfigDeleteClient(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/client"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigDeleteIdentityAccessList
func (a *Auth) AWSConfigDeleteIdentityAccessList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigDeleteIdentityWhiteList
func (a *Auth) AWSConfigDeleteIdentityWhiteList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigDeleteRoleTagBlackList
func (a *Auth) AWSConfigDeleteRoleTagBlackList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigDeleteRoleTagDenyList
func (a *Auth) AWSConfigDeleteRoleTagDenyList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigDeleteSecurityTokenServiceAccount
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
func (a *Auth) AWSConfigDeleteSecurityTokenServiceAccount(ctx context.Context, accountId string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigListCertificates
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSConfigListCertificates(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/certificates"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigListSecurityTokenService
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSConfigListSecurityTokenService(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/sts"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadCertificate
// certName: Name of the certificate.
func (a *Auth) AWSConfigReadCertificate(ctx context.Context, certName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadClient
func (a *Auth) AWSConfigReadClient(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/client"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadIdentity
func (a *Auth) AWSConfigReadIdentity(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/identity"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadIdentityAccessList
func (a *Auth) AWSConfigReadIdentityAccessList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadIdentityWhiteList
func (a *Auth) AWSConfigReadIdentityWhiteList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadRoleTagBlackList
func (a *Auth) AWSConfigReadRoleTagBlackList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadRoleTagDenyList
func (a *Auth) AWSConfigReadRoleTagDenyList(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigReadSecurityTokenServiceAccount
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
func (a *Auth) AWSConfigReadSecurityTokenServiceAccount(ctx context.Context, accountId string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigRotateRoot
func (a *Auth) AWSConfigRotateRoot(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/rotate-root"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteCertificate
// certName: Name of the certificate.
func (a *Auth) AWSConfigWriteCertificate(ctx context.Context, certName string, aWSConfigWriteCertificateRequest AWSConfigWriteCertificateRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteCertificateRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteClient
func (a *Auth) AWSConfigWriteClient(ctx context.Context, aWSConfigWriteClientRequest AWSConfigWriteClientRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/client"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteClientRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteIdentity
func (a *Auth) AWSConfigWriteIdentity(ctx context.Context, aWSConfigWriteIdentityRequest AWSConfigWriteIdentityRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/identity"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteIdentityRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteIdentityAccessList
func (a *Auth) AWSConfigWriteIdentityAccessList(ctx context.Context, aWSConfigWriteIdentityAccessListRequest AWSConfigWriteIdentityAccessListRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteIdentityAccessListRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteIdentityWhiteList
func (a *Auth) AWSConfigWriteIdentityWhiteList(ctx context.Context, aWSConfigWriteIdentityWhiteListRequest AWSConfigWriteIdentityWhiteListRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteIdentityWhiteListRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteRoleTagBlackList
func (a *Auth) AWSConfigWriteRoleTagBlackList(ctx context.Context, aWSConfigWriteRoleTagBlackListRequest AWSConfigWriteRoleTagBlackListRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteRoleTagBlackListRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteRoleTagDenyList
func (a *Auth) AWSConfigWriteRoleTagDenyList(ctx context.Context, aWSConfigWriteRoleTagDenyListRequest AWSConfigWriteRoleTagDenyListRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteRoleTagDenyListRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSConfigWriteSecurityTokenServiceAccount
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
func (a *Auth) AWSConfigWriteSecurityTokenServiceAccount(ctx context.Context, accountId string, aWSConfigWriteSecurityTokenServiceAccountRequest AWSConfigWriteSecurityTokenServiceAccountRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSConfigWriteSecurityTokenServiceAccountRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSDeleteAuthRole
// role: Name of the role.
func (a *Auth) AWSDeleteAuthRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSDeleteIdentityAccessListFor
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) AWSDeleteIdentityAccessListFor(ctx context.Context, instanceId string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/identity-accesslist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSDeleteIdentityWhiteListFor
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) AWSDeleteIdentityWhiteListFor(ctx context.Context, instanceId string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/identity-whitelist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSDeleteRoleTagBlackListFor
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) AWSDeleteRoleTagBlackListFor(ctx context.Context, roleTag string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSDeleteRoleTagDenyListFor
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) AWSDeleteRoleTagDenyListFor(ctx context.Context, roleTag string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSListAuthRoles
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSListAuthRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSListAuthRoles2
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSListAuthRoles2(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roles"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSListIdentityAccessList
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSListIdentityAccessList(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSListIdentityWhiteList
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSListIdentityWhiteList(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSListRoleTagBlackList
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSListRoleTagBlackList(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSListRoleTagDenyList
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AWSListRoleTagDenyList(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSLogin
func (a *Auth) AWSLogin(ctx context.Context, aWSLoginRequest AWSLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSReadAuthRole
// role: Name of the role.
func (a *Auth) AWSReadAuthRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSReadIdentityAccessListFor
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) AWSReadIdentityAccessListFor(ctx context.Context, instanceId string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/identity-accesslist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSReadIdentityWhiteListFor
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
func (a *Auth) AWSReadIdentityWhiteListFor(ctx context.Context, instanceId string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/identity-whitelist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSReadRoleTagBlackListFor
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) AWSReadRoleTagBlackListFor(ctx context.Context, roleTag string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSReadRoleTagDenyListFor
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) AWSReadRoleTagDenyListFor(ctx context.Context, roleTag string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteAuthRole
// role: Name of the role.
func (a *Auth) AWSWriteAuthRole(ctx context.Context, role string, aWSWriteAuthRoleRequest AWSWriteAuthRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSWriteAuthRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteAuthRoleTag
// role: Name of the role.
func (a *Auth) AWSWriteAuthRoleTag(ctx context.Context, role string, aWSWriteAuthRoleTagRequest AWSWriteAuthRoleTagRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/role/{role}/tag"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSWriteAuthRoleTagRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteIdentityAccessListTidySettings
func (a *Auth) AWSWriteIdentityAccessListTidySettings(ctx context.Context, aWSWriteIdentityAccessListTidySettingsRequest AWSWriteIdentityAccessListTidySettingsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSWriteIdentityAccessListTidySettingsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteIdentityWhiteListTidySettings
func (a *Auth) AWSWriteIdentityWhiteListTidySettings(ctx context.Context, aWSWriteIdentityWhiteListTidySettingsRequest AWSWriteIdentityWhiteListTidySettingsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSWriteIdentityWhiteListTidySettingsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteRoleTagBlackListFor
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) AWSWriteRoleTagBlackListFor(ctx context.Context, roleTag string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteRoleTagBlackListTidySettings
func (a *Auth) AWSWriteRoleTagBlackListTidySettings(ctx context.Context, aWSWriteRoleTagBlackListTidySettingsRequest AWSWriteRoleTagBlackListTidySettingsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSWriteRoleTagBlackListTidySettingsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteRoleTagDenyListFor
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
func (a *Auth) AWSWriteRoleTagDenyListFor(ctx context.Context, roleTag string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AWSWriteRoleTagDenyListTidySettings
func (a *Auth) AWSWriteRoleTagDenyListTidySettings(ctx context.Context, aWSWriteRoleTagDenyListTidySettingsRequest AWSWriteRoleTagDenyListTidySettingsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{aws_mount_path}/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"aws_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("aws")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aWSWriteRoleTagDenyListTidySettingsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AliCloudDeleteAuthRole Create a role and associate policies to it.
// role: The name of the role as it should appear in Vault.
func (a *Auth) AliCloudDeleteAuthRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{alicloud_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"alicloud_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("alicloud")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AliCloudListAuthRoles Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AliCloudListAuthRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{alicloud_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"alicloud_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("alicloud")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AliCloudListAuthRoles2 Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AliCloudListAuthRoles2(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{alicloud_mount_path}/roles"
	requestPath = strings.Replace(requestPath, "{"+"alicloud_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("alicloud")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AliCloudLogin Authenticates an RAM entity with Vault.
func (a *Auth) AliCloudLogin(ctx context.Context, aliCloudLoginRequest AliCloudLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{alicloud_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"alicloud_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("alicloud")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aliCloudLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AliCloudReadAuthRole Create a role and associate policies to it.
// role: The name of the role as it should appear in Vault.
func (a *Auth) AliCloudReadAuthRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{alicloud_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"alicloud_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("alicloud")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AliCloudWriteAuthRole Create a role and associate policies to it.
// role: The name of the role as it should appear in Vault.
func (a *Auth) AliCloudWriteAuthRole(ctx context.Context, role string, aliCloudWriteAuthRoleRequest AliCloudWriteAuthRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{alicloud_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"alicloud_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("alicloud")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		aliCloudWriteAuthRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteBindSecretID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteBindSecretID(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteBoundCIDRList
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteBoundCIDRList(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeletePeriod
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeletePeriod(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeletePolicies
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeletePolicies(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteRole
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteRole(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteSecretIDAccessorDestroy
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteSecretIDAccessorDestroy(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteSecretIDBoundCIDRs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteSecretIDBoundCIDRs(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteSecretIDDestroy
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteSecretIDDestroy(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteSecretIDNumUses
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteSecretIDNumUses(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteSecretIDTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteSecretIDTTL(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteTokenBoundCIDRs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteTokenBoundCIDRs(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteTokenMaxTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteTokenMaxTTL(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteTokenNumUses
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteTokenNumUses(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleDeleteTokenTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleDeleteTokenTTL(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleListRoles
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AppRoleListRoles(ctx context.Context, list string, options ...RequestOption) (*Response[AppRoleListRolesResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)

	return sendRequestParseResponse[AppRoleListRolesResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleListSecretID
// roleName: Name of the role. Must be less than 4096 bytes.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AppRoleListSecretID(ctx context.Context, roleName string, list string, options ...RequestOption) (*Response[AppRoleListSecretIDResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleListSecretIDResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleLogin
func (a *Auth) AppRoleLogin(ctx context.Context, appRoleLoginRequest AppRoleLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadBindSecretID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadBindSecretID(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadBindSecretIDResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadBindSecretIDResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadBoundCIDRList
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadBoundCIDRList(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadBoundCIDRListResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadBoundCIDRListResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadLocalSecretIDs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadLocalSecretIDs(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadLocalSecretIDsResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/local-secret-ids"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadLocalSecretIDsResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadPeriod
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadPeriod(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadPeriodResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadPeriodResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadPolicies
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadPolicies(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadPoliciesResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadPoliciesResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadRole
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadRole(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadRoleResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadRoleResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadRoleID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadRoleID(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadRoleIDResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/role-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadRoleIDResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadSecretIDBoundCIDRs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadSecretIDBoundCIDRs(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadSecretIDBoundCIDRsResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadSecretIDBoundCIDRsResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadSecretIDNumUses
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadSecretIDNumUses(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadSecretIDNumUsesResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadSecretIDNumUsesResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadSecretIDTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadSecretIDTTL(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadSecretIDTTLResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadSecretIDTTLResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadTokenBoundCIDRs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadTokenBoundCIDRs(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadTokenBoundCIDRsResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadTokenBoundCIDRsResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadTokenMaxTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadTokenMaxTTL(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadTokenMaxTTLResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadTokenMaxTTLResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadTokenNumUses
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadTokenNumUses(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadTokenNumUsesResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadTokenNumUsesResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleReadTokenTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleReadTokenTTL(ctx context.Context, roleName string, options ...RequestOption) (*Response[AppRoleReadTokenTTLResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[AppRoleReadTokenTTLResponse](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleTidySecretID Trigger the clean-up of expired SecretID entries.
func (a *Auth) AppRoleTidySecretID(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/tidy/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteBindSecretID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteBindSecretID(ctx context.Context, roleName string, appRoleWriteBindSecretIDRequest AppRoleWriteBindSecretIDRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteBindSecretIDRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteBoundCIDRList
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteBoundCIDRList(ctx context.Context, roleName string, appRoleWriteBoundCIDRListRequest AppRoleWriteBoundCIDRListRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteBoundCIDRListRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteCustomSecretID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteCustomSecretID(ctx context.Context, roleName string, appRoleWriteCustomSecretIDRequest AppRoleWriteCustomSecretIDRequest, options ...RequestOption) (*Response[AppRoleWriteCustomSecretIDResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/custom-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[AppRoleWriteCustomSecretIDResponse](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteCustomSecretIDRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWritePeriod
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWritePeriod(ctx context.Context, roleName string, appRoleWritePeriodRequest AppRoleWritePeriodRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWritePeriodRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWritePolicies
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWritePolicies(ctx context.Context, roleName string, appRoleWritePoliciesRequest AppRoleWritePoliciesRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWritePoliciesRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteRole
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteRole(ctx context.Context, roleName string, appRoleWriteRoleRequest AppRoleWriteRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteRoleID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteRoleID(ctx context.Context, roleName string, appRoleWriteRoleIDRequest AppRoleWriteRoleIDRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/role-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteRoleIDRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretID
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretID(ctx context.Context, roleName string, appRoleWriteSecretIDRequest AppRoleWriteSecretIDRequest, options ...RequestOption) (*Response[AppRoleWriteSecretIDResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[AppRoleWriteSecretIDResponse](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDAccessorDestroy
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDAccessorDestroy(ctx context.Context, roleName string, appRoleWriteSecretIDAccessorDestroyRequest AppRoleWriteSecretIDAccessorDestroyRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/destroy"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDAccessorDestroyRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDAccessorLookup
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDAccessorLookup(ctx context.Context, roleName string, appRoleWriteSecretIDAccessorLookupRequest AppRoleWriteSecretIDAccessorLookupRequest, options ...RequestOption) (*Response[AppRoleWriteSecretIDAccessorLookupResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-accessor/lookup"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[AppRoleWriteSecretIDAccessorLookupResponse](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDAccessorLookupRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDBoundCIDRs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDBoundCIDRs(ctx context.Context, roleName string, appRoleWriteSecretIDBoundCIDRsRequest AppRoleWriteSecretIDBoundCIDRsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDBoundCIDRsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDDestroy
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDDestroy(ctx context.Context, roleName string, appRoleWriteSecretIDDestroyRequest AppRoleWriteSecretIDDestroyRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id/destroy"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDDestroyRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDLookup
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDLookup(ctx context.Context, roleName string, appRoleWriteSecretIDLookupRequest AppRoleWriteSecretIDLookupRequest, options ...RequestOption) (*Response[AppRoleWriteSecretIDLookupResponse], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id/lookup"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[AppRoleWriteSecretIDLookupResponse](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDLookupRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDNumUses
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDNumUses(ctx context.Context, roleName string, appRoleWriteSecretIDNumUsesRequest AppRoleWriteSecretIDNumUsesRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDNumUsesRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteSecretIDTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteSecretIDTTL(ctx context.Context, roleName string, appRoleWriteSecretIDTTLRequest AppRoleWriteSecretIDTTLRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteSecretIDTTLRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteTokenBoundCIDRs
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteTokenBoundCIDRs(ctx context.Context, roleName string, appRoleWriteTokenBoundCIDRsRequest AppRoleWriteTokenBoundCIDRsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteTokenBoundCIDRsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteTokenMaxTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteTokenMaxTTL(ctx context.Context, roleName string, appRoleWriteTokenMaxTTLRequest AppRoleWriteTokenMaxTTLRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteTokenMaxTTLRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteTokenNumUses
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteTokenNumUses(ctx context.Context, roleName string, appRoleWriteTokenNumUsesRequest AppRoleWriteTokenNumUsesRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteTokenNumUsesRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AppRoleWriteTokenTTL
// roleName: Name of the role. Must be less than 4096 bytes.
func (a *Auth) AppRoleWriteTokenTTL(ctx context.Context, roleName string, appRoleWriteTokenTTLRequest AppRoleWriteTokenTTLRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{approle_mount_path}/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"approle_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("approle")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		appRoleWriteTokenTTLRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureDeleteAuthConfig
func (a *Auth) AzureDeleteAuthConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureDeleteAuthRole
// name: Name of the role.
func (a *Auth) AzureDeleteAuthRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureListAuthRoles
// list: Must be set to &#x60;true&#x60;
func (a *Auth) AzureListAuthRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureLogin
func (a *Auth) AzureLogin(ctx context.Context, azureLoginRequest AzureLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		azureLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureReadAuthConfig
func (a *Auth) AzureReadAuthConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureReadAuthRole
// name: Name of the role.
func (a *Auth) AzureReadAuthRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureWriteAuthConfig
func (a *Auth) AzureWriteAuthConfig(ctx context.Context, azureWriteAuthConfigRequest AzureWriteAuthConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		azureWriteAuthConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// AzureWriteAuthRole
// name: Name of the role.
func (a *Auth) AzureWriteAuthRole(ctx context.Context, name string, azureWriteAuthRoleRequest AzureWriteAuthRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{azure_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"azure_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("azure")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		azureWriteAuthRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CentrifyLogin Log in with a username and password.
func (a *Auth) CentrifyLogin(ctx context.Context, centrifyLoginRequest CentrifyLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{centrify_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"centrify_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("centrify")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		centrifyLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CentrifyReadConfig This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
func (a *Auth) CentrifyReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{centrify_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"centrify_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("centrify")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CentrifyWriteConfig This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform for authenticating users.
func (a *Auth) CentrifyWriteConfig(ctx context.Context, centrifyWriteConfigRequest CentrifyWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{centrify_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"centrify_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("centrify")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		centrifyWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesDelete Manage trusted certificates used for authentication.
// name: The name of the certificate
func (a *Auth) CertificatesDelete(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesDeleteCRL Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
func (a *Auth) CertificatesDeleteCRL(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesList Manage trusted certificates used for authentication.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) CertificatesList(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/certs"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesListCRLs
// list: Must be set to &#x60;true&#x60;
func (a *Auth) CertificatesListCRLs(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/crls"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesLogin
func (a *Auth) CertificatesLogin(ctx context.Context, certificatesLoginRequest CertificatesLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certificatesLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesRead Manage trusted certificates used for authentication.
// name: The name of the certificate
func (a *Auth) CertificatesRead(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesReadCRL Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
func (a *Auth) CertificatesReadCRL(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesReadConfig
func (a *Auth) CertificatesReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesWrite Manage trusted certificates used for authentication.
// name: The name of the certificate
func (a *Auth) CertificatesWrite(ctx context.Context, name string, certificatesWriteRequest CertificatesWriteRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certificatesWriteRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesWriteCRL Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
func (a *Auth) CertificatesWriteCRL(ctx context.Context, name string, certificatesWriteCRLRequest CertificatesWriteCRLRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certificatesWriteCRLRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CertificatesWriteConfig
func (a *Auth) CertificatesWriteConfig(ctx context.Context, certificatesWriteConfigRequest CertificatesWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cert_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"cert_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cert")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certificatesWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryDeleteConfig
func (a *Auth) CloudFoundryDeleteConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryDeleteRole
// role: The name of the role.
func (a *Auth) CloudFoundryDeleteRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryListRoles
// list: Must be set to &#x60;true&#x60;
func (a *Auth) CloudFoundryListRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/roles"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryLogin
func (a *Auth) CloudFoundryLogin(ctx context.Context, cloudFoundryLoginRequest CloudFoundryLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cloudFoundryLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryReadConfig
func (a *Auth) CloudFoundryReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryReadRole
// role: The name of the role.
func (a *Auth) CloudFoundryReadRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryWriteConfig
func (a *Auth) CloudFoundryWriteConfig(ctx context.Context, cloudFoundryWriteConfigRequest CloudFoundryWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cloudFoundryWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// CloudFoundryWriteRole
// role: The name of the role.
func (a *Auth) CloudFoundryWriteRole(ctx context.Context, role string, cloudFoundryWriteRoleRequest CloudFoundryWriteRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{cf_mount_path}/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"cf_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("cf")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cloudFoundryWriteRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubDeleteMapTeam Read/write/delete a single teams mapping
// key: Key for the teams mapping
func (a *Auth) GitHubDeleteMapTeam(ctx context.Context, key string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubDeleteMapUser Read/write/delete a single users mapping
// key: Key for the users mapping
func (a *Auth) GitHubDeleteMapUser(ctx context.Context, key string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubLogin
func (a *Auth) GitHubLogin(ctx context.Context, gitHubLoginRequest GitHubLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gitHubLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubReadConfig
func (a *Auth) GitHubReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubReadMapTeam Read/write/delete a single teams mapping
// key: Key for the teams mapping
func (a *Auth) GitHubReadMapTeam(ctx context.Context, key string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubReadMapTeams Read mappings for teams
func (a *Auth) GitHubReadMapTeams(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/teams"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubReadMapUser Read/write/delete a single users mapping
// key: Key for the users mapping
func (a *Auth) GitHubReadMapUser(ctx context.Context, key string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubReadMapUsers Read mappings for users
func (a *Auth) GitHubReadMapUsers(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/users"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubWriteConfig
func (a *Auth) GitHubWriteConfig(ctx context.Context, gitHubWriteConfigRequest GitHubWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gitHubWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubWriteMapTeam Read/write/delete a single teams mapping
// key: Key for the teams mapping
func (a *Auth) GitHubWriteMapTeam(ctx context.Context, key string, gitHubWriteMapTeamRequest GitHubWriteMapTeamRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gitHubWriteMapTeamRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GitHubWriteMapUser Read/write/delete a single users mapping
// key: Key for the users mapping
func (a *Auth) GitHubWriteMapUser(ctx context.Context, key string, gitHubWriteMapUserRequest GitHubWriteMapUserRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{github_mount_path}/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"github_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("github")), -1)
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gitHubWriteMapUserRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudDeleteRole Create a GCP role with associated policies and required attributes.
// name: Name of the role.
func (a *Auth) GoogleCloudDeleteRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudListRoles Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GoogleCloudListRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudListRoles2 Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) GoogleCloudListRoles2(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/roles"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudLogin
func (a *Auth) GoogleCloudLogin(ctx context.Context, googleCloudLoginRequest GoogleCloudLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		googleCloudLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudReadAuthConfig Configure credentials used to query the GCP IAM API to verify authenticating service accounts
func (a *Auth) GoogleCloudReadAuthConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudReadRole Create a GCP role with associated policies and required attributes.
// name: Name of the role.
func (a *Auth) GoogleCloudReadRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudWriteAuthConfig Configure credentials used to query the GCP IAM API to verify authenticating service accounts
func (a *Auth) GoogleCloudWriteAuthConfig(ctx context.Context, googleCloudWriteAuthConfigRequest GoogleCloudWriteAuthConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		googleCloudWriteAuthConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudWriteRole Create a GCP role with associated policies and required attributes.
// name: Name of the role.
func (a *Auth) GoogleCloudWriteRole(ctx context.Context, name string, googleCloudWriteRoleRequest GoogleCloudWriteRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		googleCloudWriteRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudWriteRoleLabels Add or remove labels for an existing 'gce' role
// name: Name of the role.
func (a *Auth) GoogleCloudWriteRoleLabels(ctx context.Context, name string, googleCloudWriteRoleLabelsRequest GoogleCloudWriteRoleLabelsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/role/{name}/labels"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		googleCloudWriteRoleLabelsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// GoogleCloudWriteRoleServiceAccounts Add or remove service accounts for an existing `iam` role
// name: Name of the role.
func (a *Auth) GoogleCloudWriteRoleServiceAccounts(ctx context.Context, name string, googleCloudWriteRoleServiceAccountsRequest GoogleCloudWriteRoleServiceAccountsRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{gcp_mount_path}/role/{name}/service-accounts"
	requestPath = strings.Replace(requestPath, "{"+"gcp_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("gcp")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		googleCloudWriteRoleServiceAccountsRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTDeleteRole Delete an existing role.
// name: Name of the role.
func (a *Auth) JWTDeleteRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTListRoles Lists all the roles registered with the backend.
// The list will contain the names of the roles.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) JWTListRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTLogin Authenticates to Vault using a JWT (or OIDC) token.
func (a *Auth) JWTLogin(ctx context.Context, jWTLoginRequest JWTLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jWTLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTReadConfig Read the current JWT authentication backend configuration.
func (a *Auth) JWTReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTReadOIDCCallback Callback endpoint to complete an OIDC login.
func (a *Auth) JWTReadOIDCCallback(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/oidc/callback"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTReadRole Read an existing role.
// name: Name of the role.
func (a *Auth) JWTReadRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTWriteConfig Configure the JWT authentication backend.
// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
func (a *Auth) JWTWriteConfig(ctx context.Context, jWTWriteConfigRequest JWTWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jWTWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTWriteOIDCAuthURL Request an authorization URL to start an OIDC login flow.
func (a *Auth) JWTWriteOIDCAuthURL(ctx context.Context, jWTWriteOIDCAuthURLRequest JWTWriteOIDCAuthURLRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/oidc/auth_url"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jWTWriteOIDCAuthURLRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTWriteOIDCCallback Callback endpoint to handle form_posts.
func (a *Auth) JWTWriteOIDCCallback(ctx context.Context, jWTWriteOIDCCallbackRequest JWTWriteOIDCCallbackRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/oidc/callback"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jWTWriteOIDCCallbackRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// JWTWriteRole Register an role with the backend.
// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
// name: Name of the role.
func (a *Auth) JWTWriteRole(ctx context.Context, name string, jWTWriteRoleRequest JWTWriteRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{jwt_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"jwt_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("jwt")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		jWTWriteRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosDeleteGroup
// name: Name of the LDAP group.
func (a *Auth) KerberosDeleteGroup(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosListGroups
// list: Must be set to &#x60;true&#x60;
func (a *Auth) KerberosListGroups(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/groups"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosLogin
func (a *Auth) KerberosLogin(ctx context.Context, kerberosLoginRequest KerberosLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosReadConfig
func (a *Auth) KerberosReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosReadGroup
// name: Name of the LDAP group.
func (a *Auth) KerberosReadGroup(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosReadLDAPConfig
func (a *Auth) KerberosReadLDAPConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/config/ldap"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosWriteConfig
func (a *Auth) KerberosWriteConfig(ctx context.Context, kerberosWriteConfigRequest KerberosWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosWriteGroup
// name: Name of the LDAP group.
func (a *Auth) KerberosWriteGroup(ctx context.Context, name string, kerberosWriteGroupRequest KerberosWriteGroupRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosWriteGroupRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KerberosWriteLDAPConfig
func (a *Auth) KerberosWriteLDAPConfig(ctx context.Context, kerberosWriteLDAPConfigRequest KerberosWriteLDAPConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kerberos_mount_path}/config/ldap"
	requestPath = strings.Replace(requestPath, "{"+"kerberos_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kerberos")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosWriteLDAPConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesDeleteAuthRole Register an role with the backend.
// name: Name of the role.
func (a *Auth) KubernetesDeleteAuthRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesListAuthRoles Lists all the roles registered with the backend.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) KubernetesListAuthRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesLogin Authenticates Kubernetes service accounts with Vault.
func (a *Auth) KubernetesLogin(ctx context.Context, kubernetesLoginRequest KubernetesLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kubernetesLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesReadAuthConfig Configures the JWT Public Key and Kubernetes API information.
func (a *Auth) KubernetesReadAuthConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesReadAuthRole Register an role with the backend.
// name: Name of the role.
func (a *Auth) KubernetesReadAuthRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesWriteAuthConfig Configures the JWT Public Key and Kubernetes API information.
func (a *Auth) KubernetesWriteAuthConfig(ctx context.Context, kubernetesWriteAuthConfigRequest KubernetesWriteAuthConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kubernetesWriteAuthConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// KubernetesWriteAuthRole Register an role with the backend.
// name: Name of the role.
func (a *Auth) KubernetesWriteAuthRole(ctx context.Context, name string, kubernetesWriteAuthRoleRequest KubernetesWriteAuthRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{kubernetes_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"kubernetes_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("kubernetes")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kubernetesWriteAuthRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPDeleteGroup Manage additional groups for users allowed to authenticate.
// name: Name of the LDAP group.
func (a *Auth) LDAPDeleteGroup(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPDeleteUser Manage users allowed to authenticate.
// name: Name of the LDAP user.
func (a *Auth) LDAPDeleteUser(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPListGroups Manage additional groups for users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) LDAPListGroups(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/groups"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPListUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) LDAPListUsers(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/users"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPLogin Log in with a username and password.
// username: DN (distinguished name) to be used for login.
func (a *Auth) LDAPLogin(ctx context.Context, username string, lDAPLoginRequest LDAPLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		lDAPLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPReadAuthConfig Configure the LDAP server to connect to, along with its options.
func (a *Auth) LDAPReadAuthConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPReadGroup Manage additional groups for users allowed to authenticate.
// name: Name of the LDAP group.
func (a *Auth) LDAPReadGroup(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPReadUser Manage users allowed to authenticate.
// name: Name of the LDAP user.
func (a *Auth) LDAPReadUser(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPWriteAuthConfig Configure the LDAP server to connect to, along with its options.
func (a *Auth) LDAPWriteAuthConfig(ctx context.Context, lDAPWriteAuthConfigRequest LDAPWriteAuthConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		lDAPWriteAuthConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPWriteGroup Manage additional groups for users allowed to authenticate.
// name: Name of the LDAP group.
func (a *Auth) LDAPWriteGroup(ctx context.Context, name string, lDAPWriteGroupRequest LDAPWriteGroupRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		lDAPWriteGroupRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// LDAPWriteUser Manage users allowed to authenticate.
// name: Name of the LDAP user.
func (a *Auth) LDAPWriteUser(ctx context.Context, name string, lDAPWriteUserRequest LDAPWriteUserRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{ldap_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"ldap_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("ldap")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		lDAPWriteUserRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIDeleteConfig Manages the configuration for the Vault Auth Plugin.
func (a *Auth) OCIDeleteConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIDeleteRole Create a role and associate policies to it.
// role: Name of the role.
func (a *Auth) OCIDeleteRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIListRoles Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) OCIListRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCILoginWithRole Authenticates to Vault using OCI credentials
// role: Name of the role.
func (a *Auth) OCILoginWithRole(ctx context.Context, role string, oCILoginWithRoleRequest OCILoginWithRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/login/{role}"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oCILoginWithRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIReadConfig Manages the configuration for the Vault Auth Plugin.
func (a *Auth) OCIReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIReadRole Create a role and associate policies to it.
// role: Name of the role.
func (a *Auth) OCIReadRole(ctx context.Context, role string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIWriteConfig Manages the configuration for the Vault Auth Plugin.
func (a *Auth) OCIWriteConfig(ctx context.Context, oCIWriteConfigRequest OCIWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oCIWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OCIWriteRole Create a role and associate policies to it.
// role: Name of the role.
func (a *Auth) OCIWriteRole(ctx context.Context, role string, oCIWriteRoleRequest OCIWriteRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oci_mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"oci_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oci")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oCIWriteRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCDeleteAuthRole Delete an existing role.
// name: Name of the role.
func (a *Auth) OIDCDeleteAuthRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCListAuthRoles Lists all the roles registered with the backend.
// The list will contain the names of the roles.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) OIDCListAuthRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCLogin Authenticates to Vault using a JWT (or OIDC) token.
func (a *Auth) OIDCLogin(ctx context.Context, oIDCLoginRequest OIDCLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oIDCLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCReadAuthConfig Read the current JWT authentication backend configuration.
func (a *Auth) OIDCReadAuthConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCReadAuthRole Read an existing role.
// name: Name of the role.
func (a *Auth) OIDCReadAuthRole(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCReadCallback Callback endpoint to complete an OIDC login.
func (a *Auth) OIDCReadCallback(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/oidc/callback"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCWriteAuthConfig Configure the JWT authentication backend.
// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
func (a *Auth) OIDCWriteAuthConfig(ctx context.Context, oIDCWriteAuthConfigRequest OIDCWriteAuthConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oIDCWriteAuthConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCWriteAuthRole Register an role with the backend.
// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
// name: Name of the role.
func (a *Auth) OIDCWriteAuthRole(ctx context.Context, name string, oIDCWriteAuthRoleRequest OIDCWriteAuthRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oIDCWriteAuthRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCWriteAuthURL Request an authorization URL to start an OIDC login flow.
func (a *Auth) OIDCWriteAuthURL(ctx context.Context, oIDCWriteAuthURLRequest OIDCWriteAuthURLRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/oidc/auth_url"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oIDCWriteAuthURLRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OIDCWriteCallback Callback endpoint to handle form_posts.
func (a *Auth) OIDCWriteCallback(ctx context.Context, oIDCWriteCallbackRequest OIDCWriteCallbackRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{oidc_mount_path}/oidc/callback"
	requestPath = strings.Replace(requestPath, "{"+"oidc_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("oidc")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oIDCWriteCallbackRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaDeleteGroup Manage users allowed to authenticate.
// name: Name of the Okta group.
func (a *Auth) OktaDeleteGroup(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaDeleteUser Manage additional groups for users allowed to authenticate.
// name: Name of the user.
func (a *Auth) OktaDeleteUser(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaListGroups Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) OktaListGroups(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/groups"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaListUsers Manage additional groups for users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) OktaListUsers(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/users"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaLogin Log in with a username and password.
// username: Username to be used for login.
func (a *Auth) OktaLogin(ctx context.Context, username string, oktaLoginRequest OktaLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaReadConfig This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
func (a *Auth) OktaReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaReadGroup Manage users allowed to authenticate.
// name: Name of the Okta group.
func (a *Auth) OktaReadGroup(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaReadUser Manage additional groups for users allowed to authenticate.
// name: Name of the user.
func (a *Auth) OktaReadUser(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaVerify
// nonce: Nonce provided during a login request to retrieve the number verification challenge for the matching request.
func (a *Auth) OktaVerify(ctx context.Context, nonce string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/verify/{nonce}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"nonce"+"}", url.PathEscape(nonce), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaWriteConfig This endpoint allows you to configure the Okta and its configuration options.  The Okta organization are the characters at the front of the URL for Okta. Example https://ORG.okta.com
func (a *Auth) OktaWriteConfig(ctx context.Context, oktaWriteConfigRequest OktaWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaWriteGroup Manage users allowed to authenticate.
// name: Name of the Okta group.
func (a *Auth) OktaWriteGroup(ctx context.Context, name string, oktaWriteGroupRequest OktaWriteGroupRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaWriteGroupRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// OktaWriteUser Manage additional groups for users allowed to authenticate.
// name: Name of the user.
func (a *Auth) OktaWriteUser(ctx context.Context, name string, oktaWriteUserRequest OktaWriteUserRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{okta_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"okta_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("okta")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oktaWriteUserRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusDeleteUser Manage users allowed to authenticate.
// name: Name of the RADIUS user.
func (a *Auth) RadiusDeleteUser(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusListUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) RadiusListUsers(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/users"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusLogin Log in with a username and password.
func (a *Auth) RadiusLogin(ctx context.Context, radiusLoginRequest RadiusLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusLoginWithUsername Log in with a username and password.
// urlusername: Username to be used for login. (URL parameter)
func (a *Auth) RadiusLoginWithUsername(ctx context.Context, urlusername string, radiusLoginWithUsernameRequest RadiusLoginWithUsernameRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/login/{urlusername}"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)
	requestPath = strings.Replace(requestPath, "{"+"urlusername"+"}", url.PathEscape(urlusername), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusLoginWithUsernameRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusReadConfig Configure the RADIUS server to connect to, along with its options.
func (a *Auth) RadiusReadConfig(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusReadUser Manage users allowed to authenticate.
// name: Name of the RADIUS user.
func (a *Auth) RadiusReadUser(ctx context.Context, name string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusWriteConfig Configure the RADIUS server to connect to, along with its options.
func (a *Auth) RadiusWriteConfig(ctx context.Context, radiusWriteConfigRequest RadiusWriteConfigRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusWriteConfigRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// RadiusWriteUser Manage users allowed to authenticate.
// name: Name of the RADIUS user.
func (a *Auth) RadiusWriteUser(ctx context.Context, name string, radiusWriteUserRequest RadiusWriteUserRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{radius_mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"radius_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("radius")), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusWriteUserRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenDeleteRole
// roleName: Name of the role
func (a *Auth) TokenDeleteRole(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenListAccessors List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires 'sudo' capability in addition to 'list'.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) TokenListAccessors(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/accessors/"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenListRoles This endpoint lists configured roles.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) TokenListRoles(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/roles"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenReadLookup This endpoint will lookup a token and its properties.
func (a *Auth) TokenReadLookup(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/lookup"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenReadLookupSelf This endpoint will lookup a token and its properties.
func (a *Auth) TokenReadLookupSelf(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/lookup-self"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenReadRole
// roleName: Name of the role
func (a *Auth) TokenReadRole(ctx context.Context, roleName string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRenew This endpoint will renew the given token and prevent expiration.
func (a *Auth) TokenRenew(ctx context.Context, tokenRenewRequest TokenRenewRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/renew"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRenewAccessor This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
func (a *Auth) TokenRenewAccessor(ctx context.Context, tokenRenewAccessorRequest TokenRenewAccessorRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/renew-accessor"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewAccessorRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRenewSelf This endpoint will renew the token used to call it and prevent expiration.
func (a *Auth) TokenRenewSelf(ctx context.Context, tokenRenewSelfRequest TokenRenewSelfRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/renew-self"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewSelfRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRevoke This endpoint will delete the given token and all of its child tokens.
func (a *Auth) TokenRevoke(ctx context.Context, tokenRevokeRequest TokenRevokeRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/revoke"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRevokeAccessor This endpoint will delete the token associated with the accessor and all of its child tokens.
func (a *Auth) TokenRevokeAccessor(ctx context.Context, tokenRevokeAccessorRequest TokenRevokeAccessorRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/revoke-accessor"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeAccessorRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRevokeOrphan This endpoint will delete the token and orphan its child tokens.
func (a *Auth) TokenRevokeOrphan(ctx context.Context, tokenRevokeOrphanRequest TokenRevokeOrphanRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/revoke-orphan"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeOrphanRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenRevokeSelf This endpoint will delete the token used to call it and all of its child tokens.
func (a *Auth) TokenRevokeSelf(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/revoke-self"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenTidy This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
func (a *Auth) TokenTidy(ctx context.Context, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/tidy"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteCreate The token create path is used to create new tokens.
func (a *Auth) TokenWriteCreate(ctx context.Context, tokenWriteCreateRequest TokenWriteCreateRequest, format string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/create"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteCreateRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteCreateOrphan The token create path is used to create new orphan tokens.
func (a *Auth) TokenWriteCreateOrphan(ctx context.Context, tokenWriteCreateOrphanRequest TokenWriteCreateOrphanRequest, format string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/create-orphan"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteCreateOrphanRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteCreateWithRole This token create path is used to create new tokens adhering to the given role.
// roleName: Name of the role
func (a *Auth) TokenWriteCreateWithRole(ctx context.Context, roleName string, tokenWriteCreateWithRoleRequest TokenWriteCreateWithRoleRequest, format string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/create/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteCreateWithRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteLookup This endpoint will lookup a token and its properties.
func (a *Auth) TokenWriteLookup(ctx context.Context, tokenWriteLookupRequest TokenWriteLookupRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/lookup"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteLookupRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteLookupAccessor This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
func (a *Auth) TokenWriteLookupAccessor(ctx context.Context, tokenWriteLookupAccessorRequest TokenWriteLookupAccessorRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/lookup-accessor"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteLookupAccessorRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteLookupSelf This endpoint will lookup a token and its properties.
func (a *Auth) TokenWriteLookupSelf(ctx context.Context, tokenWriteLookupSelfRequest TokenWriteLookupSelfRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/lookup-self"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteLookupSelfRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// TokenWriteRole
// roleName: Name of the role
func (a *Auth) TokenWriteRole(ctx context.Context, roleName string, tokenWriteRoleRequest TokenWriteRoleRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{token_mount_path}/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"token_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("token")), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenWriteRoleRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassDeleteUser Manage users allowed to authenticate.
// username: Username for this user.
func (a *Auth) UserpassDeleteUser(ctx context.Context, username string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassListUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
func (a *Auth) UserpassListUsers(ctx context.Context, list string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/users"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassLogin Log in with a username and password.
// username: Username of the user.
func (a *Auth) UserpassLogin(ctx context.Context, username string, userpassLoginRequest UserpassLoginRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassLoginRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassReadUser Manage users allowed to authenticate.
// username: Username for this user.
func (a *Auth) UserpassReadUser(ctx context.Context, username string, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassWriteUser Manage users allowed to authenticate.
// username: Username for this user.
func (a *Auth) UserpassWriteUser(ctx context.Context, username string, userpassWriteUserRequest UserpassWriteUserRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassWriteUserRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassWriteUserPassword Reset user's password.
// username: Username for this user.
func (a *Auth) UserpassWriteUserPassword(ctx context.Context, username string, userpassWriteUserPasswordRequest UserpassWriteUserPasswordRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/users/{username}/password"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassWriteUserPasswordRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}

// UserpassWriteUserPolicies Update the policies associated with the username.
// username: Username for this user.
func (a *Auth) UserpassWriteUserPolicies(ctx context.Context, username string, userpassWriteUserPoliciesRequest UserpassWriteUserPoliciesRequest, options ...RequestOption) (*Response[map[string]interface{}], error) {
	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1/auth/{userpass_mount_path}/users/{username}/policies"
	requestPath = strings.Replace(requestPath, "{"+"userpass_mount_path"+"}", url.PathEscape(modifiers.mountPathOr("userpass")), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassWriteUserPoliciesRequest,
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
}
