/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// PkiKeysImportRequest struct for PkiKeysImportRequest
type PkiKeysImportRequest struct {
	// Optional name to be used for this key
	KeyName *string `json:"key_name,omitempty"`
	// PEM-format, unencrypted secret key
	PemBundle *string `json:"pem_bundle,omitempty"`
}

// NewPkiKeysImportRequest instantiates a new PkiKeysImportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkiKeysImportRequest() *PkiKeysImportRequest {
	this := PkiKeysImportRequest{}
	return &this
}

// NewPkiKeysImportRequestWithDefaults instantiates a new PkiKeysImportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkiKeysImportRequestWithDefaults() *PkiKeysImportRequest {
	this := PkiKeysImportRequest{}
	return &this
}

// GetKeyName returns the KeyName field value if set, zero value otherwise.
func (o *PkiKeysImportRequest) GetKeyName() string {
	if o == nil || o.KeyName == nil {
		var ret string
		return ret
	}
	return *o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiKeysImportRequest) GetKeyNameOk() (*string, bool) {
	if o == nil || o.KeyName == nil {
		return nil, false
	}
	return o.KeyName, true
}

// HasKeyName returns a boolean if a field has been set.
func (o *PkiKeysImportRequest) HasKeyName() bool {
	if o != nil && o.KeyName != nil {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given string and assigns it to the KeyName field.
func (o *PkiKeysImportRequest) SetKeyName(v string) {
	o.KeyName = &v
}

// GetPemBundle returns the PemBundle field value if set, zero value otherwise.
func (o *PkiKeysImportRequest) GetPemBundle() string {
	if o == nil || o.PemBundle == nil {
		var ret string
		return ret
	}
	return *o.PemBundle
}

// GetPemBundleOk returns a tuple with the PemBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PkiKeysImportRequest) GetPemBundleOk() (*string, bool) {
	if o == nil || o.PemBundle == nil {
		return nil, false
	}
	return o.PemBundle, true
}

// HasPemBundle returns a boolean if a field has been set.
func (o *PkiKeysImportRequest) HasPemBundle() bool {
	if o != nil && o.PemBundle != nil {
		return true
	}

	return false
}

// SetPemBundle gets a reference to the given string and assigns it to the PemBundle field.
func (o *PkiKeysImportRequest) SetPemBundle(v string) {
	o.PemBundle = &v
}

func (o PkiKeysImportRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyName != nil {
		toSerialize["key_name"] = o.KeyName
	}
	if o.PemBundle != nil {
		toSerialize["pem_bundle"] = o.PemBundle
	}
	return json.Marshal(toSerialize)
}

type NullablePkiKeysImportRequest struct {
	value *PkiKeysImportRequest
	isSet bool
}

func (v NullablePkiKeysImportRequest) Get() *PkiKeysImportRequest {
	return v.value
}

func (v *NullablePkiKeysImportRequest) Set(val *PkiKeysImportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePkiKeysImportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePkiKeysImportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkiKeysImportRequest(val *PkiKeysImportRequest) *NullablePkiKeysImportRequest {
	return &NullablePkiKeysImportRequest{value: val, isSet: true}
}

func (v NullablePkiKeysImportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkiKeysImportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


