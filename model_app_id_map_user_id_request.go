/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// AppIdMapUserIdRequest struct for AppIdMapUserIdRequest
type AppIdMapUserIdRequest struct {
	// If not blank, restricts auth by this CIDR block
	CidrBlock *string `json:"cidr_block,omitempty"`
	// App IDs that this user associates with.
	Value *string `json:"value,omitempty"`
}

// NewAppIdMapUserIdRequest instantiates a new AppIdMapUserIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppIdMapUserIdRequest() *AppIdMapUserIdRequest {
	this := AppIdMapUserIdRequest{}
	return &this
}

// NewAppIdMapUserIdRequestWithDefaults instantiates a new AppIdMapUserIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppIdMapUserIdRequestWithDefaults() *AppIdMapUserIdRequest {
	this := AppIdMapUserIdRequest{}
	return &this
}

// GetCidrBlock returns the CidrBlock field value if set, zero value otherwise.
func (o *AppIdMapUserIdRequest) GetCidrBlock() string {
	if o == nil || o.CidrBlock == nil {
		var ret string
		return ret
	}
	return *o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIdMapUserIdRequest) GetCidrBlockOk() (*string, bool) {
	if o == nil || o.CidrBlock == nil {
		return nil, false
	}
	return o.CidrBlock, true
}

// HasCidrBlock returns a boolean if a field has been set.
func (o *AppIdMapUserIdRequest) HasCidrBlock() bool {
	if o != nil && o.CidrBlock != nil {
		return true
	}

	return false
}

// SetCidrBlock gets a reference to the given string and assigns it to the CidrBlock field.
func (o *AppIdMapUserIdRequest) SetCidrBlock(v string) {
	o.CidrBlock = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AppIdMapUserIdRequest) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIdMapUserIdRequest) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AppIdMapUserIdRequest) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AppIdMapUserIdRequest) SetValue(v string) {
	o.Value = &v
}

func (o AppIdMapUserIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CidrBlock != nil {
		toSerialize["cidr_block"] = o.CidrBlock
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAppIdMapUserIdRequest struct {
	value *AppIdMapUserIdRequest
	isSet bool
}

func (v NullableAppIdMapUserIdRequest) Get() *AppIdMapUserIdRequest {
	return v.value
}

func (v *NullableAppIdMapUserIdRequest) Set(val *AppIdMapUserIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppIdMapUserIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppIdMapUserIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppIdMapUserIdRequest(val *AppIdMapUserIdRequest) *NullableAppIdMapUserIdRequest {
	return &NullableAppIdMapUserIdRequest{value: val, isSet: true}
}

func (v NullableAppIdMapUserIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppIdMapUserIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


