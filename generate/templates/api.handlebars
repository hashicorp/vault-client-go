{{>partial_header}}
package {{packageName}}

{{#with operations}}
import (
	"context"
	"net/http"
	"net/url"
{{#each imports}}	"{{import}}"
{{/each}}

	"github.com/hashicorp/vault-client-go/schema"
)

// {{classname}} is a simple wrapper around the client for {{classname}} requests
type {{classname}} struct {
	client *Client
}
{{#each operation}}

{{#if isDeprecated}}
// Deprecated{{/if}}
// {{operationId}} {{{summary}}}{{#if notes}}
// {{{notes}}}{{/if}}{{#each pathParams}}{{#with required}}{{#with description}}
// {{paramName}}: {{.}}{{/with}}{{/with}}{{/each}}{{#each bodyParams}}{{#with description}}
// {{paramName}}: {{.}}{{/with}}{{/each}}{{#each queryParams}}{{#neq paramName "list"}}{{#with description}}
// {{paramName}}: {{.}}{{/with}}{{/neq}}{{/each}}
func (a *{{{classname}}}) {{nickname}}(ctx context.Context{{#each pathParams}}{{#with required}}, {{paramName}} {{{dataType}}}{{/with}}{{/each}}{{#each bodyParams}}, request schema.{{{dataType}}}{{/each}}{{#each queryParams}}{{#neq paramName "list"}}, {{paramName}} {{{dataType}}}{{/neq}}{{/each}}, options ...RequestOption) (*Response[{{#with returnType}}schema.{{{.}}}{{/with}}{{#unless returnType}}map[string]interface{}{{/unless}}], error) {
	requestModifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1{{{path}}}"{{#each pathParams}}{{#unless required}}
	requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape(requestModifiers.mountPathOr({{#with defaultValue}}{{{.}}}{{/with}})), -1){{/unless}}{{/each}}{{#each pathParams}}{{#with required}}
	requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape({{paramName}}), -1){{/with}}{{/each}}

	requestQueryParameters := make(url.Values){{#each queryParams}}{{#eq paramName "list"}}
	requestQueryParameters.Set("{{paramName}}", "true"){{/eq}}{{#neq paramName "list"}}
	requestQueryParameters.Set("{{paramName}}", url.QueryEscape({{paramName}})){{/neq}}{{/each}}

{{#each bodyParams}}
	return sendStructuredRequestParseResponse[{{#with returnType}}schema.{{{.}}}{{/with}}{{#unless returnType}}map[string]interface{}{{/unless}}](
		ctx,
		a.client,
		http.Method{{httpMethod}},
		requestPath,
	 	request,
		requestQueryParameters,
		requestModifiers,
	)
{{/each}}
{{#unless bodyParams}}
	return sendRequestParseResponse[{{#with returnType}}schema.{{{.}}}{{/with}}{{#unless returnType}}map[string]interface{}{{/unless}}](
		ctx,
		a.client,
		http.Method{{httpMethod}},
		requestPath,
		nil,       // request body
		requestQueryParameters,
		requestModifiers,
	)
{{/unless}}
}
{{/each}}
{{/with}}
