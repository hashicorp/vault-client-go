/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// IdentityMfaMethodDuoRequest struct for IdentityMfaMethodDuoRequest
type IdentityMfaMethodDuoRequest struct {
	// API host name for Duo.
	ApiHostname *string `json:"api_hostname,omitempty"`
	// Integration key for Duo.
	IntegrationKey *string `json:"integration_key,omitempty"`
	// The unique identifier for this MFA method.
	MethodId *string `json:"method_id,omitempty"`
	// Push information for Duo.
	PushInfo *string `json:"push_info,omitempty"`
	// Secret key for Duo.
	SecretKey *string `json:"secret_key,omitempty"`
	// If true, the user is reminded to use the passcode upon MFA validation. This option does not enforce using the passcode. Defaults to false.
	UsePasscode *bool `json:"use_passcode,omitempty"`
	// A template string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is.
	UsernameFormat *string `json:"username_format,omitempty"`
}

// NewIdentityMfaMethodDuoRequest instantiates a new IdentityMfaMethodDuoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityMfaMethodDuoRequest() *IdentityMfaMethodDuoRequest {
	this := IdentityMfaMethodDuoRequest{}
	return &this
}

// NewIdentityMfaMethodDuoRequestWithDefaults instantiates a new IdentityMfaMethodDuoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityMfaMethodDuoRequestWithDefaults() *IdentityMfaMethodDuoRequest {
	this := IdentityMfaMethodDuoRequest{}
	return &this
}

// GetApiHostname returns the ApiHostname field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetApiHostname() string {
	if o == nil || o.ApiHostname == nil {
		var ret string
		return ret
	}
	return *o.ApiHostname
}

// GetApiHostnameOk returns a tuple with the ApiHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetApiHostnameOk() (*string, bool) {
	if o == nil || o.ApiHostname == nil {
		return nil, false
	}
	return o.ApiHostname, true
}

// HasApiHostname returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasApiHostname() bool {
	if o != nil && o.ApiHostname != nil {
		return true
	}

	return false
}

// SetApiHostname gets a reference to the given string and assigns it to the ApiHostname field.
func (o *IdentityMfaMethodDuoRequest) SetApiHostname(v string) {
	o.ApiHostname = &v
}

// GetIntegrationKey returns the IntegrationKey field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetIntegrationKey() string {
	if o == nil || o.IntegrationKey == nil {
		var ret string
		return ret
	}
	return *o.IntegrationKey
}

// GetIntegrationKeyOk returns a tuple with the IntegrationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetIntegrationKeyOk() (*string, bool) {
	if o == nil || o.IntegrationKey == nil {
		return nil, false
	}
	return o.IntegrationKey, true
}

// HasIntegrationKey returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasIntegrationKey() bool {
	if o != nil && o.IntegrationKey != nil {
		return true
	}

	return false
}

// SetIntegrationKey gets a reference to the given string and assigns it to the IntegrationKey field.
func (o *IdentityMfaMethodDuoRequest) SetIntegrationKey(v string) {
	o.IntegrationKey = &v
}

// GetMethodId returns the MethodId field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetMethodId() string {
	if o == nil || o.MethodId == nil {
		var ret string
		return ret
	}
	return *o.MethodId
}

// GetMethodIdOk returns a tuple with the MethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetMethodIdOk() (*string, bool) {
	if o == nil || o.MethodId == nil {
		return nil, false
	}
	return o.MethodId, true
}

// HasMethodId returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasMethodId() bool {
	if o != nil && o.MethodId != nil {
		return true
	}

	return false
}

// SetMethodId gets a reference to the given string and assigns it to the MethodId field.
func (o *IdentityMfaMethodDuoRequest) SetMethodId(v string) {
	o.MethodId = &v
}

// GetPushInfo returns the PushInfo field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetPushInfo() string {
	if o == nil || o.PushInfo == nil {
		var ret string
		return ret
	}
	return *o.PushInfo
}

// GetPushInfoOk returns a tuple with the PushInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetPushInfoOk() (*string, bool) {
	if o == nil || o.PushInfo == nil {
		return nil, false
	}
	return o.PushInfo, true
}

// HasPushInfo returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasPushInfo() bool {
	if o != nil && o.PushInfo != nil {
		return true
	}

	return false
}

// SetPushInfo gets a reference to the given string and assigns it to the PushInfo field.
func (o *IdentityMfaMethodDuoRequest) SetPushInfo(v string) {
	o.PushInfo = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetSecretKey() string {
	if o == nil || o.SecretKey == nil {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetSecretKeyOk() (*string, bool) {
	if o == nil || o.SecretKey == nil {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasSecretKey() bool {
	if o != nil && o.SecretKey != nil {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *IdentityMfaMethodDuoRequest) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetUsePasscode returns the UsePasscode field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetUsePasscode() bool {
	if o == nil || o.UsePasscode == nil {
		var ret bool
		return ret
	}
	return *o.UsePasscode
}

// GetUsePasscodeOk returns a tuple with the UsePasscode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetUsePasscodeOk() (*bool, bool) {
	if o == nil || o.UsePasscode == nil {
		return nil, false
	}
	return o.UsePasscode, true
}

// HasUsePasscode returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasUsePasscode() bool {
	if o != nil && o.UsePasscode != nil {
		return true
	}

	return false
}

// SetUsePasscode gets a reference to the given bool and assigns it to the UsePasscode field.
func (o *IdentityMfaMethodDuoRequest) SetUsePasscode(v bool) {
	o.UsePasscode = &v
}

// GetUsernameFormat returns the UsernameFormat field value if set, zero value otherwise.
func (o *IdentityMfaMethodDuoRequest) GetUsernameFormat() string {
	if o == nil || o.UsernameFormat == nil {
		var ret string
		return ret
	}
	return *o.UsernameFormat
}

// GetUsernameFormatOk returns a tuple with the UsernameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityMfaMethodDuoRequest) GetUsernameFormatOk() (*string, bool) {
	if o == nil || o.UsernameFormat == nil {
		return nil, false
	}
	return o.UsernameFormat, true
}

// HasUsernameFormat returns a boolean if a field has been set.
func (o *IdentityMfaMethodDuoRequest) HasUsernameFormat() bool {
	if o != nil && o.UsernameFormat != nil {
		return true
	}

	return false
}

// SetUsernameFormat gets a reference to the given string and assigns it to the UsernameFormat field.
func (o *IdentityMfaMethodDuoRequest) SetUsernameFormat(v string) {
	o.UsernameFormat = &v
}

func (o IdentityMfaMethodDuoRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiHostname != nil {
		toSerialize["api_hostname"] = o.ApiHostname
	}
	if o.IntegrationKey != nil {
		toSerialize["integration_key"] = o.IntegrationKey
	}
	if o.MethodId != nil {
		toSerialize["method_id"] = o.MethodId
	}
	if o.PushInfo != nil {
		toSerialize["push_info"] = o.PushInfo
	}
	if o.SecretKey != nil {
		toSerialize["secret_key"] = o.SecretKey
	}
	if o.UsePasscode != nil {
		toSerialize["use_passcode"] = o.UsePasscode
	}
	if o.UsernameFormat != nil {
		toSerialize["username_format"] = o.UsernameFormat
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityMfaMethodDuoRequest struct {
	value *IdentityMfaMethodDuoRequest
	isSet bool
}

func (v NullableIdentityMfaMethodDuoRequest) Get() *IdentityMfaMethodDuoRequest {
	return v.value
}

func (v *NullableIdentityMfaMethodDuoRequest) Set(val *IdentityMfaMethodDuoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityMfaMethodDuoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityMfaMethodDuoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityMfaMethodDuoRequest(val *IdentityMfaMethodDuoRequest) *NullableIdentityMfaMethodDuoRequest {
	return &NullableIdentityMfaMethodDuoRequest{value: val, isSet: true}
}

func (v NullableIdentityMfaMethodDuoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityMfaMethodDuoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


