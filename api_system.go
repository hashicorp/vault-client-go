/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// System is a simple wrapper around the client for System requests
type System struct {
	client *Client
}

// DeleteSysAuditPath Disable the audit device at the given path.
// path: The name of the backend. Cannot be delimited. Example: \&quot;mysql\&quot;
func (a *System) DeleteSysAuditPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysAuthPath Disable the auth method at the given auth path
// path: The path to mount to. Cannot be delimited. Example: \&quot;user\&quot;
func (a *System) DeleteSysAuthPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysConfigAuditingRequestHeadersHeader Disable auditing of the given request header.
func (a *System) DeleteSysConfigAuditingRequestHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysConfigCors Remove any CORS settings.
func (a *System) DeleteSysConfigCors(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/cors"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysConfigUiHeadersHeader Remove a UI header.
// header: The name of the header.
func (a *System) DeleteSysConfigUiHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysGenerateRoot Cancels any in-progress root generation attempt.
func (a *System) DeleteSysGenerateRoot(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysGenerateRootAttempt Cancels any in-progress root generation attempt.
func (a *System) DeleteSysGenerateRootAttempt(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/attempt"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysMountsPath Disable the mount point specified at the given path.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) DeleteSysMountsPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysPluginsCatalogName Remove the plugin with the given name.
// name: The name of the plugin
func (a *System) DeleteSysPluginsCatalogName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysPluginsCatalogTypeName Remove the plugin with the given name.
// name: The name of the plugin
// type_: The type of the plugin, may be auth, secret, or database
func (a *System) DeleteSysPluginsCatalogTypeName(ctx context.Context, name string, type_ string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysPoliciesAclName Delete the ACL policy with the given name.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) DeleteSysPoliciesAclName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysPoliciesPasswordName Delete a password policy.
// name: The name of the password policy.
func (a *System) DeleteSysPoliciesPasswordName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysPolicyName Delete the policy with the given name.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) DeleteSysPolicyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysQuotasRateLimitName
// name: Name of the quota rule.
func (a *System) DeleteSysQuotasRateLimitName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysRaw Delete the key with given path.
func (a *System) DeleteSysRaw(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysRawPath Delete the key with given path.
func (a *System) DeleteSysRawPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysRekeyBackup Delete the backup copy of PGP-encrypted unseal keys.
func (a *System) DeleteSysRekeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysRekeyInit Cancels any in-progress rekey.
// This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
func (a *System) DeleteSysRekeyInit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/init"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysRekeyRecoveryKeyBackup Allows fetching or deleting the backup of the rotated unseal keys.
func (a *System) DeleteSysRekeyRecoveryKeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/recovery-key-backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSysRekeyVerify Cancel any in-progress rekey verification operation.
// This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
func (a *System) DeleteSysRekeyVerify(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/verify"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysAudit List the enabled audit devices.
func (a *System) GetSysAudit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysAuth List the currently enabled credential backends.
func (a *System) GetSysAuth(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysAuthPath Read the configuration of the auth engine at the given path.
// path: The path to mount to. Cannot be delimited. Example: \&quot;user\&quot;
func (a *System) GetSysAuthPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysAuthPathTune Reads the given auth path's configuration.
// This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
// path: Tune the configuration parameters for an auth path.
func (a *System) GetSysAuthPathTune(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysConfigAuditingRequestHeaders List the request headers that are configured to be audited.
func (a *System) GetSysConfigAuditingRequestHeaders(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysConfigAuditingRequestHeadersHeader List the information for the given request header.
func (a *System) GetSysConfigAuditingRequestHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysConfigCors Return the current CORS settings.
func (a *System) GetSysConfigCors(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/cors"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysConfigStateSanitized Return a sanitized version of the Vault server configuration.
// The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
func (a *System) GetSysConfigStateSanitized(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/state/sanitized"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysConfigUiHeaders Return a list of configured UI headers.
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysConfigUiHeaders(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysConfigUiHeadersHeader Return the given UI header's configuration
// header: The name of the header.
func (a *System) GetSysConfigUiHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysGenerateRoot Read the configuration and progress of the current root generation attempt.
func (a *System) GetSysGenerateRoot(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysGenerateRootAttempt Read the configuration and progress of the current root generation attempt.
func (a *System) GetSysGenerateRootAttempt(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/attempt"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysHaStatus Check the HA status of a Vault cluster
func (a *System) GetSysHaStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/ha-status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysHealth Returns the health status of Vault.
func (a *System) GetSysHealth(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/health"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysHostInfo Information about the host instance that this Vault server is running on.
// Information about the host instance that this Vault server is running on.   The information that gets collected includes host hardware information, and CPU,   disk, and memory utilization
func (a *System) GetSysHostInfo(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/host-info"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInFlightReq reports in-flight requests
// This path responds to the following HTTP methods.   GET /    Returns a map of in-flight requests.
func (a *System) GetSysInFlightReq(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/in-flight-req"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInit Returns the initialization status of Vault.
func (a *System) GetSysInit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/init"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersActivity Report the client count metrics, for this namespace and all child namespaces.
func (a *System) GetSysInternalCountersActivity(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/activity"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersActivityExport Report the client count metrics, for this namespace and all child namespaces.
func (a *System) GetSysInternalCountersActivityExport(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/activity/export"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersActivityMonthly Report the number of clients for this month, for this namespace and all child namespaces.
func (a *System) GetSysInternalCountersActivityMonthly(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/activity/monthly"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersConfig Read the client count tracking configuration.
func (a *System) GetSysInternalCountersConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersEntities Backwards compatibility is not guaranteed for this API
func (a *System) GetSysInternalCountersEntities(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/entities"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersRequests Backwards compatibility is not guaranteed for this API
func (a *System) GetSysInternalCountersRequests(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/requests"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalCountersTokens Backwards compatibility is not guaranteed for this API
func (a *System) GetSysInternalCountersTokens(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/tokens"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalSpecsOpenapi Generate an OpenAPI 3 document of all mounted paths.
func (a *System) GetSysInternalSpecsOpenapi(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/specs/openapi"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalUiFeatureFlags Lists enabled feature flags.
func (a *System) GetSysInternalUiFeatureFlags(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/feature-flags"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalUiMounts Lists all enabled and visible auth and secrets mounts.
func (a *System) GetSysInternalUiMounts(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/mounts"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalUiMountsPath Return information about the given mount.
// path: The path of the mount.
func (a *System) GetSysInternalUiMountsPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalUiNamespaces Backwards compatibility is not guaranteed for this API
func (a *System) GetSysInternalUiNamespaces(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/namespaces"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysInternalUiResultantAcl Backwards compatibility is not guaranteed for this API
func (a *System) GetSysInternalUiResultantAcl(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/resultant-acl"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysKeyStatus Provides information about the backend encryption key.
func (a *System) GetSysKeyStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/key-status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysLeader Returns the high availability status and current leader instance of Vault.
func (a *System) GetSysLeader(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leader"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysLeases List leases associated with this Vault cluster
func (a *System) GetSysLeases(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysLeasesCount Count of leases associated with this Vault cluster
func (a *System) GetSysLeasesCount(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/count"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysLeasesLookup Returns a list of lease ids.
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysLeasesLookup(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/lookup/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysLeasesLookupPrefix Returns a list of lease ids.
// prefix: The path to list leases under. Example: \&quot;aws/creds/deploy\&quot;
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysLeasesLookupPrefix(ctx context.Context, prefix string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/lookup/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysMetrics Export the metrics aggregated for telemetry purpose.
// format: Format to export metrics into. Currently accepts only \&quot;prometheus\&quot;.
func (a *System) GetSysMetrics(ctx context.Context, format string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/metrics"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysMonitor
// logFormat: Output format of logs. Supported values are \&quot;standard\&quot; and \&quot;json\&quot;. The default is \&quot;standard\&quot;.
// logLevel: Log level to view system logs at. Currently supported values are \&quot;trace\&quot;, \&quot;debug\&quot;, \&quot;info\&quot;, \&quot;warn\&quot;, \&quot;error\&quot;.
func (a *System) GetSysMonitor(ctx context.Context, logFormat string, logLevel string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/monitor"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysMounts List the currently mounted backends.
func (a *System) GetSysMounts(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysMountsPath Read the configuration of the secret engine at the given path.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) GetSysMountsPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysMountsPathTune Tune backend configuration parameters for this mount.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) GetSysMountsPathTune(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPluginsCatalog Lists all the plugins known to Vault
func (a *System) GetSysPluginsCatalog(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPluginsCatalogName Return the configuration data for the plugin with the given name.
// name: The name of the plugin
func (a *System) GetSysPluginsCatalogName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPluginsCatalogType List the plugins in the catalog.
// type_: The type of the plugin, may be auth, secret, or database
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysPluginsCatalogType(ctx context.Context, type_ string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}"
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPluginsCatalogTypeName Return the configuration data for the plugin with the given name.
// name: The name of the plugin
// type_: The type of the plugin, may be auth, secret, or database
func (a *System) GetSysPluginsCatalogTypeName(ctx context.Context, name string, type_ string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPoliciesAcl List the configured access control policies.
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysPoliciesAcl(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPoliciesAclName Retrieve information about the named ACL policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) GetSysPoliciesAclName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPoliciesPassword List the existing password policies.
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysPoliciesPassword(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPoliciesPasswordName Retrieve an existing password policy.
// name: The name of the password policy.
func (a *System) GetSysPoliciesPasswordName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPoliciesPasswordNameGenerate Generate a password from an existing password policy.
// name: The name of the password policy.
func (a *System) GetSysPoliciesPasswordNameGenerate(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}/generate"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPolicy List the configured access control policies.
// list: Return a list if &#x60;true&#x60;
func (a *System) GetSysPolicy(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPolicyName Retrieve the policy body for the named policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) GetSysPolicyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprof Returns an HTML page listing the available profiles.
// Returns an HTML page listing the available  profiles. This should be mainly accessed via browsers or applications that can  render pages.
func (a *System) GetSysPprof(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofAllocs Returns a sampling of all past memory allocations.
// Returns a sampling of all past memory allocations.
func (a *System) GetSysPprofAllocs(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/allocs"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofBlock Returns stack traces that led to blocking on synchronization primitives
// Returns stack traces that led to blocking on synchronization primitives
func (a *System) GetSysPprofBlock(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/block"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofCmdline Returns the running program's command line.
// Returns the running program's command line, with arguments separated by NUL bytes.
func (a *System) GetSysPprofCmdline(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/cmdline"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofGoroutine Returns stack traces of all current goroutines.
// Returns stack traces of all current goroutines.
func (a *System) GetSysPprofGoroutine(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/goroutine"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofHeap Returns a sampling of memory allocations of live object.
// Returns a sampling of memory allocations of live object.
func (a *System) GetSysPprofHeap(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/heap"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofMutex Returns stack traces of holders of contended mutexes
// Returns stack traces of holders of contended mutexes
func (a *System) GetSysPprofMutex(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/mutex"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofProfile Returns a pprof-formatted cpu profile payload.
// Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
func (a *System) GetSysPprofProfile(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/profile"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofSymbol Returns the program counters listed in the request.
// Returns the program counters listed in the request.
func (a *System) GetSysPprofSymbol(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/symbol"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofThreadcreate Returns stack traces that led to the creation of new OS threads
// Returns stack traces that led to the creation of new OS threads
func (a *System) GetSysPprofThreadcreate(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/threadcreate"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysPprofTrace Returns the execution trace in binary form.
// Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
func (a *System) GetSysPprofTrace(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/trace"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysQuotasConfig
func (a *System) GetSysQuotasConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysQuotasRateLimit
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysQuotasRateLimit(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysQuotasRateLimitName
// name: Name of the quota rule.
func (a *System) GetSysQuotasRateLimitName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRaw Read the value of the key at the given path.
// list: Return a list if &#x60;true&#x60;
func (a *System) GetSysRaw(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRawPath Read the value of the key at the given path.
// list: Return a list if &#x60;true&#x60;
func (a *System) GetSysRawPath(ctx context.Context, path string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRekeyBackup Return the backup copy of PGP-encrypted unseal keys.
func (a *System) GetSysRekeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRekeyInit Reads the configuration and progress of the current rekey attempt.
func (a *System) GetSysRekeyInit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/init"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRekeyRecoveryKeyBackup Allows fetching or deleting the backup of the rotated unseal keys.
func (a *System) GetSysRekeyRecoveryKeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/recovery-key-backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRekeyVerify Read the configuration and progress of the current rekey verification attempt.
func (a *System) GetSysRekeyVerify(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/verify"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRemountStatusMigrationId Check status of a mount migration
// migrationId: The ID of the migration operation
func (a *System) GetSysRemountStatusMigrationId(ctx context.Context, migrationId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/remount/status/{migration_id}"
	requestPath = strings.Replace(requestPath, "{"+"migration_id"+"}", url.PathEscape(migrationId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysReplicationStatus
func (a *System) GetSysReplicationStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/replication/status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysRotateConfig
func (a *System) GetSysRotateConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rotate/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysSealStatus Check the seal status of a Vault.
func (a *System) GetSysSealStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/seal-status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysVersionHistory Returns map of historical version change entries
// list: Must be set to &#x60;true&#x60;
func (a *System) GetSysVersionHistory(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/version-history/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// GetSysWrappingLookup Look up wrapping properties for the requester's token.
func (a *System) GetSysWrappingLookup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/lookup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysAuditHashPath The hash of the given string via the given audit backend
// path: The name of the backend. Cannot be delimited. Example: \&quot;mysql\&quot;
func (a *System) PostSysAuditHashPath(ctx context.Context, path string, systemAuditHashRequest SystemAuditHashRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit-hash/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuditHashRequest,
		nil, // request query parameters
	)
}

// PostSysAuditPath Enable a new audit device at the supplied path.
// path: The name of the backend. Cannot be delimited. Example: \&quot;mysql\&quot;
func (a *System) PostSysAuditPath(ctx context.Context, path string, systemAuditRequest SystemAuditRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuditRequest,
		nil, // request query parameters
	)
}

// PostSysAuthPath Enables a new auth method.
// After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.  For example, enable the \"foo\" auth method will make it accessible at /auth/foo.
// path: The path to mount to. Cannot be delimited. Example: \&quot;user\&quot;
func (a *System) PostSysAuthPath(ctx context.Context, path string, systemAuthRequest SystemAuthRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuthRequest,
		nil, // request query parameters
	)
}

// PostSysAuthPathTune Tune configuration parameters for a given auth path.
// This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
// path: Tune the configuration parameters for an auth path.
func (a *System) PostSysAuthPathTune(ctx context.Context, path string, systemAuthTuneRequest SystemAuthTuneRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuthTuneRequest,
		nil, // request query parameters
	)
}

// PostSysCapabilities Fetches the capabilities of the given token on the given path.
func (a *System) PostSysCapabilities(ctx context.Context, systemCapabilitiesRequest SystemCapabilitiesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/capabilities"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemCapabilitiesRequest,
		nil, // request query parameters
	)
}

// PostSysCapabilitiesAccessor Fetches the capabilities of the token associated with the given token, on the given path.
func (a *System) PostSysCapabilitiesAccessor(ctx context.Context, systemCapabilitiesAccessorRequest SystemCapabilitiesAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/capabilities-accessor"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemCapabilitiesAccessorRequest,
		nil, // request query parameters
	)
}

// PostSysCapabilitiesSelf Fetches the capabilities of the given token on the given path.
func (a *System) PostSysCapabilitiesSelf(ctx context.Context, systemCapabilitiesSelfRequest SystemCapabilitiesSelfRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/capabilities-self"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemCapabilitiesSelfRequest,
		nil, // request query parameters
	)
}

// PostSysConfigAuditingRequestHeadersHeader Enable auditing of a header.
func (a *System) PostSysConfigAuditingRequestHeadersHeader(ctx context.Context, header string, systemConfigAuditingRequestHeadersRequest SystemConfigAuditingRequestHeadersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemConfigAuditingRequestHeadersRequest,
		nil, // request query parameters
	)
}

// PostSysConfigCors Configure the CORS settings.
func (a *System) PostSysConfigCors(ctx context.Context, systemConfigCorsRequest SystemConfigCorsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/cors"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemConfigCorsRequest,
		nil, // request query parameters
	)
}

// PostSysConfigReloadSubsystem Reload the given subsystem
func (a *System) PostSysConfigReloadSubsystem(ctx context.Context, subsystem string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/reload/{subsystem}"
	requestPath = strings.Replace(requestPath, "{"+"subsystem"+"}", url.PathEscape(subsystem), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysConfigUiHeadersHeader Configure the values to be returned for the UI header.
// header: The name of the header.
func (a *System) PostSysConfigUiHeadersHeader(ctx context.Context, header string, systemConfigUiHeadersRequest SystemConfigUiHeadersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemConfigUiHeadersRequest,
		nil, // request query parameters
	)
}

// PostSysGenerateRoot Initializes a new root generation attempt.
// Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
func (a *System) PostSysGenerateRoot(ctx context.Context, systemGenerateRootRequest SystemGenerateRootRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemGenerateRootRequest,
		nil, // request query parameters
	)
}

// PostSysGenerateRootAttempt Initializes a new root generation attempt.
// Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
func (a *System) PostSysGenerateRootAttempt(ctx context.Context, systemGenerateRootAttemptRequest SystemGenerateRootAttemptRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/attempt"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemGenerateRootAttemptRequest,
		nil, // request query parameters
	)
}

// PostSysGenerateRootUpdate Enter a single unseal key share to progress the root generation attempt.
// If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
func (a *System) PostSysGenerateRootUpdate(ctx context.Context, systemGenerateRootUpdateRequest SystemGenerateRootUpdateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/update"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemGenerateRootUpdateRequest,
		nil, // request query parameters
	)
}

// PostSysInit Initialize a new Vault.
// The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.
func (a *System) PostSysInit(ctx context.Context, systemInitRequest SystemInitRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/init"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemInitRequest,
		nil, // request query parameters
	)
}

// PostSysInternalCountersConfig Enable or disable collection of client count, set retention period, or set default reporting period.
func (a *System) PostSysInternalCountersConfig(ctx context.Context, systemInternalCountersConfigRequest SystemInternalCountersConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemInternalCountersConfigRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesLookup Retrieve lease metadata.
func (a *System) PostSysLeasesLookup(ctx context.Context, systemLeasesLookupRequest SystemLeasesLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/lookup"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesLookupRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesRenew Renews a lease, requesting to extend the lease.
func (a *System) PostSysLeasesRenew(ctx context.Context, systemLeasesRenewRequest SystemLeasesRenewRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/renew"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRenewRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesRenewUrlLeaseId Renews a lease, requesting to extend the lease.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) PostSysLeasesRenewUrlLeaseId(ctx context.Context, urlLeaseId string, systemLeasesRenewLeaseRequest SystemLeasesRenewLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/renew/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRenewLeaseRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesRevoke Revokes a lease immediately.
func (a *System) PostSysLeasesRevoke(ctx context.Context, systemLeasesRevokeRequest SystemLeasesRevokeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRevokeRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesRevokeForcePrefix Revokes all secrets or tokens generated under a given prefix immediately
// Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) PostSysLeasesRevokeForcePrefix(ctx context.Context, prefix string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke-force/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysLeasesRevokePrefixPrefix Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) PostSysLeasesRevokePrefixPrefix(ctx context.Context, prefix string, systemLeasesRevokePrefixRequest SystemLeasesRevokePrefixRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke-prefix/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRevokePrefixRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesRevokeUrlLeaseId Revokes a lease immediately.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) PostSysLeasesRevokeUrlLeaseId(ctx context.Context, urlLeaseId string, systemLeasesRevokeLeaseRequest SystemLeasesRevokeLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRevokeLeaseRequest,
		nil, // request query parameters
	)
}

// PostSysLeasesTidy This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
func (a *System) PostSysLeasesTidy(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/tidy"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysMfaValidate Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
func (a *System) PostSysMfaValidate(ctx context.Context, systemMfaValidateRequest SystemMfaValidateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mfa/validate"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemMfaValidateRequest,
		nil, // request query parameters
	)
}

// PostSysMountsPath Enable a new secrets engine at the given path.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) PostSysMountsPath(ctx context.Context, path string, systemMountsRequest SystemMountsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemMountsRequest,
		nil, // request query parameters
	)
}

// PostSysMountsPathTune Tune backend configuration parameters for this mount.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) PostSysMountsPathTune(ctx context.Context, path string, systemMountsTuneRequest SystemMountsTuneRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemMountsTuneRequest,
		nil, // request query parameters
	)
}

// PostSysPluginsCatalogName Register a new plugin, or updates an existing one with the supplied name.
// name: The name of the plugin
func (a *System) PostSysPluginsCatalogName(ctx context.Context, name string, systemPluginsCatalogRequest SystemPluginsCatalogRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPluginsCatalogRequest,
		nil, // request query parameters
	)
}

// PostSysPluginsCatalogTypeName Register a new plugin, or updates an existing one with the supplied name.
// name: The name of the plugin
// type_: The type of the plugin, may be auth, secret, or database
func (a *System) PostSysPluginsCatalogTypeName(ctx context.Context, name string, type_ string, systemPluginsCatalogRequest SystemPluginsCatalogRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPluginsCatalogRequest,
		nil, // request query parameters
	)
}

// PostSysPluginsReloadBackend Reload mounted plugin backends.
// Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
func (a *System) PostSysPluginsReloadBackend(ctx context.Context, systemPluginsReloadBackendRequest SystemPluginsReloadBackendRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/reload/backend"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPluginsReloadBackendRequest,
		nil, // request query parameters
	)
}

// PostSysPoliciesAclName Add a new or update an existing ACL policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) PostSysPoliciesAclName(ctx context.Context, name string, systemPoliciesAclRequest SystemPoliciesAclRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPoliciesAclRequest,
		nil, // request query parameters
	)
}

// PostSysPoliciesPasswordName Add a new or update an existing password policy.
// name: The name of the password policy.
func (a *System) PostSysPoliciesPasswordName(ctx context.Context, name string, systemPoliciesPasswordRequest SystemPoliciesPasswordRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPoliciesPasswordRequest,
		nil, // request query parameters
	)
}

// PostSysPolicyName Add a new or update an existing policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) PostSysPolicyName(ctx context.Context, name string, systemPolicyRequest SystemPolicyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPolicyRequest,
		nil, // request query parameters
	)
}

// PostSysQuotasConfig
func (a *System) PostSysQuotasConfig(ctx context.Context, systemQuotasConfigRequest SystemQuotasConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemQuotasConfigRequest,
		nil, // request query parameters
	)
}

// PostSysQuotasRateLimitName
// name: Name of the quota rule.
func (a *System) PostSysQuotasRateLimitName(ctx context.Context, name string, systemQuotasRateLimitRequest SystemQuotasRateLimitRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemQuotasRateLimitRequest,
		nil, // request query parameters
	)
}

// PostSysRaw Update the value of the key at the given path.
func (a *System) PostSysRaw(ctx context.Context, systemRawRequest SystemRawRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRawRequest,
		nil, // request query parameters
	)
}

// PostSysRawPath Update the value of the key at the given path.
func (a *System) PostSysRawPath(ctx context.Context, path string, systemRawRequest SystemRawRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRawRequest,
		nil, // request query parameters
	)
}

// PostSysRekeyInit Initializes a new rekey attempt.
// Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
func (a *System) PostSysRekeyInit(ctx context.Context, systemRekeyInitRequest SystemRekeyInitRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/init"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRekeyInitRequest,
		nil, // request query parameters
	)
}

// PostSysRekeyUpdate Enter a single unseal key share to progress the rekey of the Vault.
func (a *System) PostSysRekeyUpdate(ctx context.Context, systemRekeyUpdateRequest SystemRekeyUpdateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/update"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRekeyUpdateRequest,
		nil, // request query parameters
	)
}

// PostSysRekeyVerify Enter a single new key share to progress the rekey verification operation.
func (a *System) PostSysRekeyVerify(ctx context.Context, systemRekeyVerifyRequest SystemRekeyVerifyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/verify"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRekeyVerifyRequest,
		nil, // request query parameters
	)
}

// PostSysRemount Initiate a mount migration
func (a *System) PostSysRemount(ctx context.Context, systemRemountRequest SystemRemountRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/remount"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRemountRequest,
		nil, // request query parameters
	)
}

// PostSysRenew Renews a lease, requesting to extend the lease.
func (a *System) PostSysRenew(ctx context.Context, systemRenewRequest SystemRenewRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/renew"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRenewRequest,
		nil, // request query parameters
	)
}

// PostSysRenewUrlLeaseId Renews a lease, requesting to extend the lease.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) PostSysRenewUrlLeaseId(ctx context.Context, urlLeaseId string, systemRenewLeaseRequest SystemRenewLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/renew/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRenewLeaseRequest,
		nil, // request query parameters
	)
}

// PostSysRevoke Revokes a lease immediately.
func (a *System) PostSysRevoke(ctx context.Context, systemRevokeRequest SystemRevokeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRevokeRequest,
		nil, // request query parameters
	)
}

// PostSysRevokeForcePrefix Revokes all secrets or tokens generated under a given prefix immediately
// Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) PostSysRevokeForcePrefix(ctx context.Context, prefix string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke-force/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysRevokePrefixPrefix Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) PostSysRevokePrefixPrefix(ctx context.Context, prefix string, systemRevokePrefixRequest SystemRevokePrefixRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke-prefix/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRevokePrefixRequest,
		nil, // request query parameters
	)
}

// PostSysRevokeUrlLeaseId Revokes a lease immediately.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) PostSysRevokeUrlLeaseId(ctx context.Context, urlLeaseId string, systemRevokeLeaseRequest SystemRevokeLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRevokeLeaseRequest,
		nil, // request query parameters
	)
}

// PostSysRotate Rotates the backend encryption key used to persist data.
func (a *System) PostSysRotate(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rotate"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysRotateConfig
func (a *System) PostSysRotateConfig(ctx context.Context, systemRotateConfigRequest SystemRotateConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rotate/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRotateConfigRequest,
		nil, // request query parameters
	)
}

// PostSysSeal Seal the Vault.
func (a *System) PostSysSeal(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/seal"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysStepDown Cause the node to give up active status.
// This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
func (a *System) PostSysStepDown(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/step-down"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// PostSysToolsHash Generate a hash sum for input data
func (a *System) PostSysToolsHash(ctx context.Context, systemToolsHashRequest SystemToolsHashRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/hash"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsHashRequest,
		nil, // request query parameters
	)
}

// PostSysToolsHashUrlalgorithm Generate a hash sum for input data
// urlalgorithm: Algorithm to use (POST URL parameter)
func (a *System) PostSysToolsHashUrlalgorithm(ctx context.Context, urlalgorithm string, systemToolsHashRequest SystemToolsHashRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/hash/{urlalgorithm}"
	requestPath = strings.Replace(requestPath, "{"+"urlalgorithm"+"}", url.PathEscape(urlalgorithm), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsHashRequest,
		nil, // request query parameters
	)
}

// PostSysToolsRandom Generate random bytes
func (a *System) PostSysToolsRandom(ctx context.Context, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// PostSysToolsRandomSource Generate random bytes
// source: Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.
func (a *System) PostSysToolsRandomSource(ctx context.Context, source string, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random/{source}"
	requestPath = strings.Replace(requestPath, "{"+"source"+"}", url.PathEscape(source), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// PostSysToolsRandomSourceUrlbytes Generate random bytes
// source: Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.
// urlbytes: The number of bytes to generate (POST URL parameter)
func (a *System) PostSysToolsRandomSourceUrlbytes(ctx context.Context, source string, urlbytes string, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random/{source}/{urlbytes}"
	requestPath = strings.Replace(requestPath, "{"+"source"+"}", url.PathEscape(source), -1)
	requestPath = strings.Replace(requestPath, "{"+"urlbytes"+"}", url.PathEscape(urlbytes), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// PostSysToolsRandomUrlbytes Generate random bytes
// urlbytes: The number of bytes to generate (POST URL parameter)
func (a *System) PostSysToolsRandomUrlbytes(ctx context.Context, urlbytes string, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random/{urlbytes}"
	requestPath = strings.Replace(requestPath, "{"+"urlbytes"+"}", url.PathEscape(urlbytes), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// PostSysUnseal Unseal the Vault.
func (a *System) PostSysUnseal(ctx context.Context, systemUnsealRequest SystemUnsealRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/unseal"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemUnsealRequest,
		nil, // request query parameters
	)
}

// PostSysWrappingLookup Look up wrapping properties for the given token.
func (a *System) PostSysWrappingLookup(ctx context.Context, systemWrappingLookupRequest SystemWrappingLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/lookup"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemWrappingLookupRequest,
		nil, // request query parameters
	)
}

// PostSysWrappingRewrap Rotates a response-wrapped token.
func (a *System) PostSysWrappingRewrap(ctx context.Context, systemWrappingRewrapRequest SystemWrappingRewrapRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/rewrap"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemWrappingRewrapRequest,
		nil, // request query parameters
	)
}

// PostSysWrappingUnwrap Unwraps a response-wrapped token.
func (a *System) PostSysWrappingUnwrap(ctx context.Context, systemWrappingUnwrapRequest SystemWrappingUnwrapRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/unwrap"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemWrappingUnwrapRequest,
		nil, // request query parameters
	)
}

// PostSysWrappingWrap Response-wraps an arbitrary JSON object.
func (a *System) PostSysWrappingWrap(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/wrap"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}
