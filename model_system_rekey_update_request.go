/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// SystemRekeyUpdateRequest struct for SystemRekeyUpdateRequest
type SystemRekeyUpdateRequest struct {
	// Specifies a single unseal key share.
	Key *string `json:"key,omitempty"`
	// Specifies the nonce of the rekey attempt.
	Nonce *string `json:"nonce,omitempty"`
}

// NewSystemRekeyUpdateRequest instantiates a new SystemRekeyUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemRekeyUpdateRequest() *SystemRekeyUpdateRequest {
	this := SystemRekeyUpdateRequest{}
	return &this
}

// NewSystemRekeyUpdateRequestWithDefaults instantiates a new SystemRekeyUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemRekeyUpdateRequestWithDefaults() *SystemRekeyUpdateRequest {
	this := SystemRekeyUpdateRequest{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SystemRekeyUpdateRequest) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemRekeyUpdateRequest) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SystemRekeyUpdateRequest) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SystemRekeyUpdateRequest) SetKey(v string) {
	o.Key = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *SystemRekeyUpdateRequest) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemRekeyUpdateRequest) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *SystemRekeyUpdateRequest) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *SystemRekeyUpdateRequest) SetNonce(v string) {
	o.Nonce = &v
}

func (o SystemRekeyUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	return json.Marshal(toSerialize)
}

type NullableSystemRekeyUpdateRequest struct {
	value *SystemRekeyUpdateRequest
	isSet bool
}

func (v NullableSystemRekeyUpdateRequest) Get() *SystemRekeyUpdateRequest {
	return v.value
}

func (v *NullableSystemRekeyUpdateRequest) Set(val *SystemRekeyUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemRekeyUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemRekeyUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemRekeyUpdateRequest(val *SystemRekeyUpdateRequest) *NullableSystemRekeyUpdateRequest {
	return &NullableSystemRekeyUpdateRequest{value: val, isSet: true}
}

func (v NullableSystemRekeyUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemRekeyUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


