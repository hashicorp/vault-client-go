/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// GcpRoleLabelsRequest struct for GcpRoleLabelsRequest
type GcpRoleLabelsRequest struct {
	// BoundLabels to add (in $key:$value)
	Add []string `json:"add,omitempty"`
	// Label key values to remove
	Remove []string `json:"remove,omitempty"`
}

// NewGcpRoleLabelsRequest instantiates a new GcpRoleLabelsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpRoleLabelsRequest() *GcpRoleLabelsRequest {
	this := GcpRoleLabelsRequest{}
	return &this
}

// NewGcpRoleLabelsRequestWithDefaults instantiates a new GcpRoleLabelsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpRoleLabelsRequestWithDefaults() *GcpRoleLabelsRequest {
	this := GcpRoleLabelsRequest{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *GcpRoleLabelsRequest) GetAdd() []string {
	if o == nil || o.Add == nil {
		var ret []string
		return ret
	}
	return o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleLabelsRequest) GetAddOk() ([]string, bool) {
	if o == nil || o.Add == nil {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *GcpRoleLabelsRequest) HasAdd() bool {
	if o != nil && o.Add != nil {
		return true
	}

	return false
}

// SetAdd gets a reference to the given []string and assigns it to the Add field.
func (o *GcpRoleLabelsRequest) SetAdd(v []string) {
	o.Add = v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *GcpRoleLabelsRequest) GetRemove() []string {
	if o == nil || o.Remove == nil {
		var ret []string
		return ret
	}
	return o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRoleLabelsRequest) GetRemoveOk() ([]string, bool) {
	if o == nil || o.Remove == nil {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *GcpRoleLabelsRequest) HasRemove() bool {
	if o != nil && o.Remove != nil {
		return true
	}

	return false
}

// SetRemove gets a reference to the given []string and assigns it to the Remove field.
func (o *GcpRoleLabelsRequest) SetRemove(v []string) {
	o.Remove = v
}

func (o GcpRoleLabelsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Add != nil {
		toSerialize["add"] = o.Add
	}
	if o.Remove != nil {
		toSerialize["remove"] = o.Remove
	}
	return json.Marshal(toSerialize)
}

type NullableGcpRoleLabelsRequest struct {
	value *GcpRoleLabelsRequest
	isSet bool
}

func (v NullableGcpRoleLabelsRequest) Get() *GcpRoleLabelsRequest {
	return v.value
}

func (v *NullableGcpRoleLabelsRequest) Set(val *GcpRoleLabelsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpRoleLabelsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpRoleLabelsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpRoleLabelsRequest(val *GcpRoleLabelsRequest) *NullableGcpRoleLabelsRequest {
	return &NullableGcpRoleLabelsRequest{value: val, isSet: true}
}

func (v NullableGcpRoleLabelsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpRoleLabelsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


