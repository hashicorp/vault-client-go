/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// AwsConfigCertificateRequest struct for AwsConfigCertificateRequest
type AwsConfigCertificateRequest struct {
	// Base64 encoded AWS Public cert required to verify PKCS7 signature of the EC2 instance metadata.
	AwsPublicCert *string `json:"aws_public_cert,omitempty"`
	// Takes the value of either \"pkcs7\" or \"identity\", indicating the type of document which can be verified using the given certificate. The reason is that the PKCS#7 document will have a DSA digest and the identity signature will have an RSA signature, and accordingly the public certificates to verify those also vary. Defaults to \"pkcs7\".
	Type *string `json:"type,omitempty"`
}

// NewAwsConfigCertificateRequest instantiates a new AwsConfigCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsConfigCertificateRequest() *AwsConfigCertificateRequest {
	this := AwsConfigCertificateRequest{}
	var type_ string = "pkcs7"
	this.Type = &type_
	return &this
}

// NewAwsConfigCertificateRequestWithDefaults instantiates a new AwsConfigCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsConfigCertificateRequestWithDefaults() *AwsConfigCertificateRequest {
	this := AwsConfigCertificateRequest{}
	var type_ string = "pkcs7"
	this.Type = &type_
	return &this
}

// GetAwsPublicCert returns the AwsPublicCert field value if set, zero value otherwise.
func (o *AwsConfigCertificateRequest) GetAwsPublicCert() string {
	if o == nil || o.AwsPublicCert == nil {
		var ret string
		return ret
	}
	return *o.AwsPublicCert
}

// GetAwsPublicCertOk returns a tuple with the AwsPublicCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigCertificateRequest) GetAwsPublicCertOk() (*string, bool) {
	if o == nil || o.AwsPublicCert == nil {
		return nil, false
	}
	return o.AwsPublicCert, true
}

// HasAwsPublicCert returns a boolean if a field has been set.
func (o *AwsConfigCertificateRequest) HasAwsPublicCert() bool {
	if o != nil && o.AwsPublicCert != nil {
		return true
	}

	return false
}

// SetAwsPublicCert gets a reference to the given string and assigns it to the AwsPublicCert field.
func (o *AwsConfigCertificateRequest) SetAwsPublicCert(v string) {
	o.AwsPublicCert = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AwsConfigCertificateRequest) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigCertificateRequest) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AwsConfigCertificateRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AwsConfigCertificateRequest) SetType(v string) {
	o.Type = &v
}

func (o AwsConfigCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsPublicCert != nil {
		toSerialize["aws_public_cert"] = o.AwsPublicCert
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAwsConfigCertificateRequest struct {
	value *AwsConfigCertificateRequest
	isSet bool
}

func (v NullableAwsConfigCertificateRequest) Get() *AwsConfigCertificateRequest {
	return v.value
}

func (v *NullableAwsConfigCertificateRequest) Set(val *AwsConfigCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsConfigCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsConfigCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsConfigCertificateRequest(val *AwsConfigCertificateRequest) *NullableAwsConfigCertificateRequest {
	return &NullableAwsConfigCertificateRequest{value: val, isSet: true}
}

func (v NullableAwsConfigCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsConfigCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


