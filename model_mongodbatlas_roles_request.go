/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// MongodbatlasRolesRequest struct for MongodbatlasRolesRequest
type MongodbatlasRolesRequest struct {
	// Access list entry in CIDR notation to be added for the API key. Optional for organization and project keys.
	CidrBlocks []string `json:"cidr_blocks,omitempty"`
	// IP address to be added to the access list for the API key. Optional for organization and project keys.
	IpAddresses []string `json:"ip_addresses,omitempty"`
	// The maximum allowed lifetime of credentials issued using this role.
	MaxTtl *int32 `json:"max_ttl,omitempty"`
	// Organization ID required for an organization API key
	OrganizationId *string `json:"organization_id,omitempty"`
	// Project ID the project API key belongs to.
	ProjectId *string `json:"project_id,omitempty"`
	// Roles assigned when an organization API Key is assigned to a project API key
	ProjectRoles []string `json:"project_roles,omitempty"`
	// List of roles that the API Key should be granted. A minimum of one role must be provided. Any roles provided must be valid for the assigned Project, required for organization and project keys.
	Roles []string `json:"roles"`
	// Duration in seconds after which the issued credential should expire. Defaults to 0, in which case the value will fallback to the system/mount defaults.
	Ttl *int32 `json:"ttl,omitempty"`
}

// NewMongodbatlasRolesRequest instantiates a new MongodbatlasRolesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongodbatlasRolesRequest(roles []string) *MongodbatlasRolesRequest {
	this := MongodbatlasRolesRequest{}
	this.Roles = roles
	return &this
}

// NewMongodbatlasRolesRequestWithDefaults instantiates a new MongodbatlasRolesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongodbatlasRolesRequestWithDefaults() *MongodbatlasRolesRequest {
	this := MongodbatlasRolesRequest{}
	return &this
}

// GetCidrBlocks returns the CidrBlocks field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetCidrBlocks() []string {
	if o == nil || o.CidrBlocks == nil {
		var ret []string
		return ret
	}
	return o.CidrBlocks
}

// GetCidrBlocksOk returns a tuple with the CidrBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetCidrBlocksOk() ([]string, bool) {
	if o == nil || o.CidrBlocks == nil {
		return nil, false
	}
	return o.CidrBlocks, true
}

// HasCidrBlocks returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasCidrBlocks() bool {
	if o != nil && o.CidrBlocks != nil {
		return true
	}

	return false
}

// SetCidrBlocks gets a reference to the given []string and assigns it to the CidrBlocks field.
func (o *MongodbatlasRolesRequest) SetCidrBlocks(v []string) {
	o.CidrBlocks = v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetIpAddresses() []string {
	if o == nil || o.IpAddresses == nil {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetIpAddressesOk() ([]string, bool) {
	if o == nil || o.IpAddresses == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasIpAddresses() bool {
	if o != nil && o.IpAddresses != nil {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *MongodbatlasRolesRequest) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetMaxTtl() int32 {
	if o == nil || o.MaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetMaxTtlOk() (*int32, bool) {
	if o == nil || o.MaxTtl == nil {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasMaxTtl() bool {
	if o != nil && o.MaxTtl != nil {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given int32 and assigns it to the MaxTtl field.
func (o *MongodbatlasRolesRequest) SetMaxTtl(v int32) {
	o.MaxTtl = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetOrganizationIdOk() (*string, bool) {
	if o == nil || o.OrganizationId == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *MongodbatlasRolesRequest) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *MongodbatlasRolesRequest) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetProjectRoles returns the ProjectRoles field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetProjectRoles() []string {
	if o == nil || o.ProjectRoles == nil {
		var ret []string
		return ret
	}
	return o.ProjectRoles
}

// GetProjectRolesOk returns a tuple with the ProjectRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetProjectRolesOk() ([]string, bool) {
	if o == nil || o.ProjectRoles == nil {
		return nil, false
	}
	return o.ProjectRoles, true
}

// HasProjectRoles returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasProjectRoles() bool {
	if o != nil && o.ProjectRoles != nil {
		return true
	}

	return false
}

// SetProjectRoles gets a reference to the given []string and assigns it to the ProjectRoles field.
func (o *MongodbatlasRolesRequest) SetProjectRoles(v []string) {
	o.ProjectRoles = v
}

// GetRoles returns the Roles field value
func (o *MongodbatlasRolesRequest) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetRolesOk() ([]string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *MongodbatlasRolesRequest) SetRoles(v []string) {
	o.Roles = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *MongodbatlasRolesRequest) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongodbatlasRolesRequest) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *MongodbatlasRolesRequest) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *MongodbatlasRolesRequest) SetTtl(v int32) {
	o.Ttl = &v
}

func (o MongodbatlasRolesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CidrBlocks != nil {
		toSerialize["cidr_blocks"] = o.CidrBlocks
	}
	if o.IpAddresses != nil {
		toSerialize["ip_addresses"] = o.IpAddresses
	}
	if o.MaxTtl != nil {
		toSerialize["max_ttl"] = o.MaxTtl
	}
	if o.OrganizationId != nil {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if o.ProjectId != nil {
		toSerialize["project_id"] = o.ProjectId
	}
	if o.ProjectRoles != nil {
		toSerialize["project_roles"] = o.ProjectRoles
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableMongodbatlasRolesRequest struct {
	value *MongodbatlasRolesRequest
	isSet bool
}

func (v NullableMongodbatlasRolesRequest) Get() *MongodbatlasRolesRequest {
	return v.value
}

func (v *NullableMongodbatlasRolesRequest) Set(val *MongodbatlasRolesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMongodbatlasRolesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMongodbatlasRolesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongodbatlasRolesRequest(val *MongodbatlasRolesRequest) *NullableMongodbatlasRolesRequest {
	return &NullableMongodbatlasRolesRequest{value: val, isSet: true}
}

func (v NullableMongodbatlasRolesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongodbatlasRolesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


