/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Identity is a simple wrapper around the client for Identity requests
type Identity struct {
	client *Client
}

// DeleteIdentityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) DeleteIdentityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityEntityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) DeleteIdentityEntityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityEntityIdId Update, read or delete an entity using entity ID
// id: ID of the entity. If set, updates the corresponding existing entity.
func (a *Identity) DeleteIdentityEntityIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityEntityNameName Update, read or delete an entity using entity name
// name: Name of the entity
func (a *Identity) DeleteIdentityEntityNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityGroupAliasIdId
// id: ID of the group alias.
func (a *Identity) DeleteIdentityGroupAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityGroupIdId Update or delete an existing group using its ID.
// id: ID of the group. If set, updates the corresponding existing group.
func (a *Identity) DeleteIdentityGroupIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityGroupNameName
// name: Name of the group.
func (a *Identity) DeleteIdentityGroupNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaLoginEnforcementName Delete a login enforcement
// name: Name for this login enforcement configuration
func (a *Identity) DeleteIdentityMfaLoginEnforcementName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodDuoMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodDuoMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodOktaMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodOktaMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodPingidMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodPingidMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityMfaMethodTotpMethodId Delete a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) DeleteIdentityMfaMethodTotpMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcAssignmentName
// name: Name of the assignment
func (a *Identity) DeleteIdentityOidcAssignmentName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcClientName
// name: Name of the client.
func (a *Identity) DeleteIdentityOidcClientName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcKeyName CRUD operations for OIDC keys.
// name: Name of the key
func (a *Identity) DeleteIdentityOidcKeyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcProviderName
// name: Name of the provider
func (a *Identity) DeleteIdentityOidcProviderName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcRoleName CRUD operations on OIDC Roles
// name: Name of the role
func (a *Identity) DeleteIdentityOidcRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityOidcScopeName
// name: Name of the scope
func (a *Identity) DeleteIdentityOidcScopeName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteIdentityPersonaIdId Update, read or delete an alias ID.
// id: ID of the persona
func (a *Identity) DeleteIdentityPersonaIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityAliasId List all the alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityAliasId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityEntityAliasId List all the alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityEntityAliasId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityEntityId List all the entity IDs
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityEntityId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityEntityName List all the entity names
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityEntityName(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityGroupAliasId List all the group alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityGroupAliasId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityGroupId List all the group IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityGroupId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityGroupName
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityGroupName(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityMfaLoginEnforcement List login enforcements
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityMfaLoginEnforcement(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityMfaMethod List MFA method configurations for all MFA methods
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityMfaMethod(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityMfaMethodDuo List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityMfaMethodDuo(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityMfaMethodOkta List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityMfaMethodOkta(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityMfaMethodPingid List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityMfaMethodPingid(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityMfaMethodTotp List MFA method configurations for the given MFA method
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityMfaMethodTotp(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityOidcAssignment
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityOidcAssignment(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityOidcClient
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityOidcClient(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityOidcKey List OIDC keys
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityOidcKey(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityOidcProvider
// list: Must be set to &#x60;true&#x60;
// allowedClientId: Filters the list of OIDC providers to those that allow the given client ID in their set of allowed_client_ids.
func (a *Identity) ListIdentityOidcProvider(ctx context.Context, list string, allowedClientId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityOidcRole List configured OIDC roles
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityOidcRole(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityOidcScope
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityOidcScope(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListIdentityPersonaId List all the alias IDs.
// list: Must be set to &#x60;true&#x60;
func (a *Identity) ListIdentityPersonaId(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) ReadIdentityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityEntityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) ReadIdentityEntityAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityEntityIdId Update, read or delete an entity using entity ID
// id: ID of the entity. If set, updates the corresponding existing entity.
func (a *Identity) ReadIdentityEntityIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityEntityNameName Update, read or delete an entity using entity name
// name: Name of the entity
func (a *Identity) ReadIdentityEntityNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityGroupAliasIdId
// id: ID of the group alias.
func (a *Identity) ReadIdentityGroupAliasIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityGroupIdId Update or delete an existing group using its ID.
// id: ID of the group. If set, updates the corresponding existing group.
func (a *Identity) ReadIdentityGroupIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityGroupNameName
// name: Name of the group.
func (a *Identity) ReadIdentityGroupNameName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityMfaLoginEnforcementName Read the current login enforcement
// name: Name for this login enforcement configuration
func (a *Identity) ReadIdentityMfaLoginEnforcementName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityMfaMethodDuoMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) ReadIdentityMfaMethodDuoMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityMfaMethodMethodId Read the current configuration for the given ID regardless of the MFA method type
// methodId: The unique identifier for this MFA method.
func (a *Identity) ReadIdentityMfaMethodMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityMfaMethodOktaMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) ReadIdentityMfaMethodOktaMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityMfaMethodPingidMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) ReadIdentityMfaMethodPingidMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityMfaMethodTotpMethodId Read the current configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) ReadIdentityMfaMethodTotpMethodId(ctx context.Context, methodId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcAssignmentName
// name: Name of the assignment
func (a *Identity) ReadIdentityOidcAssignmentName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcClientName
// name: Name of the client.
func (a *Identity) ReadIdentityOidcClientName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcConfig OIDC configuration
func (a *Identity) ReadIdentityOidcConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcKeyName CRUD operations for OIDC keys.
// name: Name of the key
func (a *Identity) ReadIdentityOidcKeyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcProviderName
// name: Name of the provider
func (a *Identity) ReadIdentityOidcProviderName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcProviderNameAuthorize
// name: Name of the provider
func (a *Identity) ReadIdentityOidcProviderNameAuthorize(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/authorize"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcProviderNameUserinfo
// name: Name of the provider
func (a *Identity) ReadIdentityOidcProviderNameUserinfo(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/userinfo"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcProviderNameWellKnownKeys
// name: Name of the provider
func (a *Identity) ReadIdentityOidcProviderNameWellKnownKeys(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/.well-known/keys"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcProviderNameWellKnownOpenidConfiguration
// name: Name of the provider
func (a *Identity) ReadIdentityOidcProviderNameWellKnownOpenidConfiguration(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/.well-known/openid-configuration"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcRoleName CRUD operations on OIDC Roles
// name: Name of the role
func (a *Identity) ReadIdentityOidcRoleName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcScopeName
// name: Name of the scope
func (a *Identity) ReadIdentityOidcScopeName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcTokenName Generate an OIDC token
// name: Name of the role
func (a *Identity) ReadIdentityOidcTokenName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/token/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcWellKnownKeys Retrieve public keys
func (a *Identity) ReadIdentityOidcWellKnownKeys(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/.well-known/keys"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityOidcWellKnownOpenidConfiguration Query OIDC configurations
func (a *Identity) ReadIdentityOidcWellKnownOpenidConfiguration(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/.well-known/openid-configuration"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadIdentityPersonaIdId Update, read or delete an alias ID.
// id: ID of the persona
func (a *Identity) ReadIdentityPersonaIdId(ctx context.Context, id string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateIdentityAlias Create a new alias.
func (a *Identity) UpdateIdentityAlias(ctx context.Context, identityAliasRequest IdentityAliasRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityAliasRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) UpdateIdentityAliasIdId(ctx context.Context, id string, identityAliasIdRequest IdentityAliasIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityAliasIdRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntity Create a new entity
func (a *Identity) UpdateIdentityEntity(ctx context.Context, identityEntityRequest IdentityEntityRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntityAlias Create a new alias.
func (a *Identity) UpdateIdentityEntityAlias(ctx context.Context, identityEntityAliasRequest IdentityEntityAliasRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityAliasRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntityAliasIdId Update, read or delete an alias ID.
// id: ID of the alias
func (a *Identity) UpdateIdentityEntityAliasIdId(ctx context.Context, id string, identityEntityAliasIdRequest IdentityEntityAliasIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityAliasIdRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntityBatchDelete Delete all of the entities provided
func (a *Identity) UpdateIdentityEntityBatchDelete(ctx context.Context, identityEntityBatchDeleteRequest IdentityEntityBatchDeleteRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/batch-delete"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityBatchDeleteRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntityIdId Update, read or delete an entity using entity ID
// id: ID of the entity. If set, updates the corresponding existing entity.
func (a *Identity) UpdateIdentityEntityIdId(ctx context.Context, id string, identityEntityIdRequest IdentityEntityIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityIdRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntityMerge Merge two or more entities together
func (a *Identity) UpdateIdentityEntityMerge(ctx context.Context, identityEntityMergeRequest IdentityEntityMergeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/merge"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityMergeRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityEntityNameName Update, read or delete an entity using entity name
// name: Name of the entity
func (a *Identity) UpdateIdentityEntityNameName(ctx context.Context, name string, identityEntityNameRequest IdentityEntityNameRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/entity/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityEntityNameRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityGroup Create a new group.
func (a *Identity) UpdateIdentityGroup(ctx context.Context, identityGroupRequest IdentityGroupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityGroupAlias Creates a new group alias, or updates an existing one.
func (a *Identity) UpdateIdentityGroupAlias(ctx context.Context, identityGroupAliasRequest IdentityGroupAliasRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupAliasRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityGroupAliasIdId
// id: ID of the group alias.
func (a *Identity) UpdateIdentityGroupAliasIdId(ctx context.Context, id string, identityGroupAliasIdRequest IdentityGroupAliasIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group-alias/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupAliasIdRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityGroupIdId Update or delete an existing group using its ID.
// id: ID of the group. If set, updates the corresponding existing group.
func (a *Identity) UpdateIdentityGroupIdId(ctx context.Context, id string, identityGroupIdRequest IdentityGroupIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupIdRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityGroupNameName
// name: Name of the group.
func (a *Identity) UpdateIdentityGroupNameName(ctx context.Context, name string, identityGroupNameRequest IdentityGroupNameRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/group/name/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityGroupNameRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityLookupEntity Query entities based on various properties.
func (a *Identity) UpdateIdentityLookupEntity(ctx context.Context, identityLookupEntityRequest IdentityLookupEntityRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/lookup/entity"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityLookupEntityRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityLookupGroup Query groups based on various properties.
func (a *Identity) UpdateIdentityLookupGroup(ctx context.Context, identityLookupGroupRequest IdentityLookupGroupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/lookup/group"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityLookupGroupRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaLoginEnforcementName Create or update a login enforcement
// name: Name for this login enforcement configuration
func (a *Identity) UpdateIdentityMfaLoginEnforcementName(ctx context.Context, name string, identityMfaLoginEnforcementRequest IdentityMfaLoginEnforcementRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/login-enforcement/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaLoginEnforcementRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodDuoMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) UpdateIdentityMfaMethodDuoMethodId(ctx context.Context, methodId string, identityMfaMethodDuoRequest IdentityMfaMethodDuoRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/duo/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodDuoRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodOktaMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) UpdateIdentityMfaMethodOktaMethodId(ctx context.Context, methodId string, identityMfaMethodOktaRequest IdentityMfaMethodOktaRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/okta/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodOktaRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodPingidMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) UpdateIdentityMfaMethodPingidMethodId(ctx context.Context, methodId string, identityMfaMethodPingidRequest IdentityMfaMethodPingidRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/pingid/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodPingidRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodTotpAdminDestroy Destroys a TOTP secret for the given MFA method ID on the given entity
func (a *Identity) UpdateIdentityMfaMethodTotpAdminDestroy(ctx context.Context, identityMfaMethodTotpAdminDestroyRequest IdentityMfaMethodTotpAdminDestroyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/admin-destroy"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpAdminDestroyRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodTotpAdminGenerate Update or create TOTP secret for the given method ID on the given entity.
func (a *Identity) UpdateIdentityMfaMethodTotpAdminGenerate(ctx context.Context, identityMfaMethodTotpAdminGenerateRequest IdentityMfaMethodTotpAdminGenerateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/admin-generate"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpAdminGenerateRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodTotpGenerate Update or create TOTP secret for the given method ID on the given entity.
func (a *Identity) UpdateIdentityMfaMethodTotpGenerate(ctx context.Context, identityMfaMethodTotpGenerateRequest IdentityMfaMethodTotpGenerateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/generate"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpGenerateRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityMfaMethodTotpMethodId Update or create a configuration for the given MFA method
// methodId: The unique identifier for this MFA method.
func (a *Identity) UpdateIdentityMfaMethodTotpMethodId(ctx context.Context, methodId string, identityMfaMethodTotpRequest IdentityMfaMethodTotpRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/mfa/method/totp/{method_id}"
	requestPath = strings.Replace(requestPath, "{"+"method_id"+"}", url.PathEscape(methodId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityMfaMethodTotpRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcAssignmentName
// name: Name of the assignment
func (a *Identity) UpdateIdentityOidcAssignmentName(ctx context.Context, name string, identityOidcAssignmentRequest IdentityOidcAssignmentRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/assignment/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcAssignmentRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcClientName
// name: Name of the client.
func (a *Identity) UpdateIdentityOidcClientName(ctx context.Context, name string, identityOidcClientRequest IdentityOidcClientRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/client/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcClientRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcConfig OIDC configuration
func (a *Identity) UpdateIdentityOidcConfig(ctx context.Context, identityOidcConfigRequest IdentityOidcConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcConfigRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcIntrospect Verify the authenticity of an OIDC token
func (a *Identity) UpdateIdentityOidcIntrospect(ctx context.Context, identityOidcIntrospectRequest IdentityOidcIntrospectRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/introspect"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcIntrospectRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcKeyName CRUD operations for OIDC keys.
// name: Name of the key
func (a *Identity) UpdateIdentityOidcKeyName(ctx context.Context, name string, identityOidcKeyRequest IdentityOidcKeyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcKeyRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcKeyNameRotate Rotate a named OIDC key.
// name: Name of the key
func (a *Identity) UpdateIdentityOidcKeyNameRotate(ctx context.Context, name string, identityOidcKeyRotateRequest IdentityOidcKeyRotateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/key/{name}/rotate"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcKeyRotateRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcProviderName
// name: Name of the provider
func (a *Identity) UpdateIdentityOidcProviderName(ctx context.Context, name string, identityOidcProviderRequest IdentityOidcProviderRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcProviderRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcProviderNameAuthorize
// name: Name of the provider
func (a *Identity) UpdateIdentityOidcProviderNameAuthorize(ctx context.Context, name string, identityOidcProviderAuthorizeRequest IdentityOidcProviderAuthorizeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/authorize"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcProviderAuthorizeRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcProviderNameToken
// name: Name of the provider
func (a *Identity) UpdateIdentityOidcProviderNameToken(ctx context.Context, name string, identityOidcProviderTokenRequest IdentityOidcProviderTokenRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/token"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcProviderTokenRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcProviderNameUserinfo
// name: Name of the provider
func (a *Identity) UpdateIdentityOidcProviderNameUserinfo(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/provider/{name}/userinfo"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateIdentityOidcRoleName CRUD operations on OIDC Roles
// name: Name of the role
func (a *Identity) UpdateIdentityOidcRoleName(ctx context.Context, name string, identityOidcRoleRequest IdentityOidcRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcRoleRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityOidcScopeName
// name: Name of the scope
func (a *Identity) UpdateIdentityOidcScopeName(ctx context.Context, name string, identityOidcScopeRequest IdentityOidcScopeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/oidc/scope/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityOidcScopeRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityPersona Create a new alias.
func (a *Identity) UpdateIdentityPersona(ctx context.Context, identityPersonaRequest IdentityPersonaRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityPersonaRequest,
		nil, // request query parameters
	)
}

// UpdateIdentityPersonaIdId Update, read or delete an alias ID.
// id: ID of the persona
func (a *Identity) UpdateIdentityPersonaIdId(ctx context.Context, id string, identityPersonaIdRequest IdentityPersonaIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/identity/persona/id/{id}"
	requestPath = strings.Replace(requestPath, "{"+"id"+"}", url.PathEscape(id), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		identityPersonaIdRequest,
		nil, // request query parameters
	)
}
