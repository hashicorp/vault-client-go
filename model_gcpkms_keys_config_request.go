/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// GcpkmsKeysConfigRequest struct for GcpkmsKeysConfigRequest
type GcpkmsKeysConfigRequest struct {
	// Maximum allowed crypto key version. If set to a positive value, key versions greater than the given value are not permitted to be used. If set to 0 or a negative value, there is no maximum key version.
	MaxVersion *int32 `json:"max_version,omitempty"`
	// Minimum allowed crypto key version. If set to a positive value, key versions less than the given value are not permitted to be used. If set to 0 or a negative value, there is no minimum key version. This value only affects encryption/re-encryption, not decryption. To restrict old values from being decrypted, increase this value and then perform a trim operation.
	MinVersion *int32 `json:"min_version,omitempty"`
}

// NewGcpkmsKeysConfigRequest instantiates a new GcpkmsKeysConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpkmsKeysConfigRequest() *GcpkmsKeysConfigRequest {
	this := GcpkmsKeysConfigRequest{}
	return &this
}

// NewGcpkmsKeysConfigRequestWithDefaults instantiates a new GcpkmsKeysConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpkmsKeysConfigRequestWithDefaults() *GcpkmsKeysConfigRequest {
	this := GcpkmsKeysConfigRequest{}
	return &this
}

// GetMaxVersion returns the MaxVersion field value if set, zero value otherwise.
func (o *GcpkmsKeysConfigRequest) GetMaxVersion() int32 {
	if o == nil || o.MaxVersion == nil {
		var ret int32
		return ret
	}
	return *o.MaxVersion
}

// GetMaxVersionOk returns a tuple with the MaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysConfigRequest) GetMaxVersionOk() (*int32, bool) {
	if o == nil || o.MaxVersion == nil {
		return nil, false
	}
	return o.MaxVersion, true
}

// HasMaxVersion returns a boolean if a field has been set.
func (o *GcpkmsKeysConfigRequest) HasMaxVersion() bool {
	if o != nil && o.MaxVersion != nil {
		return true
	}

	return false
}

// SetMaxVersion gets a reference to the given int32 and assigns it to the MaxVersion field.
func (o *GcpkmsKeysConfigRequest) SetMaxVersion(v int32) {
	o.MaxVersion = &v
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *GcpkmsKeysConfigRequest) GetMinVersion() int32 {
	if o == nil || o.MinVersion == nil {
		var ret int32
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpkmsKeysConfigRequest) GetMinVersionOk() (*int32, bool) {
	if o == nil || o.MinVersion == nil {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *GcpkmsKeysConfigRequest) HasMinVersion() bool {
	if o != nil && o.MinVersion != nil {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given int32 and assigns it to the MinVersion field.
func (o *GcpkmsKeysConfigRequest) SetMinVersion(v int32) {
	o.MinVersion = &v
}

func (o GcpkmsKeysConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxVersion != nil {
		toSerialize["max_version"] = o.MaxVersion
	}
	if o.MinVersion != nil {
		toSerialize["min_version"] = o.MinVersion
	}
	return json.Marshal(toSerialize)
}

type NullableGcpkmsKeysConfigRequest struct {
	value *GcpkmsKeysConfigRequest
	isSet bool
}

func (v NullableGcpkmsKeysConfigRequest) Get() *GcpkmsKeysConfigRequest {
	return v.value
}

func (v *NullableGcpkmsKeysConfigRequest) Set(val *GcpkmsKeysConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpkmsKeysConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpkmsKeysConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpkmsKeysConfigRequest(val *GcpkmsKeysConfigRequest) *NullableGcpkmsKeysConfigRequest {
	return &NullableGcpkmsKeysConfigRequest{value: val, isSet: true}
}

func (v NullableGcpkmsKeysConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpkmsKeysConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


