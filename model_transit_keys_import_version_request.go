/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// TransitKeysImportVersionRequest struct for TransitKeysImportVersionRequest
type TransitKeysImportVersionRequest struct {
	// The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key.
	Ciphertext *string `json:"ciphertext,omitempty"`
	// The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of \"SHA1\", \"SHA224\", \"SHA256\" (default), \"SHA384\", or \"SHA512\"
	HashFunction *string `json:"hash_function,omitempty"`
}

// NewTransitKeysImportVersionRequest instantiates a new TransitKeysImportVersionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransitKeysImportVersionRequest() *TransitKeysImportVersionRequest {
	this := TransitKeysImportVersionRequest{}
	var hashFunction string = "SHA256"
	this.HashFunction = &hashFunction
	return &this
}

// NewTransitKeysImportVersionRequestWithDefaults instantiates a new TransitKeysImportVersionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitKeysImportVersionRequestWithDefaults() *TransitKeysImportVersionRequest {
	this := TransitKeysImportVersionRequest{}
	var hashFunction string = "SHA256"
	this.HashFunction = &hashFunction
	return &this
}

// GetCiphertext returns the Ciphertext field value if set, zero value otherwise.
func (o *TransitKeysImportVersionRequest) GetCiphertext() string {
	if o == nil || o.Ciphertext == nil {
		var ret string
		return ret
	}
	return *o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitKeysImportVersionRequest) GetCiphertextOk() (*string, bool) {
	if o == nil || o.Ciphertext == nil {
		return nil, false
	}
	return o.Ciphertext, true
}

// HasCiphertext returns a boolean if a field has been set.
func (o *TransitKeysImportVersionRequest) HasCiphertext() bool {
	if o != nil && o.Ciphertext != nil {
		return true
	}

	return false
}

// SetCiphertext gets a reference to the given string and assigns it to the Ciphertext field.
func (o *TransitKeysImportVersionRequest) SetCiphertext(v string) {
	o.Ciphertext = &v
}

// GetHashFunction returns the HashFunction field value if set, zero value otherwise.
func (o *TransitKeysImportVersionRequest) GetHashFunction() string {
	if o == nil || o.HashFunction == nil {
		var ret string
		return ret
	}
	return *o.HashFunction
}

// GetHashFunctionOk returns a tuple with the HashFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitKeysImportVersionRequest) GetHashFunctionOk() (*string, bool) {
	if o == nil || o.HashFunction == nil {
		return nil, false
	}
	return o.HashFunction, true
}

// HasHashFunction returns a boolean if a field has been set.
func (o *TransitKeysImportVersionRequest) HasHashFunction() bool {
	if o != nil && o.HashFunction != nil {
		return true
	}

	return false
}

// SetHashFunction gets a reference to the given string and assigns it to the HashFunction field.
func (o *TransitKeysImportVersionRequest) SetHashFunction(v string) {
	o.HashFunction = &v
}

func (o TransitKeysImportVersionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ciphertext != nil {
		toSerialize["ciphertext"] = o.Ciphertext
	}
	if o.HashFunction != nil {
		toSerialize["hash_function"] = o.HashFunction
	}
	return json.Marshal(toSerialize)
}

type NullableTransitKeysImportVersionRequest struct {
	value *TransitKeysImportVersionRequest
	isSet bool
}

func (v NullableTransitKeysImportVersionRequest) Get() *TransitKeysImportVersionRequest {
	return v.value
}

func (v *NullableTransitKeysImportVersionRequest) Set(val *TransitKeysImportVersionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitKeysImportVersionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitKeysImportVersionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitKeysImportVersionRequest(val *TransitKeysImportVersionRequest) *NullableTransitKeysImportVersionRequest {
	return &NullableTransitKeysImportVersionRequest{value: val, isSet: true}
}

func (v NullableTransitKeysImportVersionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitKeysImportVersionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


