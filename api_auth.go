/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// Auth is a simple wrapper around the client for Auth requests
type Auth struct {
	client *Client
}

// DeleteApproleRoleRoleName Register an role with the backend.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleName(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameBindSecretId Impose secret_id to be presented during login using this role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameBindSecretId(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameBoundCidrList Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameBoundCidrList(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNamePeriod Updates the value of 'period' on the role
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNamePeriod(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNamePolicies Policies of the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNamePolicies(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameSecretIdAccessorDestroy
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameSecretIdAccessorDestroy(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-accessor/destroy"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameSecretIdBoundCidrs Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameSecretIdBoundCidrs(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameSecretIdDestroy Invalidate an issued secret_id
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameSecretIdDestroy(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id/destroy"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameSecretIdNumUses Use limit of the SecretID generated against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameSecretIdNumUses(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameSecretIdTtl Duration in seconds of the SecretID generated against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameSecretIdTtl(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameTokenBoundCidrs Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameTokenBoundCidrs(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameTokenMaxTtl Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameTokenMaxTtl(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameTokenNumUses Number of times issued tokens can be used
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameTokenNumUses(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteApproleRoleRoleNameTokenTtl Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteApproleRoleRoleNameTokenTtl(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigCertificateCertName
// certName: Name of the certificate.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigCertificateCertName(ctx context.Context, certName string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigClient
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigClient(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/client"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigStsAccountId
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigStsAccountId(ctx context.Context, accountId string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigTidyIdentityAccesslist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigTidyIdentityAccesslist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigTidyIdentityWhitelist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigTidyIdentityWhitelist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigTidyRoletagBlacklist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigTidyRoletagBlacklist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsConfigTidyRoletagDenylist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsConfigTidyRoletagDenylist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsIdentityAccesslistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsIdentityAccesslistInstanceId(ctx context.Context, instanceId string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/identity-accesslist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsIdentityWhitelistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsIdentityWhitelistInstanceId(ctx context.Context, instanceId string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/identity-whitelist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsRoleRole
// role: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsRoleRole(ctx context.Context, mountPath string, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsRoletagBlacklistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsRoletagBlacklistRoleTag(ctx context.Context, mountPath string, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteAwsRoletagDenylistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteAwsRoletagDenylistRoleTag(ctx context.Context, mountPath string, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteCertCertsName Manage trusted certificates used for authentication.
// name: The name of the certificate
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteCertCertsName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteCertCrlsName Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteCertCrlsName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteCfRolesRole
// role: The name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteCfRolesRole(ctx context.Context, mountPath string, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteGithubMapTeamsKey Read/write/delete a single teams mapping
// key: Key for the teams mapping
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteGithubMapTeamsKey(ctx context.Context, key string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteGithubMapUsersKey Read/write/delete a single users mapping
// key: Key for the users mapping
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteGithubMapUsersKey(ctx context.Context, key string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteKerberosGroupsName
// name: Name of the LDAP group.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteKerberosGroupsName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteOidcRoleName Delete an existing role.
// name: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteOidcRoleName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteRadiusUsersName Manage users allowed to authenticate.
// name: Name of the RADIUS user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteRadiusUsersName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteTokenRolesRoleName
// roleName: Name of the role
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteTokenRolesRoleName(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteUserpassUsersUsername Manage users allowed to authenticate.
// username: Username for this user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) DeleteUserpassUsersUsername(ctx context.Context, mountPath string, username string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListApproleRoleRoleNameSecretId Generate a SecretID against this role.
// roleName: Name of the role. Must be less than 4096 bytes.
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListApproleRoleRoleNameSecretId(ctx context.Context, mountPath string, roleName string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListAwsConfigCertificates
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListAwsConfigCertificates(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/certificates"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListAwsConfigSts
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListAwsConfigSts(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/sts"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListAwsIdentityAccesslist
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListAwsIdentityAccesslist(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListAwsIdentityWhitelist
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListAwsIdentityWhitelist(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListAwsRoletagBlacklist
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListAwsRoletagBlacklist(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListAwsRoletagDenylist
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListAwsRoletagDenylist(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListCertCerts Manage trusted certificates used for authentication.
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListCertCerts(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/certs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListGcpRoles Lists all the roles that are registered with Vault.
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListGcpRoles(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListKerberosGroups
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListKerberosGroups(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/groups"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListOidcRole Lists all the roles registered with the backend.
// The list will contain the names of the roles.
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListOidcRole(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListTokenAccessors List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires 'sudo' capability in addition to 'list'.
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListTokenAccessors(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/accessors/"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListUserpassUsers Manage users allowed to authenticate.
// list: Must be set to &#x60;true&#x60;
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ListUserpassUsers(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleName Register an role with the backend.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleName(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameBindSecretId Impose secret_id to be presented during login using this role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameBindSecretId(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameBoundCidrList Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameBoundCidrList(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameLocalSecretIds Enables cluster local secret IDs
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameLocalSecretIds(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/local-secret-ids"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNamePeriod Updates the value of 'period' on the role
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNamePeriod(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNamePolicies Policies of the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNamePolicies(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameRoleId Returns the 'role_id' of the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameRoleId(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/role-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameSecretIdBoundCidrs Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameSecretIdBoundCidrs(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameSecretIdNumUses Use limit of the SecretID generated against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameSecretIdNumUses(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameSecretIdTtl Duration in seconds of the SecretID generated against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameSecretIdTtl(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameTokenBoundCidrs Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameTokenBoundCidrs(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameTokenMaxTtl Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameTokenMaxTtl(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameTokenNumUses Number of times issued tokens can be used
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameTokenNumUses(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadApproleRoleRoleNameTokenTtl Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadApproleRoleRoleNameTokenTtl(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigCertificateCertName
// certName: Name of the certificate.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigCertificateCertName(ctx context.Context, certName string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigClient
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigClient(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/client"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigIdentity
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigIdentity(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/identity"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigStsAccountId
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigStsAccountId(ctx context.Context, accountId string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigTidyIdentityAccesslist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigTidyIdentityAccesslist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigTidyIdentityWhitelist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigTidyIdentityWhitelist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigTidyRoletagBlacklist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigTidyRoletagBlacklist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsConfigTidyRoletagDenylist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsConfigTidyRoletagDenylist(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsIdentityAccesslistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsIdentityAccesslistInstanceId(ctx context.Context, instanceId string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/identity-accesslist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsIdentityWhitelistInstanceId
// instanceId: EC2 instance ID. A successful login operation from an EC2 instance gets cached in this accesslist, keyed off of instance ID.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsIdentityWhitelistInstanceId(ctx context.Context, instanceId string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/identity-whitelist/{instance_id}"
	requestPath = strings.Replace(requestPath, "{"+"instance_id"+"}", url.PathEscape(instanceId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsRoleRole
// role: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsRoleRole(ctx context.Context, mountPath string, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsRoletagBlacklistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsRoletagBlacklistRoleTag(ctx context.Context, mountPath string, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadAwsRoletagDenylistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadAwsRoletagDenylistRoleTag(ctx context.Context, mountPath string, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadCertCertsName Manage trusted certificates used for authentication.
// name: The name of the certificate
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadCertCertsName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadCertCrlsName Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadCertCrlsName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadCfRolesRole
// role: The name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadCfRolesRole(ctx context.Context, mountPath string, role string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadGithubMapTeams Read mappings for teams
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
// list: Return a list if &#x60;true&#x60;
func (a *Auth) ReadGithubMapTeams(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/teams"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadGithubMapTeamsKey Read/write/delete a single teams mapping
// key: Key for the teams mapping
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadGithubMapTeamsKey(ctx context.Context, key string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadGithubMapUsers Read mappings for users
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
// list: Return a list if &#x60;true&#x60;
func (a *Auth) ReadGithubMapUsers(ctx context.Context, mountPath string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/users"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadGithubMapUsersKey Read/write/delete a single users mapping
// key: Key for the users mapping
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadGithubMapUsersKey(ctx context.Context, key string, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadKerberosConfigLdap
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadKerberosConfigLdap(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/ldap"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadKerberosGroupsName
// name: Name of the LDAP group.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadKerberosGroupsName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadOidcConfig Read the current JWT authentication backend configuration.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadOidcConfig(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadOidcOidcCallback Callback endpoint to complete an OIDC login.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadOidcOidcCallback(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/oidc/callback"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadOidcRoleName Read an existing role.
// name: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadOidcRoleName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadOktaVerifyNonce
// nonce: Nonce provided during a login request to retrieve the number verification challenge for the matching request.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadOktaVerifyNonce(ctx context.Context, mountPath string, nonce string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/verify/{nonce}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"nonce"+"}", url.PathEscape(nonce), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadRadiusUsersName Manage users allowed to authenticate.
// name: Name of the RADIUS user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadRadiusUsersName(ctx context.Context, mountPath string, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadTokenLookup This endpoint will lookup a token and its properties.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadTokenLookup(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/lookup"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadTokenLookupSelf This endpoint will lookup a token and its properties.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadTokenLookupSelf(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/lookup-self"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadTokenRolesRoleName
// roleName: Name of the role
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadTokenRolesRoleName(ctx context.Context, mountPath string, roleName string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadUserpassUsersUsername Manage users allowed to authenticate.
// username: Username for this user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) ReadUserpassUsersUsername(ctx context.Context, mountPath string, username string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleName Register an role with the backend.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleName(ctx context.Context, mountPath string, roleName string, approleRoleRequest ApproleRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameBindSecretId Impose secret_id to be presented during login using this role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameBindSecretId(ctx context.Context, mountPath string, roleName string, approleRoleBindSecretIdRequest ApproleRoleBindSecretIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/bind-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleBindSecretIdRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameBoundCidrList Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameBoundCidrList(ctx context.Context, mountPath string, roleName string, approleRoleBoundCidrListRequest ApproleRoleBoundCidrListRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/bound-cidr-list"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleBoundCidrListRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameCustomSecretId Assign a SecretID of choice against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameCustomSecretId(ctx context.Context, mountPath string, roleName string, approleRoleCustomSecretIdRequest ApproleRoleCustomSecretIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/custom-secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleCustomSecretIdRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNamePeriod Updates the value of 'period' on the role
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNamePeriod(ctx context.Context, mountPath string, roleName string, approleRolePeriodRequest ApproleRolePeriodRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/period"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRolePeriodRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNamePolicies Policies of the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNamePolicies(ctx context.Context, mountPath string, roleName string, approleRolePoliciesRequest ApproleRolePoliciesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/policies"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRolePoliciesRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameRoleId Returns the 'role_id' of the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameRoleId(ctx context.Context, mountPath string, roleName string, approleRoleRoleIdRequest ApproleRoleRoleIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/role-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleRoleIdRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretId Generate a SecretID against this role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretId(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdRequest ApproleRoleSecretIdRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdAccessorDestroy
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdAccessorDestroy(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdAccessorDestroyRequest ApproleRoleSecretIdAccessorDestroyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-accessor/destroy"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdAccessorDestroyRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdAccessorLookup
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdAccessorLookup(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdAccessorLookupRequest ApproleRoleSecretIdAccessorLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-accessor/lookup"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdAccessorLookupRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdBoundCidrs Comma separated list of CIDR blocks, if set, specifies blocks of IP addresses which can perform the login operation
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdBoundCidrs(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdBoundCidrsRequest ApproleRoleSecretIdBoundCidrsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdBoundCidrsRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdDestroy Invalidate an issued secret_id
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdDestroy(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdDestroyRequest ApproleRoleSecretIdDestroyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id/destroy"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdDestroyRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdLookup Read the properties of an issued secret_id
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdLookup(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdLookupRequest ApproleRoleSecretIdLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id/lookup"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdLookupRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdNumUses Use limit of the SecretID generated against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdNumUses(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdNumUsesRequest ApproleRoleSecretIdNumUsesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdNumUsesRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameSecretIdTtl Duration in seconds of the SecretID generated against the role.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameSecretIdTtl(ctx context.Context, mountPath string, roleName string, approleRoleSecretIdTtlRequest ApproleRoleSecretIdTtlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/secret-id-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleSecretIdTtlRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameTokenBoundCidrs Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameTokenBoundCidrs(ctx context.Context, mountPath string, roleName string, approleRoleTokenBoundCidrsRequest ApproleRoleTokenBoundCidrsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-bound-cidrs"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenBoundCidrsRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameTokenMaxTtl Duration in seconds, the maximum lifetime of the tokens issued by using the SecretIDs that were generated against this role, after which the tokens are not allowed to be renewed.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameTokenMaxTtl(ctx context.Context, mountPath string, roleName string, approleRoleTokenMaxTtlRequest ApproleRoleTokenMaxTtlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-max-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenMaxTtlRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameTokenNumUses Number of times issued tokens can be used
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameTokenNumUses(ctx context.Context, mountPath string, roleName string, approleRoleTokenNumUsesRequest ApproleRoleTokenNumUsesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-num-uses"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenNumUsesRequest,
		nil, // request query parameters
	)
}

// UpdateApproleRoleRoleNameTokenTtl Duration in seconds, the lifetime of the token issued by using the SecretID that is generated against this role, before which the token needs to be renewed.
// roleName: Name of the role. Must be less than 4096 bytes.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleRoleRoleNameTokenTtl(ctx context.Context, mountPath string, roleName string, approleRoleTokenTtlRequest ApproleRoleTokenTtlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role_name}/token-ttl"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		approleRoleTokenTtlRequest,
		nil, // request query parameters
	)
}

// UpdateApproleTidySecretId Trigger the clean-up of expired SecretID entries.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateApproleTidySecretId(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/tidy/secret-id"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateAwsConfigCertificateCertName
// certName: Name of the certificate.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigCertificateCertName(ctx context.Context, certName string, mountPath string, awsConfigCertificateRequest AwsConfigCertificateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/certificate/{cert_name}"
	requestPath = strings.Replace(requestPath, "{"+"cert_name"+"}", url.PathEscape(certName), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigCertificateRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigClient
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigClient(ctx context.Context, mountPath string, awsConfigClientRequest AwsConfigClientRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/client"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigClientRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigIdentity
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigIdentity(ctx context.Context, mountPath string, awsConfigIdentityRequest AwsConfigIdentityRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/identity"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigIdentityRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigRotateRoot
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigRotateRoot(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/rotate-root"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateAwsConfigStsAccountId
// accountId: AWS account ID to be associated with STS role. If set, Vault will use assumed credentials to verify any login attempts from EC2 instances in this account.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigStsAccountId(ctx context.Context, accountId string, mountPath string, awsConfigStsRequest AwsConfigStsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/sts/{account_id}"
	requestPath = strings.Replace(requestPath, "{"+"account_id"+"}", url.PathEscape(accountId), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigStsRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigTidyIdentityAccesslist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigTidyIdentityAccesslist(ctx context.Context, mountPath string, awsConfigTidyIdentityAccesslistRequest AwsConfigTidyIdentityAccesslistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyIdentityAccesslistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigTidyIdentityWhitelist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigTidyIdentityWhitelist(ctx context.Context, mountPath string, awsConfigTidyIdentityWhitelistRequest AwsConfigTidyIdentityWhitelistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyIdentityWhitelistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigTidyRoletagBlacklist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigTidyRoletagBlacklist(ctx context.Context, mountPath string, awsConfigTidyRoletagBlacklistRequest AwsConfigTidyRoletagBlacklistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyRoletagBlacklistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsConfigTidyRoletagDenylist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsConfigTidyRoletagDenylist(ctx context.Context, mountPath string, awsConfigTidyRoletagDenylistRequest AwsConfigTidyRoletagDenylistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsConfigTidyRoletagDenylistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsRoleRole
// role: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsRoleRole(ctx context.Context, mountPath string, role string, awsRoleRequest AwsRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsRoleRequest,
		nil, // request query parameters
	)
}

// UpdateAwsRoleRoleTag
// role: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsRoleRoleTag(ctx context.Context, mountPath string, role string, awsRoleTagRequest AwsRoleTagRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{role}/tag"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsRoleTagRequest,
		nil, // request query parameters
	)
}

// UpdateAwsRoletagBlacklistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsRoletagBlacklistRoleTag(ctx context.Context, mountPath string, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-blacklist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateAwsRoletagDenylistRoleTag
// roleTag: Role tag to be deny listed. The tag can be supplied as-is. In order to avoid any encoding problems, it can be base64 encoded.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsRoletagDenylistRoleTag(ctx context.Context, mountPath string, roleTag string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roletag-denylist/{role_tag}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_tag"+"}", url.PathEscape(roleTag), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateAwsTidyIdentityAccesslist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsTidyIdentityAccesslist(ctx context.Context, mountPath string, awsTidyIdentityAccesslistRequest AwsTidyIdentityAccesslistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/tidy/identity-accesslist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyIdentityAccesslistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsTidyIdentityWhitelist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsTidyIdentityWhitelist(ctx context.Context, mountPath string, awsTidyIdentityWhitelistRequest AwsTidyIdentityWhitelistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/tidy/identity-whitelist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyIdentityWhitelistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsTidyRoletagBlacklist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsTidyRoletagBlacklist(ctx context.Context, mountPath string, awsTidyRoletagBlacklistRequest AwsTidyRoletagBlacklistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/tidy/roletag-blacklist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyRoletagBlacklistRequest,
		nil, // request query parameters
	)
}

// UpdateAwsTidyRoletagDenylist
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateAwsTidyRoletagDenylist(ctx context.Context, mountPath string, awsTidyRoletagDenylistRequest AwsTidyRoletagDenylistRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/tidy/roletag-denylist"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		awsTidyRoletagDenylistRequest,
		nil, // request query parameters
	)
}

// UpdateCertCertsName Manage trusted certificates used for authentication.
// name: The name of the certificate
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateCertCertsName(ctx context.Context, mountPath string, name string, certCertsRequest CertCertsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/certs/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certCertsRequest,
		nil, // request query parameters
	)
}

// UpdateCertCrlsName Manage Certificate Revocation Lists checked during authentication.
// name: The name of the certificate
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateCertCrlsName(ctx context.Context, mountPath string, name string, certCrlsRequest CertCrlsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/crls/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		certCrlsRequest,
		nil, // request query parameters
	)
}

// UpdateCfRolesRole
// role: The name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateCfRolesRole(ctx context.Context, mountPath string, role string, cfRolesRequest CfRolesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		cfRolesRequest,
		nil, // request query parameters
	)
}

// UpdateGcpRoleNameLabels Add or remove labels for an existing 'gce' role
// name: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateGcpRoleNameLabels(ctx context.Context, mountPath string, name string, gcpRoleLabelsRequest GcpRoleLabelsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{name}/labels"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpRoleLabelsRequest,
		nil, // request query parameters
	)
}

// UpdateGcpRoleNameServiceAccounts Add or remove service accounts for an existing `iam` role
// name: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateGcpRoleNameServiceAccounts(ctx context.Context, mountPath string, name string, gcpRoleServiceAccountsRequest GcpRoleServiceAccountsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{name}/service-accounts"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		gcpRoleServiceAccountsRequest,
		nil, // request query parameters
	)
}

// UpdateGithubMapTeamsKey Read/write/delete a single teams mapping
// key: Key for the teams mapping
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateGithubMapTeamsKey(ctx context.Context, key string, mountPath string, githubMapTeamsRequest GithubMapTeamsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/teams/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		githubMapTeamsRequest,
		nil, // request query parameters
	)
}

// UpdateGithubMapUsersKey Read/write/delete a single users mapping
// key: Key for the users mapping
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateGithubMapUsersKey(ctx context.Context, key string, mountPath string, githubMapUsersRequest GithubMapUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/map/users/{key}"
	requestPath = strings.Replace(requestPath, "{"+"key"+"}", url.PathEscape(key), -1)
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		githubMapUsersRequest,
		nil, // request query parameters
	)
}

// UpdateKerberosConfigLdap
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateKerberosConfigLdap(ctx context.Context, mountPath string, kerberosConfigLdapRequest KerberosConfigLdapRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config/ldap"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosConfigLdapRequest,
		nil, // request query parameters
	)
}

// UpdateKerberosGroupsName
// name: Name of the LDAP group.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateKerberosGroupsName(ctx context.Context, mountPath string, name string, kerberosGroupsRequest KerberosGroupsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/groups/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		kerberosGroupsRequest,
		nil, // request query parameters
	)
}

// UpdateOciLoginRole Authenticates to Vault using OCI credentials
// role: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateOciLoginRole(ctx context.Context, mountPath string, role string, ociLoginRequest OciLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/login/{role}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role"+"}", url.PathEscape(role), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		ociLoginRequest,
		nil, // request query parameters
	)
}

// UpdateOidcConfig Configure the JWT authentication backend.
// The JWT authentication backend validates JWTs (or OIDC) using the configured credentials. If using OIDC Discovery, the URL must be provided, along with (optionally) the CA cert to use for the connection. If performing JWT validation locally, a set of public keys must be provided.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateOidcConfig(ctx context.Context, mountPath string, oidcConfigRequest OidcConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/config"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcConfigRequest,
		nil, // request query parameters
	)
}

// UpdateOidcLogin Authenticates to Vault using a JWT (or OIDC) token.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateOidcLogin(ctx context.Context, mountPath string, oidcLoginRequest OidcLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/login"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcLoginRequest,
		nil, // request query parameters
	)
}

// UpdateOidcOidcAuthUrl Request an authorization URL to start an OIDC login flow.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateOidcOidcAuthUrl(ctx context.Context, mountPath string, oidcOidcAuthUrlRequest OidcOidcAuthUrlRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/oidc/auth_url"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcOidcAuthUrlRequest,
		nil, // request query parameters
	)
}

// UpdateOidcOidcCallback Callback endpoint to handle form_posts.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateOidcOidcCallback(ctx context.Context, mountPath string, oidcOidcCallbackRequest OidcOidcCallbackRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/oidc/callback"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcOidcCallbackRequest,
		nil, // request query parameters
	)
}

// UpdateOidcRoleName Register an role with the backend.
// A role is required to authenticate with this backend. The role binds   JWT token information with token policies and settings.   The bindings, token polices and token settings can all be configured   using this endpoint
// name: Name of the role.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateOidcRoleName(ctx context.Context, mountPath string, name string, oidcRoleRequest OidcRoleRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/role/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		oidcRoleRequest,
		nil, // request query parameters
	)
}

// UpdateRadiusLoginUrlusername Log in with a username and password.
// urlusername: Username to be used for login. (URL parameter)
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateRadiusLoginUrlusername(ctx context.Context, mountPath string, urlusername string, radiusLoginRequest RadiusLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/login/{urlusername}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"urlusername"+"}", url.PathEscape(urlusername), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusLoginRequest,
		nil, // request query parameters
	)
}

// UpdateRadiusUsersName Manage users allowed to authenticate.
// name: Name of the RADIUS user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateRadiusUsersName(ctx context.Context, mountPath string, name string, radiusUsersRequest RadiusUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		radiusUsersRequest,
		nil, // request query parameters
	)
}

// UpdateTokenCreate The token create path is used to create new tokens.
// format: Return json formatted output
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenCreate(ctx context.Context, mountPath string, format string, tokenCreateRequest TokenCreateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/create"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenCreateRequest,
		nil, // request query parameters
	)
}

// UpdateTokenCreateOrphan The token create path is used to create new orphan tokens.
// format: Return json formatted output
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenCreateOrphan(ctx context.Context, mountPath string, format string, tokenCreateOrphanRequest TokenCreateOrphanRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/create-orphan"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenCreateOrphanRequest,
		nil, // request query parameters
	)
}

// UpdateTokenCreateRoleName This token create path is used to create new tokens adhering to the given role.
// roleName: Name of the role
// format: Return json formatted output
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenCreateRoleName(ctx context.Context, mountPath string, roleName string, format string, tokenCreateRequest TokenCreateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/create/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenCreateRequest,
		nil, // request query parameters
	)
}

// UpdateTokenLookup This endpoint will lookup a token and its properties.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenLookup(ctx context.Context, mountPath string, tokenLookupRequest TokenLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/lookup"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenLookupRequest,
		nil, // request query parameters
	)
}

// UpdateTokenLookupAccessor This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenLookupAccessor(ctx context.Context, mountPath string, tokenLookupAccessorRequest TokenLookupAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/lookup-accessor"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenLookupAccessorRequest,
		nil, // request query parameters
	)
}

// UpdateTokenLookupSelf This endpoint will lookup a token and its properties.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenLookupSelf(ctx context.Context, mountPath string, tokenLookupSelfRequest TokenLookupSelfRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/lookup-self"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenLookupSelfRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRenew This endpoint will renew the given token and prevent expiration.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRenew(ctx context.Context, mountPath string, tokenRenewRequest TokenRenewRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/renew"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRenewAccessor This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRenewAccessor(ctx context.Context, mountPath string, tokenRenewAccessorRequest TokenRenewAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/renew-accessor"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewAccessorRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRenewSelf This endpoint will renew the token used to call it and prevent expiration.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRenewSelf(ctx context.Context, mountPath string, tokenRenewSelfRequest TokenRenewSelfRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/renew-self"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRenewSelfRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRevoke This endpoint will delete the given token and all of its child tokens.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRevoke(ctx context.Context, mountPath string, tokenRevokeRequest TokenRevokeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/revoke"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRevokeAccessor This endpoint will delete the token associated with the accessor and all of its child tokens.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRevokeAccessor(ctx context.Context, mountPath string, tokenRevokeAccessorRequest TokenRevokeAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/revoke-accessor"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeAccessorRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRevokeOrphan This endpoint will delete the token and orphan its child tokens.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRevokeOrphan(ctx context.Context, mountPath string, tokenRevokeOrphanRequest TokenRevokeOrphanRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/revoke-orphan"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRevokeOrphanRequest,
		nil, // request query parameters
	)
}

// UpdateTokenRevokeSelf This endpoint will delete the token used to call it and all of its child tokens.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRevokeSelf(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/revoke-self"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateTokenRolesRoleName
// roleName: Name of the role
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenRolesRoleName(ctx context.Context, mountPath string, roleName string, tokenRolesRequest TokenRolesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/roles/{role_name}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"role_name"+"}", url.PathEscape(roleName), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		tokenRolesRequest,
		nil, // request query parameters
	)
}

// UpdateTokenTidy This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateTokenTidy(ctx context.Context, mountPath string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/tidy"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateUserpassLoginUsername Log in with a username and password.
// username: Username of the user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateUserpassLoginUsername(ctx context.Context, mountPath string, username string, userpassLoginRequest UserpassLoginRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/login/{username}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassLoginRequest,
		nil, // request query parameters
	)
}

// UpdateUserpassUsersUsername Manage users allowed to authenticate.
// username: Username for this user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateUserpassUsersUsername(ctx context.Context, mountPath string, username string, userpassUsersRequest UserpassUsersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{username}"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassUsersRequest,
		nil, // request query parameters
	)
}

// UpdateUserpassUsersUsernamePassword Reset user's password.
// username: Username for this user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateUserpassUsersUsernamePassword(ctx context.Context, mountPath string, username string, userpassUsersPasswordRequest UserpassUsersPasswordRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{username}/password"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassUsersPasswordRequest,
		nil, // request query parameters
	)
}

// UpdateUserpassUsersUsernamePolicies Update the policies associated with the username.
// username: Username for this user.
// mountPath: Path where the backend was mounted; the endpoint path will be offset by the mount path
func (a *Auth) UpdateUserpassUsersUsernamePolicies(ctx context.Context, mountPath string, username string, userpassUsersPoliciesRequest UserpassUsersPoliciesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/auth/{mount_path}/users/{username}/policies"
	requestPath = strings.Replace(requestPath, "{"+"mount_path"+"}", url.PathEscape(mountPath), -1)
	requestPath = strings.Replace(requestPath, "{"+"username"+"}", url.PathEscape(username), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		userpassUsersPoliciesRequest,
		nil, // request query parameters
	)
}
