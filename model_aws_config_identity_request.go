/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// AwsConfigIdentityRequest struct for AwsConfigIdentityRequest
type AwsConfigIdentityRequest struct {
	// Configure how the AWS auth method generates entity alias when using EC2 auth. Valid values are \"role_id\", \"instance_id\", and \"image_id\". Defaults to \"role_id\".
	Ec2Alias *string `json:"ec2_alias,omitempty"`
	// The metadata to include on the aliases and audit logs generated by this plugin. When set to 'default', includes: account_id, auth_type. These fields are available to add: ami_id, instance_id, region. Not editing this field means the 'default' fields are included. Explicitly setting this field to empty overrides the 'default' and means no metadata will be included. If not using 'default', explicit fields must be sent like: 'field1,field2'.
	Ec2Metadata []string `json:"ec2_metadata,omitempty"`
	// Configure how the AWS auth method generates entity aliases when using IAM auth. Valid values are \"role_id\", \"unique_id\", and \"full_arn\". Defaults to \"role_id\".
	IamAlias *string `json:"iam_alias,omitempty"`
	// The metadata to include on the aliases and audit logs generated by this plugin. When set to 'default', includes: account_id, auth_type. These fields are available to add: canonical_arn, client_arn, client_user_id, inferred_aws_region, inferred_entity_id, inferred_entity_type. Not editing this field means the 'default' fields are included. Explicitly setting this field to empty overrides the 'default' and means no metadata will be included. If not using 'default', explicit fields must be sent like: 'field1,field2'.
	IamMetadata []string `json:"iam_metadata,omitempty"`
}

// NewAwsConfigIdentityRequest instantiates a new AwsConfigIdentityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsConfigIdentityRequest() *AwsConfigIdentityRequest {
	this := AwsConfigIdentityRequest{}
	var ec2Alias string = "instance_id"
	this.Ec2Alias = &ec2Alias
	var iamAlias string = "unique_id"
	this.IamAlias = &iamAlias
	return &this
}

// NewAwsConfigIdentityRequestWithDefaults instantiates a new AwsConfigIdentityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsConfigIdentityRequestWithDefaults() *AwsConfigIdentityRequest {
	this := AwsConfigIdentityRequest{}
	var ec2Alias string = "instance_id"
	this.Ec2Alias = &ec2Alias
	var iamAlias string = "unique_id"
	this.IamAlias = &iamAlias
	return &this
}

// GetEc2Alias returns the Ec2Alias field value if set, zero value otherwise.
func (o *AwsConfigIdentityRequest) GetEc2Alias() string {
	if o == nil || o.Ec2Alias == nil {
		var ret string
		return ret
	}
	return *o.Ec2Alias
}

// GetEc2AliasOk returns a tuple with the Ec2Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigIdentityRequest) GetEc2AliasOk() (*string, bool) {
	if o == nil || o.Ec2Alias == nil {
		return nil, false
	}
	return o.Ec2Alias, true
}

// HasEc2Alias returns a boolean if a field has been set.
func (o *AwsConfigIdentityRequest) HasEc2Alias() bool {
	if o != nil && o.Ec2Alias != nil {
		return true
	}

	return false
}

// SetEc2Alias gets a reference to the given string and assigns it to the Ec2Alias field.
func (o *AwsConfigIdentityRequest) SetEc2Alias(v string) {
	o.Ec2Alias = &v
}

// GetEc2Metadata returns the Ec2Metadata field value if set, zero value otherwise.
func (o *AwsConfigIdentityRequest) GetEc2Metadata() []string {
	if o == nil || o.Ec2Metadata == nil {
		var ret []string
		return ret
	}
	return o.Ec2Metadata
}

// GetEc2MetadataOk returns a tuple with the Ec2Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigIdentityRequest) GetEc2MetadataOk() ([]string, bool) {
	if o == nil || o.Ec2Metadata == nil {
		return nil, false
	}
	return o.Ec2Metadata, true
}

// HasEc2Metadata returns a boolean if a field has been set.
func (o *AwsConfigIdentityRequest) HasEc2Metadata() bool {
	if o != nil && o.Ec2Metadata != nil {
		return true
	}

	return false
}

// SetEc2Metadata gets a reference to the given []string and assigns it to the Ec2Metadata field.
func (o *AwsConfigIdentityRequest) SetEc2Metadata(v []string) {
	o.Ec2Metadata = v
}

// GetIamAlias returns the IamAlias field value if set, zero value otherwise.
func (o *AwsConfigIdentityRequest) GetIamAlias() string {
	if o == nil || o.IamAlias == nil {
		var ret string
		return ret
	}
	return *o.IamAlias
}

// GetIamAliasOk returns a tuple with the IamAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigIdentityRequest) GetIamAliasOk() (*string, bool) {
	if o == nil || o.IamAlias == nil {
		return nil, false
	}
	return o.IamAlias, true
}

// HasIamAlias returns a boolean if a field has been set.
func (o *AwsConfigIdentityRequest) HasIamAlias() bool {
	if o != nil && o.IamAlias != nil {
		return true
	}

	return false
}

// SetIamAlias gets a reference to the given string and assigns it to the IamAlias field.
func (o *AwsConfigIdentityRequest) SetIamAlias(v string) {
	o.IamAlias = &v
}

// GetIamMetadata returns the IamMetadata field value if set, zero value otherwise.
func (o *AwsConfigIdentityRequest) GetIamMetadata() []string {
	if o == nil || o.IamMetadata == nil {
		var ret []string
		return ret
	}
	return o.IamMetadata
}

// GetIamMetadataOk returns a tuple with the IamMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsConfigIdentityRequest) GetIamMetadataOk() ([]string, bool) {
	if o == nil || o.IamMetadata == nil {
		return nil, false
	}
	return o.IamMetadata, true
}

// HasIamMetadata returns a boolean if a field has been set.
func (o *AwsConfigIdentityRequest) HasIamMetadata() bool {
	if o != nil && o.IamMetadata != nil {
		return true
	}

	return false
}

// SetIamMetadata gets a reference to the given []string and assigns it to the IamMetadata field.
func (o *AwsConfigIdentityRequest) SetIamMetadata(v []string) {
	o.IamMetadata = v
}

func (o AwsConfigIdentityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ec2Alias != nil {
		toSerialize["ec2_alias"] = o.Ec2Alias
	}
	if o.Ec2Metadata != nil {
		toSerialize["ec2_metadata"] = o.Ec2Metadata
	}
	if o.IamAlias != nil {
		toSerialize["iam_alias"] = o.IamAlias
	}
	if o.IamMetadata != nil {
		toSerialize["iam_metadata"] = o.IamMetadata
	}
	return json.Marshal(toSerialize)
}

type NullableAwsConfigIdentityRequest struct {
	value *AwsConfigIdentityRequest
	isSet bool
}

func (v NullableAwsConfigIdentityRequest) Get() *AwsConfigIdentityRequest {
	return v.value
}

func (v *NullableAwsConfigIdentityRequest) Set(val *AwsConfigIdentityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsConfigIdentityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsConfigIdentityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsConfigIdentityRequest(val *AwsConfigIdentityRequest) *NullableAwsConfigIdentityRequest {
	return &NullableAwsConfigIdentityRequest{value: val, isSet: true}
}

func (v NullableAwsConfigIdentityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsConfigIdentityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


