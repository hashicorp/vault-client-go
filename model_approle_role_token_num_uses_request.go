/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// ApproleRoleTokenNumUsesRequest struct for ApproleRoleTokenNumUsesRequest
type ApproleRoleTokenNumUsesRequest struct {
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
}

// NewApproleRoleTokenNumUsesRequest instantiates a new ApproleRoleTokenNumUsesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproleRoleTokenNumUsesRequest() *ApproleRoleTokenNumUsesRequest {
	this := ApproleRoleTokenNumUsesRequest{}
	return &this
}

// NewApproleRoleTokenNumUsesRequestWithDefaults instantiates a new ApproleRoleTokenNumUsesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproleRoleTokenNumUsesRequestWithDefaults() *ApproleRoleTokenNumUsesRequest {
	this := ApproleRoleTokenNumUsesRequest{}
	return &this
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *ApproleRoleTokenNumUsesRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleTokenNumUsesRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *ApproleRoleTokenNumUsesRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *ApproleRoleTokenNumUsesRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

func (o ApproleRoleTokenNumUsesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	return json.Marshal(toSerialize)
}

type NullableApproleRoleTokenNumUsesRequest struct {
	value *ApproleRoleTokenNumUsesRequest
	isSet bool
}

func (v NullableApproleRoleTokenNumUsesRequest) Get() *ApproleRoleTokenNumUsesRequest {
	return v.value
}

func (v *NullableApproleRoleTokenNumUsesRequest) Set(val *ApproleRoleTokenNumUsesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproleRoleTokenNumUsesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproleRoleTokenNumUsesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproleRoleTokenNumUsesRequest(val *ApproleRoleTokenNumUsesRequest) *NullableApproleRoleTokenNumUsesRequest {
	return &NullableApproleRoleTokenNumUsesRequest{value: val, isSet: true}
}

func (v NullableApproleRoleTokenNumUsesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproleRoleTokenNumUsesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


