{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"context"
	"net/http"
	"net/url"
{{#imports}}	"{{import}}"
{{/imports}}

	"github.com/hashicorp/vault-client-go/schema"
)

// {{classname}} is a simple wrapper around the client for {{classname}} requests
type {{classname}} struct {
	client *Client
}
{{#operation}}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
// {{operationId}} {{{summary}}}
{{#notes}}
// {{{notes}}}
{{/notes}}
{{#pathParams}}
{{#required}}
{{#description}}
// {{paramName}}: {{.}}
{{/description}}
{{/required}}
{{/pathParams}}
{{#bodyParams}}
{{#description}}
// {{paramName}}: {{.}}
{{/description}}
{{/bodyParams}}
{{#queryParams}}
{{^required}}
{{#description}}
// {{paramName}}: {{.}}
{{/description}}
{{/required}}
{{/queryParams}}
func (a *{{{classname}}}) {{nickname}}(ctx context.Context{{#pathParams}}{{#required}}, {{paramName}} {{{dataType}}}{{/required}}{{/pathParams}}{{#bodyParams}}, request schema.{{{dataType}}}{{/bodyParams}}{{#queryParams}}{{^required}}, {{paramName}} {{{dataType}}}{{/required}}{{/queryParams}}, options ...RequestOption) (*Response[{{#returnType}}schema.{{{.}}}{{/returnType}}{{^returnType}}map[string]interface{}{{/returnType}}], error) {
	requestModifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

	requestPath := "/v1{{{path}}}"{{#pathParams}}{{^required}}
	requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape(requestModifiers.mountPathOr({{#defaultValue}}{{{.}}}{{/defaultValue}})), -1){{/required}}{{/pathParams}}{{#pathParams}}{{#required}}
	requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape({{paramName}}), -1){{/required}}{{/pathParams}}

	requestQueryParameters := make(url.Values){{#queryParams}}{{#required}}
	requestQueryParameters.Set("{{paramName}}", "true"){{/required}}{{^required}}
	requestQueryParameters.Set("{{paramName}}", url.QueryEscape({{paramName}})){{/required}}{{/queryParams}}

{{#bodyParams}}
	return sendStructuredRequestParseResponse[{{#returnType}}schema.{{{.}}}{{/returnType}}{{^returnType}}map[string]interface{}{{/returnType}}](
		ctx,
		a.client,
		http.Method{{httpMethod}},
		requestPath,
	 	request,
		requestQueryParameters,
		requestModifiers,
	)
{{/bodyParams}}
{{^bodyParams}}
	return sendRequestParseResponse[{{#returnType}}schema.{{{.}}}{{/returnType}}{{^returnType}}map[string]interface{}{{/returnType}}](
		ctx,
		a.client,
		http.Method{{httpMethod}},
		requestPath,
		nil,       // request body
		requestQueryParameters,
		requestModifiers,
	)
{{/bodyParams}}
}
{{/operation}}
{{/operations}}
