openapi: 3.0.2
info:
  description: HTTP API that gives you full access to Vault. All API routes are prefixed
    with `/v1/`.
  license:
    name: Mozilla Public License 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0
  title: HashiCorp Vault API
  version: 1.13.0
servers:
- url: /
paths:
  /ad/config:
    delete:
      operationId: deleteAdConfig
      responses:
        "204":
          description: empty body
      summary: Configure the AD server to connect to, along with password options.
      tags:
      - secrets
    description: Configure the AD server to connect to, along with password options.
    get:
      operationId: getAdConfig
      responses:
        "200":
          description: OK
      summary: Configure the AD server to connect to, along with password options.
      tags:
      - secrets
    post:
      operationId: postAdConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the AD server to connect to, along with password options.
      tags:
      - secrets
  /ad/creds/{name}:
    description: Retrieve a role's creds by role name.
    get:
      operationId: getAdCredsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ad/library:
    description: List the name of each set of service accounts currently stored.
    get:
      operationId: getAdLibrary
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ad/library/manage/{name}/check-in:
    description: Force checking service accounts in to the library.
    post:
      operationId: postAdLibraryManageNameCheckIn
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdLibraryManageCheckInRequest'
      responses:
        "200":
          description: OK
      summary: Check service accounts in to the library.
      tags:
      - secrets
  /ad/library/{name}:
    delete:
      operationId: deleteAdLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a library set.
      tags:
      - secrets
    description: Build a library of service accounts that can be checked out.
    get:
      operationId: getAdLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read a library set.
      tags:
      - secrets
    post:
      operationId: postAdLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdLibraryRequest'
      responses:
        "200":
          description: OK
      summary: Update a library set.
      tags:
      - secrets
    x-vault-createSupported: true
  /ad/library/{name}/check-in:
    description: Check service accounts in to the library.
    post:
      operationId: postAdLibraryNameCheckIn
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdLibraryCheckInRequest'
      responses:
        "200":
          description: OK
      summary: Check service accounts in to the library.
      tags:
      - secrets
  /ad/library/{name}/check-out:
    description: Check a service account out from the library.
    post:
      operationId: postAdLibraryNameCheckOut
      parameters:
      - description: Name of the set
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdLibraryCheckOutRequest'
      responses:
        "200":
          description: OK
      summary: Check a service account out from the library.
      tags:
      - secrets
  /ad/library/{name}/status:
    description: Check the status of the service accounts in a library.
    get:
      operationId: getAdLibraryNameStatus
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Check the status of the service accounts in a library set.
      tags:
      - secrets
  /ad/roles:
    description: List the name of each role currently stored.
    get:
      operationId: getAdRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the name of each role currently stored.
      tags:
      - secrets
  /ad/roles/{name}:
    delete:
      operationId: deleteAdRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage roles to build links between Vault and Active Directory service
        accounts.
      tags:
      - secrets
    description: Manage roles to build links between Vault and Active Directory service
      accounts.
    get:
      operationId: getAdRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage roles to build links between Vault and Active Directory service
        accounts.
      tags:
      - secrets
    post:
      operationId: postAdRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdRolesRequest'
      responses:
        "200":
          description: OK
      summary: Manage roles to build links between Vault and Active Directory service
        accounts.
      tags:
      - secrets
  /ad/rotate-role/{name}:
    description: Request to rotate the role's credentials.
    post:
      operationId: postAdRotateRoleName
      parameters:
      - description: Name of the static role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /ad/rotate-root:
    description: Request to rotate the role's credentials.
    get:
      operationId: getAdRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postAdRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /alicloud/config:
    delete:
      operationId: deleteAlicloudConfig
      responses:
        "204":
          description: empty body
      summary: Configure the access key and secret to use for RAM and STS calls.
      tags:
      - secrets
    description: Configure the access key and secret to use for RAM and STS calls.
    get:
      operationId: getAlicloudConfig
      responses:
        "200":
          description: OK
      summary: Configure the access key and secret to use for RAM and STS calls.
      tags:
      - secrets
    post:
      operationId: postAlicloudConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlicloudConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the access key and secret to use for RAM and STS calls.
      tags:
      - secrets
  /alicloud/creds/{name}:
    description: Generate an API key or STS credential using the given role's configuration.'
    get:
      operationId: getAlicloudCredsName
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate an API key or STS credential using the given role's configuration.'
      tags:
      - secrets
  /alicloud/role:
    description: List the existing roles in this backend.
    get:
      operationId: getAlicloudRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the existing roles in this backend.
      tags:
      - secrets
  /alicloud/role/{name}:
    delete:
      operationId: deleteAlicloudRoleName
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Read, write and reference policies and roles that API keys or STS credentials
        can be made for.
      tags:
      - secrets
    description: Read, write and reference policies and roles that API keys or STS
      credentials can be made for.
    get:
      operationId: getAlicloudRoleName
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read, write and reference policies and roles that API keys or STS credentials
        can be made for.
      tags:
      - secrets
    post:
      operationId: postAlicloudRoleName
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlicloudRoleRequest'
      responses:
        "200":
          description: OK
      summary: Read, write and reference policies and roles that API keys or STS credentials
        can be made for.
      tags:
      - secrets
    x-vault-createSupported: true
  /auth/alicloud/login:
    description: Authenticates an RAM entity with Vault.
    post:
      operationId: postAuthAlicloudLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlicloudLoginRequest'
      responses:
        "200":
          description: OK
      summary: Authenticates an RAM entity with Vault.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/alicloud/role:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthAlicloudRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles that are registered with Vault.
      tags:
      - auth
  /auth/alicloud/role/{role}:
    delete:
      operationId: deleteAuthAlicloudRoleRole
      parameters:
      - description: The name of the role as it should appear in Vault.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Create a role and associate policies to it.
      tags:
      - auth
    description: Create a role and associate policies to it.
    get:
      operationId: getAuthAlicloudRoleRole
      parameters:
      - description: The name of the role as it should appear in Vault.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Create a role and associate policies to it.
      tags:
      - auth
    post:
      operationId: postAuthAlicloudRoleRole
      parameters:
      - description: The name of the role as it should appear in Vault.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlicloudRoleRequest'
      responses:
        "200":
          description: OK
      summary: Create a role and associate policies to it.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/alicloud/roles:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthAlicloudRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles that are registered with Vault.
      tags:
      - auth
  /auth/approle/login:
    description: Issue a token based on the credentials supplied
    post:
      operationId: postAuthApproleLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/approle/role:
    description: Lists all the roles registered with the backend.
    get:
      operationId: getAuthApproleRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles registered with the backend.
      tags:
      - auth
  /auth/approle/role/{role_name}:
    delete:
      operationId: deleteAuthApproleRoleRole_name
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Register an role with the backend.
      tags:
      - auth
    description: Register an role with the backend.
    get:
      operationId: getAuthApproleRoleRole_name
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Register an role with the backend.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_name
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleRequest'
      responses:
        "200":
          description: OK
      summary: Register an role with the backend.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/approle/role/{role_name}/bind-secret-id:
    delete:
      operationId: deleteAuthApproleRoleRole_nameBindSecretId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Impose secret_id to be presented during login using this role.
      tags:
      - auth
    description: Impose secret_id to be presented during login using this role.
    get:
      operationId: getAuthApproleRoleRole_nameBindSecretId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Impose secret_id to be presented during login using this role.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameBindSecretId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleBindSecretIdRequest'
      responses:
        "200":
          description: OK
      summary: Impose secret_id to be presented during login using this role.
      tags:
      - auth
  /auth/approle/role/{role_name}/bound-cidr-list:
    delete:
      operationId: deleteAuthApproleRoleRole_nameBoundCidrList
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: |-
        Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP
        addresses which can perform the login operation
      tags:
      - auth
    description: 'Deprecated: Comma separated list of CIDR blocks, if set, specifies
      blocks of IP addresses which can perform the login operation'
    get:
      operationId: getAuthApproleRoleRole_nameBoundCidrList
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: |-
        Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP
        addresses which can perform the login operation
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameBoundCidrList
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleBoundCidrListRequest'
      responses:
        "200":
          description: OK
      summary: |-
        Deprecated: Comma separated list of CIDR blocks, if set, specifies blocks of IP
        addresses which can perform the login operation
      tags:
      - auth
  /auth/approle/role/{role_name}/custom-secret-id:
    description: Assign a SecretID of choice against the role.
    post:
      operationId: postAuthApproleRoleRole_nameCustomSecretId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleCustomSecretIdRequest'
      responses:
        "200":
          description: OK
      summary: Assign a SecretID of choice against the role.
      tags:
      - auth
  /auth/approle/role/{role_name}/local-secret-ids:
    description: Enables cluster local secret IDs
    get:
      operationId: getAuthApproleRoleRole_nameLocalSecretIds
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Enables cluster local secret IDs
      tags:
      - auth
  /auth/approle/role/{role_name}/period:
    delete:
      operationId: deleteAuthApproleRoleRole_namePeriod
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Updates the value of 'period' on the role
      tags:
      - auth
    description: Updates the value of 'period' on the role
    get:
      operationId: getAuthApproleRoleRole_namePeriod
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Updates the value of 'period' on the role
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_namePeriod
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRolePeriodRequest'
      responses:
        "200":
          description: OK
      summary: Updates the value of 'period' on the role
      tags:
      - auth
  /auth/approle/role/{role_name}/policies:
    delete:
      operationId: deleteAuthApproleRoleRole_namePolicies
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Policies of the role.
      tags:
      - auth
    description: Policies of the role.
    get:
      operationId: getAuthApproleRoleRole_namePolicies
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Policies of the role.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_namePolicies
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRolePoliciesRequest'
      responses:
        "200":
          description: OK
      summary: Policies of the role.
      tags:
      - auth
  /auth/approle/role/{role_name}/role-id:
    description: Returns the 'role_id' of the role.
    get:
      operationId: getAuthApproleRoleRole_nameRoleId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Returns the 'role_id' of the role.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameRoleId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleRoleIdRequest'
      responses:
        "200":
          description: OK
      summary: Returns the 'role_id' of the role.
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id:
    description: Generate a SecretID against this role.
    get:
      operationId: getAuthApproleRoleRole_nameSecretId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Generate a SecretID against this role.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameSecretId
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdRequest'
      responses:
        "200":
          description: OK
      summary: Generate a SecretID against this role.
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id-accessor/destroy:
    delete:
      operationId: deleteAuthApproleRoleRole_nameSecretIdAccessorDestroy
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdAccessorDestroy
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdAccessorDestroyRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id-accessor/lookup:
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdAccessorLookup
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdAccessorLookupRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id-bound-cidrs:
    delete:
      operationId: deleteAuthApproleRoleRole_nameSecretIdBoundCidrs
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: |-
        Comma separated list of CIDR blocks, if set, specifies blocks of IP
        addresses which can perform the login operation
      tags:
      - auth
    description: Comma separated list of CIDR blocks, if set, specifies blocks of
      IP addresses which can perform the login operation
    get:
      operationId: getAuthApproleRoleRole_nameSecretIdBoundCidrs
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: |-
        Comma separated list of CIDR blocks, if set, specifies blocks of IP
        addresses which can perform the login operation
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdBoundCidrs
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdBoundCidrsRequest'
      responses:
        "200":
          description: OK
      summary: |-
        Comma separated list of CIDR blocks, if set, specifies blocks of IP
        addresses which can perform the login operation
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id-num-uses:
    delete:
      operationId: deleteAuthApproleRoleRole_nameSecretIdNumUses
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Use limit of the SecretID generated against the role.
      tags:
      - auth
    description: Use limit of the SecretID generated against the role.
    get:
      operationId: getAuthApproleRoleRole_nameSecretIdNumUses
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Use limit of the SecretID generated against the role.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdNumUses
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdNumUsesRequest'
      responses:
        "200":
          description: OK
      summary: Use limit of the SecretID generated against the role.
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id-ttl:
    delete:
      operationId: deleteAuthApproleRoleRole_nameSecretIdTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Duration in seconds of the SecretID generated against the role.
      tags:
      - auth
    description: Duration in seconds of the SecretID generated against the role.
    get:
      operationId: getAuthApproleRoleRole_nameSecretIdTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Duration in seconds of the SecretID generated against the role.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdTtlRequest'
      responses:
        "200":
          description: OK
      summary: Duration in seconds of the SecretID generated against the role.
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id/destroy:
    delete:
      operationId: deleteAuthApproleRoleRole_nameSecretIdDestroy
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Invalidate an issued secret_id
      tags:
      - auth
    description: Invalidate an issued secret_id
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdDestroy
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdDestroyRequest'
      responses:
        "200":
          description: OK
      summary: Invalidate an issued secret_id
      tags:
      - auth
  /auth/approle/role/{role_name}/secret-id/lookup:
    description: Read the properties of an issued secret_id
    post:
      operationId: postAuthApproleRoleRole_nameSecretIdLookup
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleSecretIdLookupRequest'
      responses:
        "200":
          description: OK
      summary: Read the properties of an issued secret_id
      tags:
      - auth
  /auth/approle/role/{role_name}/token-bound-cidrs:
    delete:
      operationId: deleteAuthApproleRoleRole_nameTokenBoundCidrs
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: |-
        Comma separated string or list of CIDR blocks. If set, specifies the blocks of
        IP addresses which can use the returned token.
      tags:
      - auth
    description: Comma separated string or list of CIDR blocks. If set, specifies
      the blocks of IP addresses which can use the returned token.
    get:
      operationId: getAuthApproleRoleRole_nameTokenBoundCidrs
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: |-
        Comma separated string or list of CIDR blocks. If set, specifies the blocks of
        IP addresses which can use the returned token.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameTokenBoundCidrs
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleTokenBoundCidrsRequest'
      responses:
        "200":
          description: OK
      summary: |-
        Comma separated string or list of CIDR blocks. If set, specifies the blocks of
        IP addresses which can use the returned token.
      tags:
      - auth
  /auth/approle/role/{role_name}/token-max-ttl:
    delete:
      operationId: deleteAuthApproleRoleRole_nameTokenMaxTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: |-
        Duration in seconds, the maximum lifetime of the tokens issued by using
        the SecretIDs that were generated against this role, after which the
        tokens are not allowed to be renewed.
      tags:
      - auth
    description: Duration in seconds, the maximum lifetime of the tokens issued by
      using the SecretIDs that were generated against this role, after which the tokens
      are not allowed to be renewed.
    get:
      operationId: getAuthApproleRoleRole_nameTokenMaxTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: |-
        Duration in seconds, the maximum lifetime of the tokens issued by using
        the SecretIDs that were generated against this role, after which the
        tokens are not allowed to be renewed.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameTokenMaxTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleTokenMaxTtlRequest'
      responses:
        "200":
          description: OK
      summary: |-
        Duration in seconds, the maximum lifetime of the tokens issued by using
        the SecretIDs that were generated against this role, after which the
        tokens are not allowed to be renewed.
      tags:
      - auth
  /auth/approle/role/{role_name}/token-num-uses:
    delete:
      operationId: deleteAuthApproleRoleRole_nameTokenNumUses
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Number of times issued tokens can be used
      tags:
      - auth
    description: Number of times issued tokens can be used
    get:
      operationId: getAuthApproleRoleRole_nameTokenNumUses
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Number of times issued tokens can be used
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameTokenNumUses
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleTokenNumUsesRequest'
      responses:
        "200":
          description: OK
      summary: Number of times issued tokens can be used
      tags:
      - auth
  /auth/approle/role/{role_name}/token-ttl:
    delete:
      operationId: deleteAuthApproleRoleRole_nameTokenTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: |-
        Duration in seconds, the lifetime of the token issued by using the SecretID that
        is generated against this role, before which the token needs to be renewed.
      tags:
      - auth
    description: Duration in seconds, the lifetime of the token issued by using the
      SecretID that is generated against this role, before which the token needs to
      be renewed.
    get:
      operationId: getAuthApproleRoleRole_nameTokenTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: |-
        Duration in seconds, the lifetime of the token issued by using the SecretID that
        is generated against this role, before which the token needs to be renewed.
      tags:
      - auth
    post:
      operationId: postAuthApproleRoleRole_nameTokenTtl
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproleRoleTokenTtlRequest'
      responses:
        "200":
          description: OK
      summary: |-
        Duration in seconds, the lifetime of the token issued by using the SecretID that
        is generated against this role, before which the token needs to be renewed.
      tags:
      - auth
  /auth/approle/tidy/secret-id:
    description: Trigger the clean-up of expired SecretID entries.
    post:
      operationId: postAuthApproleTidySecretId
      responses:
        "200":
          description: OK
      summary: Trigger the clean-up of expired SecretID entries.
      tags:
      - auth
  /auth/aws/config/certificate/{cert_name}:
    delete:
      operationId: deleteAuthAwsConfigCertificateCert_name
      parameters:
      - description: Name of the certificate.
        explode: false
        in: path
        name: cert_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Adds the AWS Public Key that is used to verify the PKCS#7 signature
      of the identity document.
    get:
      operationId: getAuthAwsConfigCertificateCert_name
      parameters:
      - description: Name of the certificate.
        explode: false
        in: path
        name: cert_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigCertificateCert_name
      parameters:
      - description: Name of the certificate.
        explode: false
        in: path
        name: cert_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigCertificateRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/config/certificates:
    description: Lists all the AWS public certificates that are registered with the
      backend.
    get:
      operationId: getAuthAwsConfigCertificates
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/config/client:
    delete:
      operationId: deleteAuthAwsConfigClient
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Configure AWS IAM credentials that are used to query instance and
      role details from the AWS API.
    get:
      operationId: getAuthAwsConfigClient
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigClientRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/config/identity:
    description: Configure the way the AWS auth method interacts with the identity
      store
    get:
      operationId: getAuthAwsConfigIdentity
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigIdentityRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/config/rotate-root:
    description: Request to rotate the AWS credentials used by Vault
    post:
      operationId: postAuthAwsConfigRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/config/sts:
    description: List all the AWS account/STS role relationships registered with Vault.
    get:
      operationId: getAuthAwsConfigSts
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/config/sts/{account_id}:
    delete:
      operationId: deleteAuthAwsConfigStsAccount_id
      parameters:
      - description: AWS account ID to be associated with STS role. If set, Vault
          will use assumed credentials to verify any login attempts from EC2 instances
          in this account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Specify STS roles to be assumed for certain AWS accounts.
    get:
      operationId: getAuthAwsConfigStsAccount_id
      parameters:
      - description: AWS account ID to be associated with STS role. If set, Vault
          will use assumed credentials to verify any login attempts from EC2 instances
          in this account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigStsAccount_id
      parameters:
      - description: AWS account ID to be associated with STS role. If set, Vault
          will use assumed credentials to verify any login attempts from EC2 instances
          in this account.
        explode: false
        in: path
        name: account_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigStsRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/config/tidy/identity-accesslist:
    delete:
      operationId: deleteAuthAwsConfigTidyIdentityAccesslist
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Configures the periodic tidying operation of the access list identity
      entries.
    get:
      operationId: getAuthAwsConfigTidyIdentityAccesslist
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigTidyIdentityAccesslist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigTidyIdentityAccesslistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/config/tidy/identity-whitelist:
    delete:
      operationId: deleteAuthAwsConfigTidyIdentityWhitelist
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Configures the periodic tidying operation of the access list identity
      entries.
    get:
      operationId: getAuthAwsConfigTidyIdentityWhitelist
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigTidyIdentityWhitelist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigTidyIdentityWhitelistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/config/tidy/roletag-blacklist:
    delete:
      operationId: deleteAuthAwsConfigTidyRoletagBlacklist
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Configures the periodic tidying operation of the deny listed role
      tag entries.
    get:
      operationId: getAuthAwsConfigTidyRoletagBlacklist
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigTidyRoletagBlacklist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigTidyRoletagBlacklistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/config/tidy/roletag-denylist:
    delete:
      operationId: deleteAuthAwsConfigTidyRoletagDenylist
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Configures the periodic tidying operation of the deny listed role
      tag entries.
    get:
      operationId: getAuthAwsConfigTidyRoletagDenylist
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsConfigTidyRoletagDenylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigTidyRoletagDenylistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/identity-accesslist:
    description: Lists the items present in the identity access list.
    get:
      operationId: getAuthAwsIdentityAccesslist
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/identity-accesslist/{instance_id}:
    delete:
      operationId: deleteAuthAwsIdentityAccesslistInstance_id
      parameters:
      - description: EC2 instance ID. A successful login operation from an EC2 instance
          gets cached in this accesslist, keyed off of instance ID.
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Read or delete entries in the identity access list.
    get:
      operationId: getAuthAwsIdentityAccesslistInstance_id
      parameters:
      - description: EC2 instance ID. A successful login operation from an EC2 instance
          gets cached in this accesslist, keyed off of instance ID.
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/identity-whitelist:
    description: Lists the items present in the identity access list.
    get:
      operationId: getAuthAwsIdentityWhitelist
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/identity-whitelist/{instance_id}:
    delete:
      operationId: deleteAuthAwsIdentityWhitelistInstance_id
      parameters:
      - description: EC2 instance ID. A successful login operation from an EC2 instance
          gets cached in this accesslist, keyed off of instance ID.
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Read or delete entries in the identity access list.
    get:
      operationId: getAuthAwsIdentityWhitelistInstance_id
      parameters:
      - description: EC2 instance ID. A successful login operation from an EC2 instance
          gets cached in this accesslist, keyed off of instance ID.
        explode: false
        in: path
        name: instance_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/login:
    description: Authenticates an EC2 instance with Vault.
    post:
      operationId: postAuthAwsLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/aws/role:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthAwsRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/role/{role}:
    delete:
      operationId: deleteAuthAwsRoleRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Create a role and associate policies to it.
    get:
      operationId: getAuthAwsRoleRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsRoleRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/aws/role/{role}/tag:
    description: Create a tag on a role in order to be able to further restrict the
      capabilities of a role.
    post:
      operationId: postAuthAwsRoleRoleTag
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsRoleTagRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/roles:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthAwsRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/roletag-blacklist:
    description: Lists the deny list role tags.
    get:
      operationId: getAuthAwsRoletagBlacklist
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/roletag-blacklist/{role_tag}:
    delete:
      operationId: deleteAuthAwsRoletagBlacklistRole_tag
      parameters:
      - description: Role tag to be deny listed. The tag can be supplied as-is. In
          order to avoid any encoding problems, it can be base64 encoded.
        explode: false
        in: path
        name: role_tag
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Blacklist a previously created role tag.
    get:
      operationId: getAuthAwsRoletagBlacklistRole_tag
      parameters:
      - description: Role tag to be deny listed. The tag can be supplied as-is. In
          order to avoid any encoding problems, it can be base64 encoded.
        explode: false
        in: path
        name: role_tag
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsRoletagBlacklistRole_tag
      parameters:
      - description: Role tag to be deny listed. The tag can be supplied as-is. In
          order to avoid any encoding problems, it can be base64 encoded.
        explode: false
        in: path
        name: role_tag
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/roletag-denylist:
    description: Lists the deny list role tags.
    get:
      operationId: getAuthAwsRoletagDenylist
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/roletag-denylist/{role_tag}:
    delete:
      operationId: deleteAuthAwsRoletagDenylistRole_tag
      parameters:
      - description: Role tag to be deny listed. The tag can be supplied as-is. In
          order to avoid any encoding problems, it can be base64 encoded.
        explode: false
        in: path
        name: role_tag
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Blacklist a previously created role tag.
    get:
      operationId: getAuthAwsRoletagDenylistRole_tag
      parameters:
      - description: Role tag to be deny listed. The tag can be supplied as-is. In
          order to avoid any encoding problems, it can be base64 encoded.
        explode: false
        in: path
        name: role_tag
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAwsRoletagDenylistRole_tag
      parameters:
      - description: Role tag to be deny listed. The tag can be supplied as-is. In
          order to avoid any encoding problems, it can be base64 encoded.
        explode: false
        in: path
        name: role_tag
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/tidy/identity-accesslist:
    description: Clean-up the access list instance identity entries.
    post:
      operationId: postAuthAwsTidyIdentityAccesslist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsTidyIdentityAccesslistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/tidy/identity-whitelist:
    description: Clean-up the access list instance identity entries.
    post:
      operationId: postAuthAwsTidyIdentityWhitelist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsTidyIdentityWhitelistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/tidy/roletag-blacklist:
    description: Clean-up the deny list role tag entries.
    post:
      operationId: postAuthAwsTidyRoletagBlacklist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsTidyRoletagBlacklistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/aws/tidy/roletag-denylist:
    description: Clean-up the deny list role tag entries.
    post:
      operationId: postAuthAwsTidyRoletagDenylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsTidyRoletagDenylistRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/azure/config:
    delete:
      operationId: deleteAuthAzureConfig
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Configures the Azure authentication backend.
    get:
      operationId: getAuthAzureConfig
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAzureConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/azure/login:
    description: Authenticates Azure Managed Service Identities with Vault.
    post:
      operationId: postAuthAzureLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/azure/role:
    description: Lists all the roles registered with the backend.
    get:
      operationId: getAuthAzureRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/azure/role/{name}:
    delete:
      operationId: deleteAuthAzureRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Register an role with the backend.
    get:
      operationId: getAuthAzureRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthAzureRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/centrify/config:
    description: This path allows you to configure the centrify auth provider to interact
      with the Centrify Identity Services Platform for authenticating users.
    get:
      operationId: getAuthCentrifyConfig
      responses:
        "200":
          description: OK
      summary: |-
        This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform
        for authenticating users.
      tags:
      - auth
    post:
      operationId: postAuthCentrifyConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CentrifyConfigRequest'
      responses:
        "200":
          description: OK
      summary: |-
        This path allows you to configure the centrify auth provider to interact with the Centrify Identity Services Platform
        for authenticating users.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/centrify/login:
    description: Log in with a username and password.
    post:
      operationId: postAuthCentrifyLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CentrifyLoginRequest'
      responses:
        "200":
          description: OK
      summary: Log in with a username and password.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/cert/certs:
    description: Manage trusted certificates used for authentication.
    get:
      operationId: getAuthCertCerts
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage trusted certificates used for authentication.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: Certificate
  /auth/cert/certs/{name}:
    delete:
      operationId: deleteAuthCertCertsName
      parameters:
      - description: The name of the certificate
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage trusted certificates used for authentication.
      tags:
      - auth
    description: Manage trusted certificates used for authentication.
    get:
      operationId: getAuthCertCertsName
      parameters:
      - description: The name of the certificate
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage trusted certificates used for authentication.
      tags:
      - auth
    post:
      operationId: postAuthCertCertsName
      parameters:
      - description: The name of the certificate
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertCertsRequest'
      responses:
        "200":
          description: OK
      summary: Manage trusted certificates used for authentication.
      tags:
      - auth
    x-vault-displayAttrs:
      itemType: Certificate
      action: Create
  /auth/cert/config:
    get:
      operationId: getAuthCertConfig
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthCertConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/cert/crls/{name}:
    delete:
      operationId: deleteAuthCertCrlsName
      parameters:
      - description: The name of the certificate
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage Certificate Revocation Lists checked during authentication.
      tags:
      - auth
    description: Manage Certificate Revocation Lists checked during authentication.
    get:
      operationId: getAuthCertCrlsName
      parameters:
      - description: The name of the certificate
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage Certificate Revocation Lists checked during authentication.
      tags:
      - auth
    post:
      operationId: postAuthCertCrlsName
      parameters:
      - description: The name of the certificate
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertCrlsRequest'
      responses:
        "200":
          description: OK
      summary: Manage Certificate Revocation Lists checked during authentication.
      tags:
      - auth
  /auth/cert/login:
    post:
      operationId: postAuthCertLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/cf/config:
    delete:
      operationId: deleteAuthCfConfig
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Provide Vault with the CA certificate used to issue all client certificates.
    get:
      operationId: getAuthCfConfig
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthCfConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/cf/login:
    description: Authenticates an entity with Vault.
    post:
      operationId: postAuthCfLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/cf/roles:
    description: List the existing roles in this backend.
    get:
      operationId: getAuthCfRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/cf/roles/{role}:
    delete:
      operationId: deleteAuthCfRolesRole
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Read, write and reference policies and roles that tokens can be made
      for.
    get:
      operationId: getAuthCfRolesRole
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthCfRolesRole
      parameters:
      - description: The name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CfRolesRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/gcp/config:
    description: Configure credentials used to query the GCP IAM API to verify authenticating
      service accounts
    get:
      operationId: getAuthGcpConfig
      responses:
        "200":
          description: OK
      summary: Configure credentials used to query the GCP IAM API to verify authenticating
        service accounts
      tags:
      - auth
    post:
      operationId: postAuthGcpConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure credentials used to query the GCP IAM API to verify authenticating
        service accounts
      tags:
      - auth
  /auth/gcp/login:
    description: Authenticates Google Cloud Platform entities with Vault.
    post:
      operationId: postAuthGcpLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/gcp/role:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthGcpRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles that are registered with Vault.
      tags:
      - auth
  /auth/gcp/role/{name}:
    delete:
      operationId: deleteAuthGcpRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Create a GCP role with associated policies and required attributes.
      tags:
      - auth
    description: Create a GCP role with associated policies and required attributes.
    get:
      operationId: getAuthGcpRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Create a GCP role with associated policies and required attributes.
      tags:
      - auth
    post:
      operationId: postAuthGcpRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpRoleRequest'
      responses:
        "200":
          description: OK
      summary: Create a GCP role with associated policies and required attributes.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/gcp/role/{name}/labels:
    description: Add or remove labels for an existing 'gce' role
    post:
      operationId: postAuthGcpRoleNameLabels
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpRoleLabelsRequest'
      responses:
        "200":
          description: OK
      summary: Add or remove labels for an existing 'gce' role
      tags:
      - auth
  /auth/gcp/role/{name}/service-accounts:
    description: Add or remove service accounts for an existing `iam` role
    post:
      operationId: postAuthGcpRoleNameServiceAccounts
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpRoleServiceAccountsRequest'
      responses:
        "200":
          description: OK
      summary: Add or remove service accounts for an existing `iam` role
      tags:
      - auth
  /auth/gcp/roles:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthGcpRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles that are registered with Vault.
      tags:
      - auth
  /auth/github/config:
    get:
      operationId: getAuthGithubConfig
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthGithubConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/github/login:
    post:
      operationId: postAuthGithubLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/github/map/teams:
    description: Read mappings for teams
    get:
      operationId: getAuthGithubMapTeams
      parameters:
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Read mappings for teams
      tags:
      - auth
  /auth/github/map/teams/{key}:
    delete:
      operationId: deleteAuthGithubMapTeamsKey
      parameters:
      - description: Key for the teams mapping
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Read/write/delete a single teams mapping
      tags:
      - auth
    description: Read/write/delete a single teams mapping
    get:
      operationId: getAuthGithubMapTeamsKey
      parameters:
      - description: Key for the teams mapping
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read/write/delete a single teams mapping
      tags:
      - auth
    post:
      operationId: postAuthGithubMapTeamsKey
      parameters:
      - description: Key for the teams mapping
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubMapTeamsRequest'
      responses:
        "200":
          description: OK
      summary: Read/write/delete a single teams mapping
      tags:
      - auth
    x-vault-createSupported: true
  /auth/github/map/users:
    description: Read mappings for users
    get:
      operationId: getAuthGithubMapUsers
      parameters:
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Read mappings for users
      tags:
      - auth
  /auth/github/map/users/{key}:
    delete:
      operationId: deleteAuthGithubMapUsersKey
      parameters:
      - description: Key for the users mapping
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Read/write/delete a single users mapping
      tags:
      - auth
    description: Read/write/delete a single users mapping
    get:
      operationId: getAuthGithubMapUsersKey
      parameters:
      - description: Key for the users mapping
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read/write/delete a single users mapping
      tags:
      - auth
    post:
      operationId: postAuthGithubMapUsersKey
      parameters:
      - description: Key for the users mapping
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GithubMapUsersRequest'
      responses:
        "200":
          description: OK
      summary: Read/write/delete a single users mapping
      tags:
      - auth
    x-vault-createSupported: true
  /auth/jwt/config:
    description: Configures the JWT authentication backend.
    get:
      operationId: getAuthJwtConfig
      responses:
        "200":
          description: OK
      summary: Read the current JWT authentication backend configuration.
      tags:
      - auth
    post:
      description: |-
        The JWT authentication backend validates JWTs (or OIDC) using the configured
        credentials. If using OIDC Discovery, the URL must be provided, along
        with (optionally) the CA cert to use for the connection. If performing JWT
        validation locally, a set of public keys must be provided.
      operationId: postAuthJwtConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the JWT authentication backend.
      tags:
      - auth
  /auth/jwt/login:
    description: Authenticates to Vault using a JWT (or OIDC) token.
    post:
      operationId: postAuthJwtLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtLoginRequest'
      responses:
        "200":
          description: OK
      summary: Authenticates to Vault using a JWT (or OIDC) token.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/jwt/oidc/auth_url:
    post:
      operationId: postAuthJwtOidcAuth_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtOidcAuthUrlRequest'
      responses:
        "200":
          description: OK
      summary: Request an authorization URL to start an OIDC login flow.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/jwt/oidc/callback:
    get:
      operationId: getAuthJwtOidcCallback
      responses:
        "200":
          description: OK
      summary: Callback endpoint to complete an OIDC login.
      tags:
      - auth
    post:
      operationId: postAuthJwtOidcCallback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtOidcCallbackRequest'
      responses:
        "200":
          description: OK
      summary: Callback endpoint to handle form_posts.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/jwt/role:
    description: Lists all the roles registered with the backend.
    get:
      description: The list will contain the names of the roles.
      operationId: getAuthJwtRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles registered with the backend.
      tags:
      - auth
  /auth/jwt/role/{name}:
    delete:
      operationId: deleteAuthJwtRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete an existing role.
      tags:
      - auth
    description: Register an role with the backend.
    get:
      operationId: getAuthJwtRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read an existing role.
      tags:
      - auth
    post:
      description: "A role is required to authenticate with this backend. The role\
        \ binds\n\t\tJWT token information with token policies and settings.\n\t\t\
        The bindings, token polices and token settings can all be configured\n\t\t\
        using this endpoint"
      operationId: postAuthJwtRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRoleRequest'
      responses:
        "200":
          description: OK
      summary: Register an role with the backend.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/kerberos/config:
    description: Configures the Kerberos keytab and service account.
    get:
      operationId: getAuthKerberosConfig
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthKerberosConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KerberosConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/kerberos/config/ldap:
    description: Configure the LDAP server to connect to, along with its options.
    get:
      operationId: getAuthKerberosConfigLdap
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthKerberosConfigLdap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KerberosConfigLdapRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/kerberos/groups:
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthKerberosGroups
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/kerberos/groups/{name}:
    delete:
      operationId: deleteAuthKerberosGroupsName
      parameters:
      - description: Name of the LDAP group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthKerberosGroupsName
      parameters:
      - description: Name of the LDAP group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthKerberosGroupsName
      parameters:
      - description: Name of the LDAP group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KerberosGroupsRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
  /auth/kerberos/login:
    get:
      operationId: getAuthKerberosLogin
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthKerberosLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KerberosLoginRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/kubernetes/config:
    description: Configures the JWT Public Key and Kubernetes API information.
    get:
      operationId: getAuthKubernetesConfig
      responses:
        "200":
          description: OK
      summary: Configures the JWT Public Key and Kubernetes API information.
      tags:
      - auth
    post:
      operationId: postAuthKubernetesConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KubernetesConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configures the JWT Public Key and Kubernetes API information.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/kubernetes/login:
    description: Authenticates Kubernetes service accounts with Vault.
    post:
      operationId: postAuthKubernetesLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KubernetesLoginRequest'
      responses:
        "200":
          description: OK
      summary: Authenticates Kubernetes service accounts with Vault.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/kubernetes/role:
    description: Lists all the roles registered with the backend.
    get:
      operationId: getAuthKubernetesRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles registered with the backend.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: Role
  /auth/kubernetes/role/{name}:
    delete:
      operationId: deleteAuthKubernetesRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Register an role with the backend.
      tags:
      - auth
    description: Register an role with the backend.
    get:
      operationId: getAuthKubernetesRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Register an role with the backend.
      tags:
      - auth
    post:
      operationId: postAuthKubernetesRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KubernetesRoleRequest'
      responses:
        "200":
          description: OK
      summary: Register an role with the backend.
      tags:
      - auth
    x-vault-createSupported: true
    x-vault-displayAttrs:
      itemType: Role
      action: Create
  /auth/ldap/config:
    description: Configure the LDAP server to connect to, along with its options.
    get:
      operationId: getAuthLdapConfig
      responses:
        "200":
          description: OK
      summary: Configure the LDAP server to connect to, along with its options.
      tags:
      - auth
    post:
      operationId: postAuthLdapConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the LDAP server to connect to, along with its options.
      tags:
      - auth
    x-vault-displayAttrs:
      action: Configure
  /auth/ldap/groups:
    description: Manage additional groups for users allowed to authenticate.
    get:
      operationId: getAuthLdapGroups
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: Group
  /auth/ldap/groups/{name}:
    delete:
      operationId: deleteAuthLdapGroupsName
      parameters:
      - description: Name of the LDAP group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    description: Manage additional groups for users allowed to authenticate.
    get:
      operationId: getAuthLdapGroupsName
      parameters:
      - description: Name of the LDAP group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    post:
      operationId: postAuthLdapGroupsName
      parameters:
      - description: Name of the LDAP group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapGroupsRequest'
      responses:
        "200":
          description: OK
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      itemType: Group
      action: Create
  /auth/ldap/login/{username}:
    description: Log in with a username and password.
    post:
      operationId: postAuthLdapLoginUsername
      parameters:
      - description: DN (distinguished name) to be used for login.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapLoginRequest'
      responses:
        "200":
          description: OK
      summary: Log in with a username and password.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/ldap/users:
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthLdapUsers
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: User
  /auth/ldap/users/{name}:
    delete:
      operationId: deleteAuthLdapUsersName
      parameters:
      - description: Name of the LDAP user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthLdapUsersName
      parameters:
      - description: Name of the LDAP user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    post:
      operationId: postAuthLdapUsersName
      parameters:
      - description: Name of the LDAP user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapUsersRequest'
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      itemType: User
      action: Create
  /auth/oci/config:
    delete:
      operationId: deleteAuthOciConfig
      responses:
        "204":
          description: empty body
      summary: Manages the configuration for the Vault Auth Plugin.
      tags:
      - auth
    description: Manages the configuration for the Vault Auth Plugin.
    get:
      operationId: getAuthOciConfig
      responses:
        "200":
          description: OK
      summary: Manages the configuration for the Vault Auth Plugin.
      tags:
      - auth
    post:
      operationId: postAuthOciConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OciConfigRequest'
      responses:
        "200":
          description: OK
      summary: Manages the configuration for the Vault Auth Plugin.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/oci/login:
    description: Determines the role that would be used for login from a valid OCI
      login request
  /auth/oci/login/{role}:
    description: Authenticates to Vault using OCI credentials
    post:
      operationId: postAuthOciLoginRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OciLoginRequest'
      responses:
        "200":
          description: OK
      summary: Authenticates to Vault using OCI credentials
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/oci/role:
    description: Lists all the roles that are registered with Vault.
    get:
      operationId: getAuthOciRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles that are registered with Vault.
      tags:
      - auth
  /auth/oci/role/{role}:
    delete:
      operationId: deleteAuthOciRoleRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Create a role and associate policies to it.
      tags:
      - auth
    description: Create a role and associate policies to it.
    get:
      operationId: getAuthOciRoleRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Create a role and associate policies to it.
      tags:
      - auth
    post:
      operationId: postAuthOciRoleRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OciRoleRequest'
      responses:
        "200":
          description: OK
      summary: Create a role and associate policies to it.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/oidc/config:
    description: Configures the JWT authentication backend.
    get:
      operationId: getAuthOidcConfig
      responses:
        "200":
          description: OK
      summary: Read the current JWT authentication backend configuration.
      tags:
      - auth
    post:
      description: |-
        The JWT authentication backend validates JWTs (or OIDC) using the configured
        credentials. If using OIDC Discovery, the URL must be provided, along
        with (optionally) the CA cert to use for the connection. If performing JWT
        validation locally, a set of public keys must be provided.
      operationId: postAuthOidcConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OidcConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the JWT authentication backend.
      tags:
      - auth
  /auth/oidc/login:
    description: Authenticates to Vault using a JWT (or OIDC) token.
    post:
      operationId: postAuthOidcLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OidcLoginRequest'
      responses:
        "200":
          description: OK
      summary: Authenticates to Vault using a JWT (or OIDC) token.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/oidc/oidc/auth_url:
    post:
      operationId: postAuthOidcOidcAuth_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OidcOidcAuthUrlRequest'
      responses:
        "200":
          description: OK
      summary: Request an authorization URL to start an OIDC login flow.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/oidc/oidc/callback:
    get:
      operationId: getAuthOidcOidcCallback
      responses:
        "200":
          description: OK
      summary: Callback endpoint to complete an OIDC login.
      tags:
      - auth
    post:
      operationId: postAuthOidcOidcCallback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OidcOidcCallbackRequest'
      responses:
        "200":
          description: OK
      summary: Callback endpoint to handle form_posts.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/oidc/role:
    description: Lists all the roles registered with the backend.
    get:
      description: The list will contain the names of the roles.
      operationId: getAuthOidcRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Lists all the roles registered with the backend.
      tags:
      - auth
  /auth/oidc/role/{name}:
    delete:
      operationId: deleteAuthOidcRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete an existing role.
      tags:
      - auth
    description: Register an role with the backend.
    get:
      operationId: getAuthOidcRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read an existing role.
      tags:
      - auth
    post:
      description: "A role is required to authenticate with this backend. The role\
        \ binds\n\t\tJWT token information with token policies and settings.\n\t\t\
        The bindings, token polices and token settings can all be configured\n\t\t\
        using this endpoint"
      operationId: postAuthOidcRoleName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OidcRoleRequest'
      responses:
        "200":
          description: OK
      summary: Register an role with the backend.
      tags:
      - auth
    x-vault-createSupported: true
  /auth/okta/config:
    description: This endpoint allows you to configure the Okta and its configuration
      options. The Okta organization are the characters at the front of the URL for
      Okta. Example https://ORG.okta.com
    get:
      operationId: getAuthOktaConfig
      responses:
        "200":
          description: OK
      summary: |-
        This endpoint allows you to configure the Okta and its
        configuration options.

        The Okta organization are the characters at the front of the URL for Okta.
        Example https://ORG.okta.com
      tags:
      - auth
    post:
      operationId: postAuthOktaConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OktaConfigRequest'
      responses:
        "200":
          description: OK
      summary: |-
        This endpoint allows you to configure the Okta and its
        configuration options.

        The Okta organization are the characters at the front of the URL for Okta.
        Example https://ORG.okta.com
      tags:
      - auth
    x-vault-createSupported: true
    x-vault-displayAttrs:
      action: Configure
  /auth/okta/groups:
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthOktaGroups
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: Group
  /auth/okta/groups/{name}:
    delete:
      operationId: deleteAuthOktaGroupsName
      parameters:
      - description: Name of the Okta group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthOktaGroupsName
      parameters:
      - description: Name of the Okta group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    post:
      operationId: postAuthOktaGroupsName
      parameters:
      - description: Name of the Okta group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OktaGroupsRequest'
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      itemType: Group
      action: Create
  /auth/okta/login/{username}:
    description: Log in with a username and password.
    post:
      operationId: postAuthOktaLoginUsername
      parameters:
      - description: Username to be used for login.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OktaLoginRequest'
      responses:
        "200":
          description: OK
      summary: Log in with a username and password.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/okta/users:
    description: Manage additional groups for users allowed to authenticate.
    get:
      operationId: getAuthOktaUsers
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: User
  /auth/okta/users/{name}:
    delete:
      operationId: deleteAuthOktaUsersName
      parameters:
      - description: Name of the user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    description: Manage additional groups for users allowed to authenticate.
    get:
      operationId: getAuthOktaUsersName
      parameters:
      - description: Name of the user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    post:
      operationId: postAuthOktaUsersName
      parameters:
      - description: Name of the user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OktaUsersRequest'
      responses:
        "200":
          description: OK
      summary: Manage additional groups for users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      itemType: User
      action: Create
  /auth/okta/verify/{nonce}:
    get:
      operationId: getAuthOktaVerifyNonce
      parameters:
      - description: Nonce provided during a login request to retrieve the number
          verification challenge for the matching request.
        explode: false
        in: path
        name: nonce
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/radius/config:
    description: Configure the RADIUS server to connect to, along with its options.
    get:
      operationId: getAuthRadiusConfig
      responses:
        "200":
          description: OK
      summary: Configure the RADIUS server to connect to, along with its options.
      tags:
      - auth
    post:
      operationId: postAuthRadiusConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RadiusConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the RADIUS server to connect to, along with its options.
      tags:
      - auth
    x-vault-createSupported: true
    x-vault-displayAttrs:
      action: Configure
  /auth/radius/login:
    description: Log in with a username and password.
    post:
      operationId: postAuthRadiusLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RadiusLoginRequest'
      responses:
        "200":
          description: OK
      summary: Log in with a username and password.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/radius/login/{urlusername}:
    description: Log in with a username and password.
    post:
      operationId: postAuthRadiusLoginUrlusername
      parameters:
      - description: Username to be used for login. (URL parameter)
        explode: false
        in: path
        name: urlusername
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RadiusLoginRequest'
      responses:
        "200":
          description: OK
      summary: Log in with a username and password.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/radius/users:
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthRadiusUsers
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: User
  /auth/radius/users/{name}:
    delete:
      operationId: deleteAuthRadiusUsersName
      parameters:
      - description: Name of the RADIUS user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthRadiusUsersName
      parameters:
      - description: Name of the RADIUS user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    post:
      operationId: postAuthRadiusUsersName
      parameters:
      - description: Name of the RADIUS user.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RadiusUsersRequest'
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-createSupported: true
    x-vault-displayAttrs:
      itemType: User
      action: Create
  /auth/token/accessors/:
    description: List token accessors, which can then be be used to iterate and discover
      their properties or revoke them. Because this can be used to cause a denial
      of service, this endpoint requires 'sudo' capability in addition to 'list'.
    get:
      operationId: getAuthTokenAccessors
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: |-
        List token accessors, which can then be
        be used to iterate and discover their properties
        or revoke them. Because this can be used to
        cause a denial of service, this endpoint
        requires 'sudo' capability in addition to
        'list'.
      tags:
      - auth
    x-vault-sudo: true
  /auth/token/create:
    description: The token create path is used to create new tokens.
    post:
      operationId: postAuthTokenCreate
      parameters:
      - description: Return json formatted output
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreateRequest'
      responses:
        "200":
          description: OK
      summary: The token create path is used to create new tokens.
      tags:
      - auth
  /auth/token/create-orphan:
    description: The token create path is used to create new orphan tokens.
    post:
      operationId: postAuthTokenCreateOrphan
      parameters:
      - description: Return json formatted output
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreateOrphanRequest'
      responses:
        "200":
          description: OK
      summary: The token create path is used to create new orphan tokens.
      tags:
      - auth
  /auth/token/create/{role_name}:
    description: This token create path is used to create new tokens adhering to the
      given role.
    post:
      operationId: postAuthTokenCreateRole_name
      parameters:
      - description: Return json formatted output
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      - description: Name of the role
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreateRequest'
      responses:
        "200":
          description: OK
      summary: This token create path is used to create new tokens adhering to the
        given role.
      tags:
      - auth
  /auth/token/lookup:
    description: This endpoint will lookup a token and its properties.
    get:
      operationId: getAuthTokenLookup
      responses:
        "200":
          description: OK
      summary: This endpoint will lookup a token and its properties.
      tags:
      - auth
    post:
      operationId: postAuthTokenLookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenLookupRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will lookup a token and its properties.
      tags:
      - auth
  /auth/token/lookup-accessor:
    description: This endpoint will lookup a token associated with the given accessor
      and its properties. Response will not contain the token ID.
    post:
      operationId: postAuthTokenLookupAccessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenLookupAccessorRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will lookup a token associated with the given accessor
        and its properties. Response will not contain the token ID.
      tags:
      - auth
  /auth/token/lookup-self:
    description: This endpoint will lookup a token and its properties.
    get:
      operationId: getAuthTokenLookupSelf
      responses:
        "200":
          description: OK
      summary: This endpoint will lookup a token and its properties.
      tags:
      - auth
    post:
      operationId: postAuthTokenLookupSelf
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenLookupSelfRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will lookup a token and its properties.
      tags:
      - auth
  /auth/token/renew:
    description: This endpoint will renew the given token and prevent expiration.
    post:
      operationId: postAuthTokenRenew
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRenewRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will renew the given token and prevent expiration.
      tags:
      - auth
  /auth/token/renew-accessor:
    description: This endpoint will renew a token associated with the given accessor
      and its properties. Response will not contain the token ID.
    post:
      operationId: postAuthTokenRenewAccessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRenewAccessorRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will renew a token associated with the given accessor
        and its properties. Response will not contain the token ID.
      tags:
      - auth
  /auth/token/renew-self:
    description: This endpoint will renew the token used to call it and prevent expiration.
    post:
      operationId: postAuthTokenRenewSelf
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRenewSelfRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will renew the token used to call it and prevent expiration.
      tags:
      - auth
  /auth/token/revoke:
    description: This endpoint will delete the given token and all of its child tokens.
    post:
      operationId: postAuthTokenRevoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRevokeRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will delete the given token and all of its child tokens.
      tags:
      - auth
  /auth/token/revoke-accessor:
    description: This endpoint will delete the token associated with the accessor
      and all of its child tokens.
    post:
      operationId: postAuthTokenRevokeAccessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRevokeAccessorRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will delete the token associated with the accessor and
        all of its child tokens.
      tags:
      - auth
  /auth/token/revoke-orphan:
    description: This endpoint will delete the token and orphan its child tokens.
    post:
      operationId: postAuthTokenRevokeOrphan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRevokeOrphanRequest'
      responses:
        "200":
          description: OK
      summary: This endpoint will delete the token and orphan its child tokens.
      tags:
      - auth
  /auth/token/revoke-self:
    description: This endpoint will delete the token used to call it and all of its
      child tokens.
    post:
      operationId: postAuthTokenRevokeSelf
      responses:
        "200":
          description: OK
      summary: This endpoint will delete the token used to call it and all of its
        child tokens.
      tags:
      - auth
  /auth/token/roles:
    description: This endpoint lists configured roles.
    get:
      operationId: getAuthTokenRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: This endpoint lists configured roles.
      tags:
      - auth
  /auth/token/roles/{role_name}:
    delete:
      operationId: deleteAuthTokenRolesRole_name
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - auth
    get:
      operationId: getAuthTokenRolesRole_name
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - auth
    post:
      operationId: postAuthTokenRolesRole_name
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: role_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRolesRequest'
      responses:
        "200":
          description: OK
      tags:
      - auth
    x-vault-createSupported: true
  /auth/token/tidy:
    description: This endpoint performs cleanup tasks that can be run if certain error
      conditions have occurred.
    post:
      operationId: postAuthTokenTidy
      responses:
        "200":
          description: OK
      summary: |-
        This endpoint performs cleanup tasks that can be run if certain error
        conditions have occurred.
      tags:
      - auth
  /auth/userpass/login/{username}:
    description: Log in with a username and password.
    post:
      operationId: postAuthUserpassLoginUsername
      parameters:
      - description: Username of the user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserpassLoginRequest'
      responses:
        "200":
          description: OK
      summary: Log in with a username and password.
      tags:
      - auth
    x-vault-unauthenticated: true
  /auth/userpass/users:
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthUserpassUsers
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-displayAttrs:
      navigation: true
      itemType: User
  /auth/userpass/users/{username}:
    delete:
      operationId: deleteAuthUserpassUsersUsername
      parameters:
      - description: Username for this user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    description: Manage users allowed to authenticate.
    get:
      operationId: getAuthUserpassUsersUsername
      parameters:
      - description: Username for this user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    post:
      operationId: postAuthUserpassUsersUsername
      parameters:
      - description: Username for this user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserpassUsersRequest'
      responses:
        "200":
          description: OK
      summary: Manage users allowed to authenticate.
      tags:
      - auth
    x-vault-createSupported: true
    x-vault-displayAttrs:
      itemType: User
      action: Create
  /auth/userpass/users/{username}/password:
    description: Reset user's password.
    post:
      operationId: postAuthUserpassUsersUsernamePassword
      parameters:
      - description: Username for this user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserpassUsersPasswordRequest'
      responses:
        "200":
          description: OK
      summary: Reset user's password.
      tags:
      - auth
  /auth/userpass/users/{username}/policies:
    description: Update the policies associated with the username.
    post:
      operationId: postAuthUserpassUsersUsernamePolicies
      parameters:
      - description: Username for this user.
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserpassUsersPoliciesRequest'
      responses:
        "200":
          description: OK
      summary: Update the policies associated with the username.
      tags:
      - auth
  /aws/config/lease:
    description: Configure the default lease information for generated credentials.
    get:
      operationId: getAwsConfigLease
      responses:
        "200":
          description: OK
      summary: Configure the default lease information for generated credentials.
      tags:
      - secrets
    post:
      operationId: postAwsConfigLease
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Configure the default lease information for generated credentials.
      tags:
      - secrets
  /aws/config/root:
    description: Configure the root credentials that are used to manage IAM.
    get:
      operationId: getAwsConfigRoot
      responses:
        "200":
          description: OK
      summary: Configure the root credentials that are used to manage IAM.
      tags:
      - secrets
    post:
      operationId: postAwsConfigRoot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsConfigRootRequest'
      responses:
        "200":
          description: OK
      summary: Configure the root credentials that are used to manage IAM.
      tags:
      - secrets
  /aws/config/rotate-root:
    description: Request to rotate the AWS credentials used by Vault
    post:
      operationId: postAwsConfigRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /aws/creds:
    description: Generate AWS credentials from a specific Vault role.
    get:
      operationId: getAwsCreds
      responses:
        "200":
          description: OK
      summary: Generate AWS credentials from a specific Vault role.
      tags:
      - secrets
    post:
      operationId: postAwsCreds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsCredsRequest'
      responses:
        "200":
          description: OK
      summary: Generate AWS credentials from a specific Vault role.
      tags:
      - secrets
  /aws/roles:
    description: List the existing roles in this backend
    get:
      operationId: getAwsRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the existing roles in this backend
      tags:
      - secrets
  /aws/roles/{name}:
    delete:
      operationId: deleteAwsRolesName
      parameters:
      - description: Name of the policy
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
          x-vault-displayAttrs:
            name: Policy Name
        style: simple
      responses:
        "204":
          description: empty body
      summary: Read, write and reference IAM policies that access keys can be made
        for.
      tags:
      - secrets
    description: Read, write and reference IAM policies that access keys can be made
      for.
    get:
      operationId: getAwsRolesName
      parameters:
      - description: Name of the policy
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
          x-vault-displayAttrs:
            name: Policy Name
        style: simple
      responses:
        "200":
          description: OK
      summary: Read, write and reference IAM policies that access keys can be made
        for.
      tags:
      - secrets
    post:
      operationId: postAwsRolesName
      parameters:
      - description: Name of the policy
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
          x-vault-displayAttrs:
            name: Policy Name
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsRolesRequest'
      responses:
        "200":
          description: OK
      summary: Read, write and reference IAM policies that access keys can be made
        for.
      tags:
      - secrets
  /aws/sts/{name}:
    description: Generate AWS credentials from a specific Vault role.
    get:
      operationId: getAwsStsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate AWS credentials from a specific Vault role.
      tags:
      - secrets
    post:
      operationId: postAwsStsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwsStsRequest'
      responses:
        "200":
          description: OK
      summary: Generate AWS credentials from a specific Vault role.
      tags:
      - secrets
  /azure/config:
    delete:
      operationId: deleteAzureConfig
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Configure the Azure Secret backend.
    get:
      operationId: getAzureConfig
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postAzureConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /azure/creds/{role}:
    description: Request Service Principal credentials for a given Vault role.
    get:
      operationId: getAzureCredsRole
      parameters:
      - description: Name of the Vault role
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /azure/roles:
    description: List existing roles.
    get:
      operationId: getAzureRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List existing roles.
      tags:
      - secrets
  /azure/roles/{name}:
    delete:
      operationId: deleteAzureRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage the Vault roles used to generate Azure credentials.
      tags:
      - secrets
    description: Manage the Vault roles used to generate Azure credentials.
    get:
      operationId: getAzureRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage the Vault roles used to generate Azure credentials.
      tags:
      - secrets
    post:
      operationId: postAzureRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AzureRolesRequest'
      responses:
        "200":
          description: OK
      summary: Manage the Vault roles used to generate Azure credentials.
      tags:
      - secrets
    x-vault-createSupported: true
  /azure/rotate-root:
    description: Attempt to rotate the root credentials used to communicate with Azure.
    post:
      operationId: postAzureRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /consul/config/access:
    get:
      operationId: getConsulConfigAccess
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postConsulConfigAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsulConfigAccessRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /consul/creds/{role}:
    get:
      operationId: getConsulCredsRole
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /consul/roles:
    get:
      operationId: getConsulRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /consul/roles/{name}:
    delete:
      operationId: deleteConsulRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    get:
      operationId: getConsulRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postConsulRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsulRolesRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /cubbyhole/{path}:
    delete:
      operationId: deleteCubbyholePath
      parameters:
      - description: Specifies the path of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Deletes the secret at the specified location.
      tags:
      - secrets
    description: Pass-through secret storage to a token-specific cubbyhole in the
      storage backend, allowing you to read/write arbitrary data into secret storage.
    get:
      operationId: getCubbyholePath
      parameters:
      - description: Specifies the path of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Retrieve the secret at the specified location.
      tags:
      - secrets
    post:
      operationId: postCubbyholePath
      parameters:
      - description: Specifies the path of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Store a secret at the specified location.
      tags:
      - secrets
    x-vault-createSupported: true
  /gcp/config:
    description: Configure the GCP backend.
    get:
      operationId: getGcpConfig
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/config/rotate-root:
    description: Request to rotate the GCP credentials used by Vault
    post:
      operationId: postGcpConfigRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/key/{roleset}:
    description: Generate a service account private key secret.
    get:
      operationId: getGcpKeyRoleset
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpKeyRoleset
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpKeyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/roleset/{name}:
    delete:
      operationId: deleteGcpRolesetName
      parameters:
      - description: Required. Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Read/write sets of IAM roles to be given to generated credentials
      for specified GCP resources.
    get:
      operationId: getGcpRolesetName
      parameters:
      - description: Required. Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpRolesetName
      parameters:
      - description: Required. Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpRolesetRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /gcp/roleset/{name}/rotate:
    description: Rotates or recreates the service account bound to a roleset.
    post:
      operationId: postGcpRolesetNameRotate
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/roleset/{name}/rotate-key:
    description: Rotate the service account key used to generate access tokens for
      a roleset.
    post:
      operationId: postGcpRolesetNameRotateKey
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/roleset/{roleset}/key:
    description: Generate a service account private key secret.
    get:
      operationId: getGcpRolesetRolesetKey
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpRolesetRolesetKey
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpRolesetKeyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/roleset/{roleset}/token:
    description: Generate an OAuth2 access token secret.
    get:
      operationId: getGcpRolesetRolesetToken
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpRolesetRolesetToken
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/rolesets:
    description: List existing rolesets.
    get:
      operationId: getGcpRolesets
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/static-account/{name}:
    delete:
      operationId: deleteGcpStaticAccountName
      parameters:
      - description: Required. Name to refer to this static account in Vault. Cannot
          be updated.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Register and manage a GCP service account to generate credentials
      under
    get:
      operationId: getGcpStaticAccountName
      parameters:
      - description: Required. Name to refer to this static account in Vault. Cannot
          be updated.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpStaticAccountName
      parameters:
      - description: Required. Name to refer to this static account in Vault. Cannot
          be updated.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpStaticAccountRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /gcp/static-account/{name}/key:
    description: Generate a service account private key secret.
    get:
      operationId: getGcpStaticAccountNameKey
      parameters:
      - description: Required. Name of the static account.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpStaticAccountNameKey
      parameters:
      - description: Required. Name of the static account.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpStaticAccountKeyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/static-account/{name}/rotate-key:
    description: Rotate the key used to generate access tokens for a static account
    post:
      operationId: postGcpStaticAccountNameRotateKey
      parameters:
      - description: Name of the account.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/static-account/{name}/token:
    description: Generate an OAuth2 access token secret.
    get:
      operationId: getGcpStaticAccountNameToken
      parameters:
      - description: Required. Name of the static account.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpStaticAccountNameToken
      parameters:
      - description: Required. Name of the static account.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/static-accounts:
    description: List created static accounts.
    get:
      operationId: getGcpStaticAccounts
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcp/token/{roleset}:
    description: Generate an OAuth2 access token secret.
    get:
      operationId: getGcpTokenRoleset
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postGcpTokenRoleset
      parameters:
      - description: Required. Name of the role set.
        explode: false
        in: path
        name: roleset
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /gcpkms/config:
    delete:
      operationId: deleteGcpkmsConfig
      responses:
        "204":
          description: empty body
      summary: Configure the GCP KMS secrets engine
      tags:
      - secrets
    description: Configure the GCP KMS secrets engine
    get:
      operationId: getGcpkmsConfig
      responses:
        "200":
          description: OK
      summary: Configure the GCP KMS secrets engine
      tags:
      - secrets
    post:
      operationId: postGcpkmsConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the GCP KMS secrets engine
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/decrypt/{key}:
    description: Decrypt a ciphertext value using a named key
    post:
      operationId: postGcpkmsDecryptKey
      parameters:
      - description: Name of the key in Vault to use for decryption. This key must
          already exist in Vault and must map back to a Google Cloud KMS key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsDecryptRequest'
      responses:
        "200":
          description: OK
      summary: Decrypt a ciphertext value using a named key
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/encrypt/{key}:
    description: Encrypt a plaintext value using a named key
    post:
      operationId: postGcpkmsEncryptKey
      parameters:
      - description: Name of the key in Vault to use for encryption. This key must
          already exist in Vault and must map back to a Google Cloud KMS key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsEncryptRequest'
      responses:
        "200":
          description: OK
      summary: Encrypt a plaintext value using a named key
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/keys:
    description: List named keys
    get:
      operationId: getGcpkmsKeys
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List named keys
      tags:
      - secrets
  /gcpkms/keys/config/{key}:
    description: Configure the key in Vault
    get:
      operationId: getGcpkmsKeysConfigKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Configure the key in Vault
      tags:
      - secrets
    post:
      operationId: postGcpkmsKeysConfigKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsKeysConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the key in Vault
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/keys/deregister/{key}:
    delete:
      operationId: deleteGcpkmsKeysDeregisterKey
      parameters:
      - description: Name of the key to deregister in Vault. If the key exists in
          Google Cloud KMS, it will be left untouched.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Deregister an existing key in Vault
      tags:
      - secrets
    description: Deregister an existing key in Vault
    post:
      operationId: postGcpkmsKeysDeregisterKey
      parameters:
      - description: Name of the key to deregister in Vault. If the key exists in
          Google Cloud KMS, it will be left untouched.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Deregister an existing key in Vault
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/keys/register/{key}:
    description: Register an existing crypto key in Google Cloud KMS
    post:
      operationId: postGcpkmsKeysRegisterKey
      parameters:
      - description: Name of the key to register in Vault. This will be the named
          used to refer to the underlying crypto key when encrypting or decrypting
          data.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsKeysRegisterRequest'
      responses:
        "200":
          description: OK
      summary: Register an existing crypto key in Google Cloud KMS
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/keys/rotate/{key}:
    description: Rotate a crypto key to a new primary version
    post:
      operationId: postGcpkmsKeysRotateKey
      parameters:
      - description: Name of the key to rotate. This key must already be registered
          with Vault and point to a valid Google Cloud KMS crypto key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Rotate a crypto key to a new primary version
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/keys/trim/{key}:
    delete:
      operationId: deleteGcpkmsKeysTrimKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete old crypto key versions from Google Cloud KMS
      tags:
      - secrets
    description: Delete old crypto key versions from Google Cloud KMS
    post:
      operationId: postGcpkmsKeysTrimKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Delete old crypto key versions from Google Cloud KMS
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/keys/{key}:
    delete:
      operationId: deleteGcpkmsKeysKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Interact with crypto keys in Vault and Google Cloud KMS
      tags:
      - secrets
    description: Interact with crypto keys in Vault and Google Cloud KMS
    get:
      operationId: getGcpkmsKeysKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Interact with crypto keys in Vault and Google Cloud KMS
      tags:
      - secrets
    post:
      operationId: postGcpkmsKeysKey
      parameters:
      - description: Name of the key in Vault.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsKeysRequest'
      responses:
        "200":
          description: OK
      summary: Interact with crypto keys in Vault and Google Cloud KMS
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/pubkey/{key}:
    description: Retrieve the public key associated with the named key
    get:
      operationId: getGcpkmsPubkeyKey
      parameters:
      - description: Name of the key for which to get the public key. This key must
          already exist in Vault and Google Cloud KMS.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Retrieve the public key associated with the named key
      tags:
      - secrets
  /gcpkms/reencrypt/{key}:
    description: Re-encrypt existing ciphertext data to a new version
    post:
      operationId: postGcpkmsReencryptKey
      parameters:
      - description: Name of the key to use for encryption. This key must already
          exist in Vault and Google Cloud KMS.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsReencryptRequest'
      responses:
        "200":
          description: OK
      summary: Re-encrypt existing ciphertext data to a new version
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/sign/{key}:
    description: Signs a message or digest using a named key
    post:
      operationId: postGcpkmsSignKey
      parameters:
      - description: Name of the key in Vault to use for signing. This key must already
          exist in Vault and must map back to a Google Cloud KMS key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsSignRequest'
      responses:
        "200":
          description: OK
      summary: Signs a message or digest using a named key
      tags:
      - secrets
    x-vault-createSupported: true
  /gcpkms/verify/{key}:
    description: Verify a signature using a named key
    post:
      operationId: postGcpkmsVerifyKey
      parameters:
      - description: Name of the key in Vault to use for verification. This key must
          already exist in Vault and must map back to a Google Cloud KMS key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GcpkmsVerifyRequest'
      responses:
        "200":
          description: OK
      summary: Verify a signature using a named key
      tags:
      - secrets
    x-vault-createSupported: true
  /identity/alias:
    description: Create a new alias.
    post:
      operationId: postIdentityAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityAliasRequest'
      responses:
        "200":
          description: OK
      summary: Create a new alias.
      tags:
      - identity
  /identity/alias/id:
    description: List all the alias IDs.
    get:
      operationId: getIdentityAliasId
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the alias IDs.
      tags:
      - identity
  /identity/alias/id/{id}:
    delete:
      operationId: deleteIdentityAliasIdId
      parameters:
      - description: ID of the alias
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Update, read or delete an alias ID.
      tags:
      - identity
    description: Update, read or delete an alias ID.
    get:
      operationId: getIdentityAliasIdId
      parameters:
      - description: ID of the alias
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Update, read or delete an alias ID.
      tags:
      - identity
    post:
      operationId: postIdentityAliasIdId
      parameters:
      - description: ID of the alias
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityAliasIdRequest'
      responses:
        "200":
          description: OK
      summary: Update, read or delete an alias ID.
      tags:
      - identity
  /identity/entity:
    description: Create a new entity
    post:
      operationId: postIdentityEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityRequest'
      responses:
        "200":
          description: OK
      summary: Create a new entity
      tags:
      - identity
  /identity/entity-alias:
    description: Create a new alias.
    post:
      operationId: postIdentityEntityAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityAliasRequest'
      responses:
        "200":
          description: OK
      summary: Create a new alias.
      tags:
      - identity
  /identity/entity-alias/id:
    description: List all the alias IDs.
    get:
      operationId: getIdentityEntityAliasId
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the alias IDs.
      tags:
      - identity
  /identity/entity-alias/id/{id}:
    delete:
      operationId: deleteIdentityEntityAliasIdId
      parameters:
      - description: ID of the alias
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Update, read or delete an alias ID.
      tags:
      - identity
    description: Update, read or delete an alias ID.
    get:
      operationId: getIdentityEntityAliasIdId
      parameters:
      - description: ID of the alias
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Update, read or delete an alias ID.
      tags:
      - identity
    post:
      operationId: postIdentityEntityAliasIdId
      parameters:
      - description: ID of the alias
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityAliasIdRequest'
      responses:
        "200":
          description: OK
      summary: Update, read or delete an alias ID.
      tags:
      - identity
  /identity/entity/batch-delete:
    description: Delete all of the entities provided
    post:
      operationId: postIdentityEntityBatchDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityBatchDeleteRequest'
      responses:
        "200":
          description: OK
      summary: Delete all of the entities provided
      tags:
      - identity
  /identity/entity/id:
    description: List all the entity IDs
    get:
      operationId: getIdentityEntityId
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the entity IDs
      tags:
      - identity
  /identity/entity/id/{id}:
    delete:
      operationId: deleteIdentityEntityIdId
      parameters:
      - description: ID of the entity. If set, updates the corresponding existing
          entity.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Update, read or delete an entity using entity ID
      tags:
      - identity
    description: Update, read or delete an entity using entity ID
    get:
      operationId: getIdentityEntityIdId
      parameters:
      - description: ID of the entity. If set, updates the corresponding existing
          entity.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Update, read or delete an entity using entity ID
      tags:
      - identity
    post:
      operationId: postIdentityEntityIdId
      parameters:
      - description: ID of the entity. If set, updates the corresponding existing
          entity.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityIdRequest'
      responses:
        "200":
          description: OK
      summary: Update, read or delete an entity using entity ID
      tags:
      - identity
  /identity/entity/merge:
    description: Merge two or more entities together
    post:
      operationId: postIdentityEntityMerge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityMergeRequest'
      responses:
        "200":
          description: OK
      summary: Merge two or more entities together
      tags:
      - identity
  /identity/entity/name:
    description: List all the entity names
    get:
      operationId: getIdentityEntityName
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the entity names
      tags:
      - identity
  /identity/entity/name/{name}:
    delete:
      operationId: deleteIdentityEntityNameName
      parameters:
      - description: Name of the entity
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Update, read or delete an entity using entity name
      tags:
      - identity
    description: Update, read or delete an entity using entity name
    get:
      operationId: getIdentityEntityNameName
      parameters:
      - description: Name of the entity
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Update, read or delete an entity using entity name
      tags:
      - identity
    post:
      operationId: postIdentityEntityNameName
      parameters:
      - description: Name of the entity
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityEntityNameRequest'
      responses:
        "200":
          description: OK
      summary: Update, read or delete an entity using entity name
      tags:
      - identity
  /identity/group:
    description: Create a new group.
    post:
      operationId: postIdentityGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityGroupRequest'
      responses:
        "200":
          description: OK
      summary: Create a new group.
      tags:
      - identity
  /identity/group-alias:
    description: Creates a new group alias, or updates an existing one.
    post:
      operationId: postIdentityGroupAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityGroupAliasRequest'
      responses:
        "200":
          description: OK
      summary: Creates a new group alias, or updates an existing one.
      tags:
      - identity
  /identity/group-alias/id:
    description: List all the group alias IDs.
    get:
      operationId: getIdentityGroupAliasId
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the group alias IDs.
      tags:
      - identity
  /identity/group-alias/id/{id}:
    delete:
      operationId: deleteIdentityGroupAliasIdId
      parameters:
      - description: ID of the group alias.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - identity
    get:
      operationId: getIdentityGroupAliasIdId
      parameters:
      - description: ID of the group alias.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityGroupAliasIdId
      parameters:
      - description: ID of the group alias.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityGroupAliasIdRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/group/id:
    description: List all the group IDs.
    get:
      operationId: getIdentityGroupId
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the group IDs.
      tags:
      - identity
  /identity/group/id/{id}:
    delete:
      operationId: deleteIdentityGroupIdId
      parameters:
      - description: ID of the group. If set, updates the corresponding existing group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Update or delete an existing group using its ID.
      tags:
      - identity
    description: Update or delete an existing group using its ID.
    get:
      operationId: getIdentityGroupIdId
      parameters:
      - description: ID of the group. If set, updates the corresponding existing group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Update or delete an existing group using its ID.
      tags:
      - identity
    post:
      operationId: postIdentityGroupIdId
      parameters:
      - description: ID of the group. If set, updates the corresponding existing group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityGroupIdRequest'
      responses:
        "200":
          description: OK
      summary: Update or delete an existing group using its ID.
      tags:
      - identity
  /identity/group/name:
    get:
      operationId: getIdentityGroupName
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/group/name/{name}:
    delete:
      operationId: deleteIdentityGroupNameName
      parameters:
      - description: Name of the group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - identity
    get:
      operationId: getIdentityGroupNameName
      parameters:
      - description: Name of the group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityGroupNameName
      parameters:
      - description: Name of the group.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityGroupNameRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/lookup/entity:
    description: Query entities based on various properties.
    post:
      operationId: postIdentityLookupEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityLookupEntityRequest'
      responses:
        "200":
          description: OK
      summary: Query entities based on various properties.
      tags:
      - identity
  /identity/lookup/group:
    description: Query groups based on various properties.
    post:
      operationId: postIdentityLookupGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityLookupGroupRequest'
      responses:
        "200":
          description: OK
      summary: Query groups based on various properties.
      tags:
      - identity
  /identity/mfa/login-enforcement:
    get:
      operationId: getIdentityMfaLoginEnforcement
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List login enforcements
      tags:
      - identity
  /identity/mfa/login-enforcement/{name}:
    delete:
      operationId: deleteIdentityMfaLoginEnforcementName
      parameters:
      - description: Name for this login enforcement configuration
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a login enforcement
      tags:
      - identity
    get:
      operationId: getIdentityMfaLoginEnforcementName
      parameters:
      - description: Name for this login enforcement configuration
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the current login enforcement
      tags:
      - identity
    post:
      operationId: postIdentityMfaLoginEnforcementName
      parameters:
      - description: Name for this login enforcement configuration
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaLoginEnforcementRequest'
      responses:
        "200":
          description: OK
      summary: Create or update a login enforcement
      tags:
      - identity
  /identity/mfa/method:
    get:
      operationId: getIdentityMfaMethod
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List MFA method configurations for all MFA methods
      tags:
      - identity
  /identity/mfa/method/duo:
    get:
      operationId: getIdentityMfaMethodDuo
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List MFA method configurations for the given MFA method
      tags:
      - identity
  /identity/mfa/method/duo/{method_id}:
    delete:
      operationId: deleteIdentityMfaMethodDuoMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a configuration for the given MFA method
      tags:
      - identity
    get:
      operationId: getIdentityMfaMethodDuoMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the current configuration for the given MFA method
      tags:
      - identity
    post:
      operationId: postIdentityMfaMethodDuoMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodDuoRequest'
      responses:
        "200":
          description: OK
      summary: Update or create a configuration for the given MFA method
      tags:
      - identity
  /identity/mfa/method/okta:
    get:
      operationId: getIdentityMfaMethodOkta
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List MFA method configurations for the given MFA method
      tags:
      - identity
  /identity/mfa/method/okta/{method_id}:
    delete:
      operationId: deleteIdentityMfaMethodOktaMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a configuration for the given MFA method
      tags:
      - identity
    get:
      operationId: getIdentityMfaMethodOktaMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the current configuration for the given MFA method
      tags:
      - identity
    post:
      operationId: postIdentityMfaMethodOktaMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodOktaRequest'
      responses:
        "200":
          description: OK
      summary: Update or create a configuration for the given MFA method
      tags:
      - identity
  /identity/mfa/method/pingid:
    get:
      operationId: getIdentityMfaMethodPingid
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List MFA method configurations for the given MFA method
      tags:
      - identity
  /identity/mfa/method/pingid/{method_id}:
    delete:
      operationId: deleteIdentityMfaMethodPingidMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a configuration for the given MFA method
      tags:
      - identity
    get:
      operationId: getIdentityMfaMethodPingidMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the current configuration for the given MFA method
      tags:
      - identity
    post:
      operationId: postIdentityMfaMethodPingidMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodPingidRequest'
      responses:
        "200":
          description: OK
      summary: Update or create a configuration for the given MFA method
      tags:
      - identity
  /identity/mfa/method/totp:
    get:
      operationId: getIdentityMfaMethodTotp
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List MFA method configurations for the given MFA method
      tags:
      - identity
  /identity/mfa/method/totp/admin-destroy:
    post:
      operationId: postIdentityMfaMethodTotpAdminDestroy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodTotpAdminDestroyRequest'
      responses:
        "200":
          description: OK
      summary: Destroys a TOTP secret for the given MFA method ID on the given entity
      tags:
      - identity
  /identity/mfa/method/totp/admin-generate:
    post:
      operationId: postIdentityMfaMethodTotpAdminGenerate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodTotpAdminGenerateRequest'
      responses:
        "200":
          description: OK
      summary: Update or create TOTP secret for the given method ID on the given entity.
      tags:
      - identity
  /identity/mfa/method/totp/generate:
    post:
      operationId: postIdentityMfaMethodTotpGenerate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodTotpGenerateRequest'
      responses:
        "200":
          description: OK
      summary: Update or create TOTP secret for the given method ID on the given entity.
      tags:
      - identity
  /identity/mfa/method/totp/{method_id}:
    delete:
      operationId: deleteIdentityMfaMethodTotpMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a configuration for the given MFA method
      tags:
      - identity
    get:
      operationId: getIdentityMfaMethodTotpMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the current configuration for the given MFA method
      tags:
      - identity
    post:
      operationId: postIdentityMfaMethodTotpMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityMfaMethodTotpRequest'
      responses:
        "200":
          description: OK
      summary: Update or create a configuration for the given MFA method
      tags:
      - identity
  /identity/mfa/method/{method_id}:
    get:
      operationId: getIdentityMfaMethodMethod_id
      parameters:
      - description: The unique identifier for this MFA method.
        explode: false
        in: path
        name: method_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the current configuration for the given ID regardless of the MFA
        method type
      tags:
      - identity
  /identity/oidc/.well-known/keys:
    description: Retrieve public keys
    get:
      operationId: getIdentityOidcWellKnownKeys
      responses:
        "200":
          description: OK
      summary: Retrieve public keys
      tags:
      - identity
    x-vault-unauthenticated: true
  /identity/oidc/.well-known/openid-configuration:
    description: Query OIDC configurations
    get:
      operationId: getIdentityOidcWellKnownOpenidConfiguration
      responses:
        "200":
          description: OK
      summary: Query OIDC configurations
      tags:
      - identity
    x-vault-unauthenticated: true
  /identity/oidc/assignment:
    description: List OIDC assignments
    get:
      operationId: getIdentityOidcAssignment
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/assignment/{name}:
    delete:
      operationId: deleteIdentityOidcAssignmentName
      parameters:
      - description: Name of the assignment
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - identity
    description: CRUD operations for OIDC assignments.
    get:
      operationId: getIdentityOidcAssignmentName
      parameters:
      - description: Name of the assignment
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityOidcAssignmentName
      parameters:
      - description: Name of the assignment
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcAssignmentRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
    x-vault-createSupported: true
  /identity/oidc/client:
    description: List OIDC clients
    get:
      operationId: getIdentityOidcClient
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/client/{name}:
    delete:
      operationId: deleteIdentityOidcClientName
      parameters:
      - description: Name of the client.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - identity
    description: CRUD operations for OIDC clients.
    get:
      operationId: getIdentityOidcClientName
      parameters:
      - description: Name of the client.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityOidcClientName
      parameters:
      - description: Name of the client.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcClientRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
    x-vault-createSupported: true
  /identity/oidc/config:
    description: OIDC configuration
    get:
      operationId: getIdentityOidcConfig
      responses:
        "200":
          description: OK
      summary: OIDC configuration
      tags:
      - identity
    post:
      operationId: postIdentityOidcConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcConfigRequest'
      responses:
        "200":
          description: OK
      summary: OIDC configuration
      tags:
      - identity
  /identity/oidc/introspect:
    description: Verify the authenticity of an OIDC token
    post:
      operationId: postIdentityOidcIntrospect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcIntrospectRequest'
      responses:
        "200":
          description: OK
      summary: Verify the authenticity of an OIDC token
      tags:
      - identity
  /identity/oidc/key:
    description: List OIDC keys
    get:
      operationId: getIdentityOidcKey
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List OIDC keys
      tags:
      - identity
  /identity/oidc/key/{name}:
    delete:
      operationId: deleteIdentityOidcKeyName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: CRUD operations for OIDC keys.
      tags:
      - identity
    description: CRUD operations for OIDC keys.
    get:
      operationId: getIdentityOidcKeyName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: CRUD operations for OIDC keys.
      tags:
      - identity
    post:
      operationId: postIdentityOidcKeyName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcKeyRequest'
      responses:
        "200":
          description: OK
      summary: CRUD operations for OIDC keys.
      tags:
      - identity
    x-vault-createSupported: true
  /identity/oidc/key/{name}/rotate:
    description: Rotate a named OIDC key.
    post:
      operationId: postIdentityOidcKeyNameRotate
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcKeyRotateRequest'
      responses:
        "200":
          description: OK
      summary: Rotate a named OIDC key.
      tags:
      - identity
  /identity/oidc/provider:
    description: List OIDC providers
    get:
      operationId: getIdentityOidcProvider
      parameters:
      - description: Filters the list of OIDC providers to those that allow the given
          client ID in their set of allowed_client_ids.
        explode: true
        in: query
        name: allowed_client_id
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/provider/{name}:
    delete:
      operationId: deleteIdentityOidcProviderName
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - identity
    description: CRUD operations for OIDC providers.
    get:
      operationId: getIdentityOidcProviderName
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityOidcProviderName
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcProviderRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
    x-vault-createSupported: true
  /identity/oidc/provider/{name}/.well-known/keys:
    description: Retrieve public keys
    get:
      operationId: getIdentityOidcProviderNameWellKnownKeys
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/provider/{name}/.well-known/openid-configuration:
    description: Query OIDC configurations
    get:
      operationId: getIdentityOidcProviderNameWellKnownOpenidConfiguration
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/provider/{name}/authorize:
    description: Provides the OIDC Authorization Endpoint.
    get:
      operationId: getIdentityOidcProviderNameAuthorize
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityOidcProviderNameAuthorize
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcProviderAuthorizeRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/provider/{name}/token:
    description: Provides the OIDC Token Endpoint.
    post:
      operationId: postIdentityOidcProviderNameToken
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcProviderTokenRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/provider/{name}/userinfo:
    description: Provides the OIDC UserInfo Endpoint.
    get:
      operationId: getIdentityOidcProviderNameUserinfo
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityOidcProviderNameUserinfo
      parameters:
      - description: Name of the provider
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/role:
    description: List configured OIDC roles
    get:
      operationId: getIdentityOidcRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List configured OIDC roles
      tags:
      - identity
  /identity/oidc/role/{name}:
    delete:
      operationId: deleteIdentityOidcRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: CRUD operations on OIDC Roles
      tags:
      - identity
    description: CRUD operations on OIDC Roles
    get:
      operationId: getIdentityOidcRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: CRUD operations on OIDC Roles
      tags:
      - identity
    post:
      operationId: postIdentityOidcRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcRoleRequest'
      responses:
        "200":
          description: OK
      summary: CRUD operations on OIDC Roles
      tags:
      - identity
    x-vault-createSupported: true
  /identity/oidc/scope:
    description: List OIDC scopes
    get:
      operationId: getIdentityOidcScope
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - identity
  /identity/oidc/scope/{name}:
    delete:
      operationId: deleteIdentityOidcScopeName
      parameters:
      - description: Name of the scope
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - identity
    description: CRUD operations for OIDC scopes.
    get:
      operationId: getIdentityOidcScopeName
      parameters:
      - description: Name of the scope
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - identity
    post:
      operationId: postIdentityOidcScopeName
      parameters:
      - description: Name of the scope
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityOidcScopeRequest'
      responses:
        "200":
          description: OK
      tags:
      - identity
    x-vault-createSupported: true
  /identity/oidc/token/{name}:
    description: Generate an OIDC token
    get:
      operationId: getIdentityOidcTokenName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate an OIDC token
      tags:
      - identity
  /identity/persona:
    description: Create a new alias.
    post:
      operationId: postIdentityPersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityPersonaRequest'
      responses:
        "200":
          description: OK
      summary: Create a new alias.
      tags:
      - identity
  /identity/persona/id:
    description: List all the alias IDs.
    get:
      operationId: getIdentityPersonaId
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List all the alias IDs.
      tags:
      - identity
  /identity/persona/id/{id}:
    delete:
      operationId: deleteIdentityPersonaIdId
      parameters:
      - description: ID of the persona
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Update, read or delete an alias ID.
      tags:
      - identity
    description: Update, read or delete an alias ID.
    get:
      operationId: getIdentityPersonaIdId
      parameters:
      - description: ID of the persona
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Update, read or delete an alias ID.
      tags:
      - identity
    post:
      operationId: postIdentityPersonaIdId
      parameters:
      - description: ID of the persona
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityPersonaIdRequest'
      responses:
        "200":
          description: OK
      summary: Update, read or delete an alias ID.
      tags:
      - identity
  /kubernetes/config:
    delete:
      operationId: deleteKubernetesConfig
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Configure the Kubernetes secret engine plugin.
    get:
      operationId: getKubernetesConfig
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postKubernetesConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KubernetesConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /kubernetes/creds/{name}:
    description: Request Kubernetes service account credentials for a given Vault
      role.
    post:
      operationId: postKubernetesCredsName
      parameters:
      - description: Name of the Vault role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KubernetesCredsRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /kubernetes/roles:
    description: List the existing roles in this secrets engine.
    get:
      operationId: getKubernetesRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /kubernetes/roles/{name}:
    delete:
      operationId: deleteKubernetesRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manage the roles that can be created with this secrets engine.
    get:
      operationId: getKubernetesRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postKubernetesRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KubernetesRolesRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /kv/{path}:
    delete:
      operationId: deleteKvPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: |-
        Pass-through secret storage to the storage backend, allowing you to
        read/write arbitrary data into secret storage.
      tags:
      - secrets
    description: Pass-through secret storage to the storage backend, allowing you
      to read/write arbitrary data into secret storage.
    get:
      operationId: getKvPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: |-
        Pass-through secret storage to the storage backend, allowing you to
        read/write arbitrary data into secret storage.
      tags:
      - secrets
    post:
      operationId: postKvPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: |-
        Pass-through secret storage to the storage backend, allowing you to
        read/write arbitrary data into secret storage.
      tags:
      - secrets
    x-vault-createSupported: true
  /ldap/config:
    delete:
      operationId: deleteLdapConfig
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Configure the LDAP secrets engine plugin.
    get:
      operationId: getLdapConfig
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postLdapConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /ldap/creds/{name}:
    description: Request LDAP credentials for a dynamic role. These credentials are
      created within the LDAP system when querying this endpoint.
    get:
      operationId: getLdapCredsName
      parameters:
      - description: Name of the dynamic role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ldap/library:
    description: List the name of each set of service accounts currently stored.
    get:
      operationId: getLdapLibrary
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ldap/library/manage/{name}/check-in:
    description: Force checking service accounts in to the library.
    post:
      operationId: postLdapLibraryManageNameCheckIn
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapLibraryManageCheckInRequest'
      responses:
        "200":
          description: OK
      summary: Check service accounts in to the library.
      tags:
      - secrets
  /ldap/library/{name}:
    delete:
      operationId: deleteLdapLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a library set.
      tags:
      - secrets
    description: Build a library of service accounts that can be checked out.
    get:
      operationId: getLdapLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read a library set.
      tags:
      - secrets
    post:
      operationId: postLdapLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapLibraryRequest'
      responses:
        "200":
          description: OK
      summary: Update a library set.
      tags:
      - secrets
    x-vault-createSupported: true
  /ldap/library/{name}/check-in:
    description: Check service accounts in to the library.
    post:
      operationId: postLdapLibraryNameCheckIn
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapLibraryCheckInRequest'
      responses:
        "200":
          description: OK
      summary: Check service accounts in to the library.
      tags:
      - secrets
  /ldap/library/{name}/check-out:
    description: Check a service account out from the library.
    post:
      operationId: postLdapLibraryNameCheckOut
      parameters:
      - description: Name of the set
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapLibraryCheckOutRequest'
      responses:
        "200":
          description: OK
      summary: Check a service account out from the library.
      tags:
      - secrets
  /ldap/library/{name}/status:
    description: Check the status of the service accounts in a library.
    get:
      operationId: getLdapLibraryNameStatus
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Check the status of the service accounts in a library set.
      tags:
      - secrets
  /ldap/role:
    description: List all the dynamic roles Vault is currently managing in LDAP.
    get:
      operationId: getLdapRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ldap/role/{name}:
    delete:
      operationId: deleteLdapRoleName
      parameters:
      - description: Name of the role (lowercase)
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manage the static roles that can be created with this backend.
    get:
      operationId: getLdapRoleName
      parameters:
      - description: Name of the role (lowercase)
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postLdapRoleName
      parameters:
      - description: Name of the role (lowercase)
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /ldap/rotate-role/{name}:
    description: Request to rotate the credentials for a static user account.
    post:
      operationId: postLdapRotateRoleName
      parameters:
      - description: Name of the static role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /ldap/rotate-root:
    description: Request to rotate the root credentials Vault uses for the LDAP administrator
      account.
    post:
      operationId: postLdapRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /ldap/static-cred/{name}:
    description: Request LDAP credentials for a certain static role. These credentials
      are rotated periodically.
    get:
      operationId: getLdapStaticCredName
      parameters:
      - description: Name of the static role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ldap/static-role:
    description: This path lists all the static roles Vault is currently managing
      within the LDAP system.
    get:
      operationId: getLdapStaticRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ldap/static-role/{name}:
    delete:
      operationId: deleteLdapStaticRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manage the static roles that can be created with this backend.
    get:
      operationId: getLdapStaticRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postLdapStaticRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LdapStaticRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /mongodbatlas/config:
    description: Configure the credentials that are used to manage Database Users.
    get:
      operationId: getMongodbatlasConfig
      responses:
        "200":
          description: OK
      summary: Configure the  credentials that are used to manage Database Users.
      tags:
      - secrets
    post:
      operationId: postMongodbatlasConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MongodbatlasConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure the  credentials that are used to manage Database Users.
      tags:
      - secrets
  /mongodbatlas/creds/{name}:
    description: Generate MongoDB Atlas Programmatic API from a specific Vault role.
    get:
      operationId: getMongodbatlasCredsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate MongoDB Atlas Programmatic API from a specific Vault role.
      tags:
      - secrets
    post:
      operationId: postMongodbatlasCredsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate MongoDB Atlas Programmatic API from a specific Vault role.
      tags:
      - secrets
  /mongodbatlas/roles:
    description: List the existing roles in this backend
    get:
      operationId: getMongodbatlasRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the existing roles in this backend
      tags:
      - secrets
  /mongodbatlas/roles/{name}:
    delete:
      operationId: deleteMongodbatlasRolesName
      parameters:
      - description: Name of the Roles
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
      tags:
      - secrets
    description: Manage the roles used to generate MongoDB Atlas Programmatic API
      Keys.
    get:
      operationId: getMongodbatlasRolesName
      parameters:
      - description: Name of the Roles
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
      tags:
      - secrets
    post:
      operationId: postMongodbatlasRolesName
      parameters:
      - description: Name of the Roles
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MongodbatlasRolesRequest'
      responses:
        "200":
          description: OK
      summary: Manage the roles used to generate MongoDB Atlas Programmatic API Keys.
      tags:
      - secrets
  /nomad/config/access:
    delete:
      operationId: deleteNomadConfigAccess
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    get:
      operationId: getNomadConfigAccess
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postNomadConfigAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NomadConfigAccessRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /nomad/config/lease:
    delete:
      operationId: deleteNomadConfigLease
      responses:
        "204":
          description: empty body
      summary: Configure the lease parameters for generated tokens
      tags:
      - secrets
    description: Configure the lease parameters for generated tokens
    get:
      operationId: getNomadConfigLease
      responses:
        "200":
          description: OK
      summary: Configure the lease parameters for generated tokens
      tags:
      - secrets
    post:
      operationId: postNomadConfigLease
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NomadConfigLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Configure the lease parameters for generated tokens
      tags:
      - secrets
  /nomad/creds/{name}:
    get:
      operationId: getNomadCredsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /nomad/role:
    get:
      operationId: getNomadRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /nomad/role/{name}:
    delete:
      operationId: deleteNomadRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    get:
      operationId: getNomadRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postNomadRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NomadRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /openldap/config:
    delete:
      operationId: deleteOpenldapConfig
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Configure the LDAP secrets engine plugin.
    get:
      operationId: getOpenldapConfig
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postOpenldapConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /openldap/creds/{name}:
    description: Request LDAP credentials for a dynamic role. These credentials are
      created within the LDAP system when querying this endpoint.
    get:
      operationId: getOpenldapCredsName
      parameters:
      - description: Name of the dynamic role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /openldap/library:
    description: List the name of each set of service accounts currently stored.
    get:
      operationId: getOpenldapLibrary
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /openldap/library/manage/{name}/check-in:
    description: Force checking service accounts in to the library.
    post:
      operationId: postOpenldapLibraryManageNameCheckIn
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapLibraryManageCheckInRequest'
      responses:
        "200":
          description: OK
      summary: Check service accounts in to the library.
      tags:
      - secrets
  /openldap/library/{name}:
    delete:
      operationId: deleteOpenldapLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a library set.
      tags:
      - secrets
    description: Build a library of service accounts that can be checked out.
    get:
      operationId: getOpenldapLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read a library set.
      tags:
      - secrets
    post:
      operationId: postOpenldapLibraryName
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapLibraryRequest'
      responses:
        "200":
          description: OK
      summary: Update a library set.
      tags:
      - secrets
    x-vault-createSupported: true
  /openldap/library/{name}/check-in:
    description: Check service accounts in to the library.
    post:
      operationId: postOpenldapLibraryNameCheckIn
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapLibraryCheckInRequest'
      responses:
        "200":
          description: OK
      summary: Check service accounts in to the library.
      tags:
      - secrets
  /openldap/library/{name}/check-out:
    description: Check a service account out from the library.
    post:
      operationId: postOpenldapLibraryNameCheckOut
      parameters:
      - description: Name of the set
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapLibraryCheckOutRequest'
      responses:
        "200":
          description: OK
      summary: Check a service account out from the library.
      tags:
      - secrets
  /openldap/library/{name}/status:
    description: Check the status of the service accounts in a library.
    get:
      operationId: getOpenldapLibraryNameStatus
      parameters:
      - description: Name of the set.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Check the status of the service accounts in a library set.
      tags:
      - secrets
  /openldap/role:
    description: List all the dynamic roles Vault is currently managing in LDAP.
    get:
      operationId: getOpenldapRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /openldap/role/{name}:
    delete:
      operationId: deleteOpenldapRoleName
      parameters:
      - description: Name of the role (lowercase)
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manage the static roles that can be created with this backend.
    get:
      operationId: getOpenldapRoleName
      parameters:
      - description: Name of the role (lowercase)
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postOpenldapRoleName
      parameters:
      - description: Name of the role (lowercase)
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /openldap/rotate-role/{name}:
    description: Request to rotate the credentials for a static user account.
    post:
      operationId: postOpenldapRotateRoleName
      parameters:
      - description: Name of the static role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /openldap/rotate-root:
    description: Request to rotate the root credentials Vault uses for the LDAP administrator
      account.
    post:
      operationId: postOpenldapRotateRoot
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /openldap/static-cred/{name}:
    description: Request LDAP credentials for a certain static role. These credentials
      are rotated periodically.
    get:
      operationId: getOpenldapStaticCredName
      parameters:
      - description: Name of the static role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /openldap/static-role:
    description: This path lists all the static roles Vault is currently managing
      within the LDAP system.
    get:
      operationId: getOpenldapStaticRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /openldap/static-role/{name}:
    delete:
      operationId: deleteOpenldapStaticRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manage the static roles that can be created with this backend.
    get:
      operationId: getOpenldapStaticRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postOpenldapStaticRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenldapStaticRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /pki//delta:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiDelta
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki//delta/pem:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiDeltaPem
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki//der:
    description: Fetch an issuer's Certificate Revocation Log (CRL).
    get:
      operationId: getPkiDer
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki//json:
    delete:
      operationId: deletePkiJson
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Fetch a single issuer certificate.
    get:
      operationId: getPkiJson
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiJson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiJsonRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki//pem:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiPem
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/bundle:
    description: Import the specified issuing certificates.
    post:
      operationId: postPkiBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiBundleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/ca:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCa
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/ca/pem:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCaPem
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/ca_chain:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCa_chain
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/cert:
    description: Import the specified issuing certificates.
    post:
      operationId: postPkiCert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiCertRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/cert/ca_chain:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCertCa_chain
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/cert/{serial}:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCertSerial
      parameters:
      - description: Certificate serial number, in colon- or hyphen-separated octal
        explode: false
        in: path
        name: serial
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/cert/{serial}/raw:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCertSerialRaw
      parameters:
      - description: Certificate serial number, in colon- or hyphen-separated octal
        explode: false
        in: path
        name: serial
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/cert/{serial}/raw/pem:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCertSerialRawPem
      parameters:
      - description: Certificate serial number, in colon- or hyphen-separated octal
        explode: false
        in: path
        name: serial
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/certs:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCerts
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/config/auto-tidy:
    description: Modifies the current configuration for automatic tidy execution.
    get:
      operationId: getPkiConfigAutoTidy
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiConfigAutoTidy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiConfigAutoTidyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/config/ca:
    description: Set the CA certificate and private key used for generated credentials.
    post:
      operationId: postPkiConfigCa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiConfigCaRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/config/crl:
    description: Configure the CRL expiration.
    get:
      operationId: getPkiConfigCrl
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiConfigCrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiConfigCrlRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/config/issuers:
    description: Read and set the default issuer certificate for signing.
    get:
      operationId: getPkiConfigIssuers
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiConfigIssuers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiConfigIssuersRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/config/keys:
    description: Read and set the default key used for signing
    get:
      operationId: getPkiConfigKeys
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiConfigKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiConfigKeysRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/config/urls:
    description: Set the URLs for the issuing CA, CRL distribution points, and OCSP
      servers.
    get:
      operationId: getPkiConfigUrls
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiConfigUrls
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiConfigUrlsRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/crl:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiCrl
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/crl/rotate:
    description: Force a rebuild of the CRL.
    get:
      operationId: getPkiCrlRotate
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/crl/rotate-delta:
    description: Force a rebuild of the delta CRL.
    get:
      operationId: getPkiCrlRotateDelta
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/delta-crl:
    description: Fetch a CA, CRL, CA Chain, or non-revoked certificate.
    get:
      operationId: getPkiDeltaCrl
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/intermediate/cross-sign:
    description: Generate a new CSR and private key used for signing.
    post:
      operationId: postPkiIntermediateCrossSign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIntermediateCrossSignRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/intermediate/generate/{exported}:
    description: Generate a new CSR and private key used for signing.
    post:
      operationId: postPkiIntermediateGenerateExported
      parameters:
      - description: Must be "internal", "exported" or "kms". If set to "exported",
          the generated private key will be returned. This is your *only* chance to
          retrieve the private key!
        explode: false
        in: path
        name: exported
        required: true
        schema:
          enum:
          - internal
          - external
          - kms
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIntermediateGenerateRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/intermediate/set-signed:
    description: Provide the signed intermediate CA cert.
    post:
      operationId: postPkiIntermediateSetSigned
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIntermediateSetSignedRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issue/{role}:
    description: Request a certificate using a certain role with the provided details.
    post:
      operationId: postPkiIssueRole
      parameters:
      - description: The desired role with configuration for this request
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssueRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/issue/{role}:
    description: Request a certificate using a certain role with the provided details.
    post:
      operationId: postPkiIssuerIssuer_refIssueRole
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      - description: The desired role with configuration for this request
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuerIssueRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/revoke:
    description: Revoke the specified issuer certificate.
    post:
      operationId: postPkiIssuerIssuer_refRevoke
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/sign-intermediate:
    description: Issue an intermediate CA certificate based on the provided CSR.
    post:
      operationId: postPkiIssuerIssuer_refSignIntermediate
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuerSignIntermediateRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/sign-self-issued:
    description: Re-issue a self-signed certificate based on the provided certificate.
    post:
      operationId: postPkiIssuerIssuer_refSignSelfIssued
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuerSignSelfIssuedRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/sign-verbatim:
    description: Issue a certificate directly based on the provided CSR.
    post:
      operationId: postPkiIssuerIssuer_refSignVerbatim
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuerSignVerbatimRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/sign-verbatim/{role}:
    description: Issue a certificate directly based on the provided CSR.
    post:
      operationId: postPkiIssuerIssuer_refSignVerbatimRole
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      - description: The desired role with configuration for this request
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuerSignVerbatimRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuer/{issuer_ref}/sign/{role}:
    description: Request certificates using a certain role with the provided details.
    post:
      operationId: postPkiIssuerIssuer_refSignRole
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      - description: The desired role with configuration for this request
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuerSignRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuers:
    description: Fetch a list of CA certificates.
    get:
      operationId: getPkiIssuers
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuers/generate/intermediate/{exported}:
    description: Generate a new CSR and private key used for signing.
    post:
      operationId: postPkiIssuersGenerateIntermediateExported
      parameters:
      - description: Must be "internal", "exported" or "kms". If set to "exported",
          the generated private key will be returned. This is your *only* chance to
          retrieve the private key!
        explode: false
        in: path
        name: exported
        required: true
        schema:
          enum:
          - internal
          - external
          - kms
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuersGenerateIntermediateRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/issuers/generate/root/{exported}:
    description: Generate a new CA certificate and private key used for signing.
    post:
      operationId: postPkiIssuersGenerateRootExported
      parameters:
      - description: Must be "internal", "exported" or "kms". If set to "exported",
          the generated private key will be returned. This is your *only* chance to
          retrieve the private key!
        explode: false
        in: path
        name: exported
        required: true
        schema:
          enum:
          - internal
          - external
          - kms
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiIssuersGenerateRootRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/key/{key_ref}:
    delete:
      operationId: deletePkiKeyKey_ref
      parameters:
      - description: Reference to key; either "default" for the configured default
          key, an identifier of a key, or the name assigned to the key.
        explode: false
        in: path
        name: key_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Fetch a single issuer key
    get:
      operationId: getPkiKeyKey_ref
      parameters:
      - description: Reference to key; either "default" for the configured default
          key, an identifier of a key, or the name assigned to the key.
        explode: false
        in: path
        name: key_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiKeyKey_ref
      parameters:
      - description: Reference to key; either "default" for the configured default
          key, an identifier of a key, or the name assigned to the key.
        explode: false
        in: path
        name: key_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiKeyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/keys:
    description: Fetch a list of all issuer keys
    get:
      operationId: getPkiKeys
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/keys/import:
    description: Import the specified key.
    post:
      operationId: postPkiKeysImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiKeysImportRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/kms:
    description: Generate a new private key used for signing.
    post:
      operationId: postPkiKms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiKmsRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/ocsp:
    description: Query a certificate's revocation status through OCSP'
    post:
      operationId: postPkiOcsp
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/ocsp/{req}:
    description: Query a certificate's revocation status through OCSP'
    get:
      operationId: getPkiOcspReq
      parameters:
      - description: base-64 encoded ocsp request
        explode: false
        in: path
        name: req
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-unauthenticated: true
  /pki/revoke:
    description: Revoke a certificate by serial number or with explicit certificate.
      When calling /revoke-with-key, the private key corresponding to the certificate
      must be provided to authenticate the request.
    post:
      operationId: postPkiRevoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRevokeRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/revoke-with-key:
    description: Revoke a certificate by serial number or with explicit certificate.
      When calling /revoke-with-key, the private key corresponding to the certificate
      must be provided to authenticate the request.
    post:
      operationId: postPkiRevokeWithKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRevokeWithKeyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/roles:
    description: List the existing roles in this backend
    get:
      operationId: getPkiRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/roles/{name}:
    delete:
      operationId: deletePkiRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manage the roles that can be created with this backend.
    get:
      operationId: getPkiRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postPkiRolesName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRolesRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/root:
    delete:
      operationId: deletePkiRoot
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Deletes the root CA key to allow a new one to be generated.
    x-vault-sudo: true
  /pki/root/generate/{exported}:
    description: Generate a new CA certificate and private key used for signing.
    post:
      operationId: postPkiRootGenerateExported
      parameters:
      - description: Must be "internal", "exported" or "kms". If set to "exported",
          the generated private key will be returned. This is your *only* chance to
          retrieve the private key!
        explode: false
        in: path
        name: exported
        required: true
        schema:
          enum:
          - internal
          - external
          - kms
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRootGenerateRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/root/replace:
    description: Read and set the default issuer certificate for signing.
    post:
      operationId: postPkiRootReplace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRootReplaceRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/root/rotate/{exported}:
    description: Generate a new CA certificate and private key used for signing.
    post:
      operationId: postPkiRootRotateExported
      parameters:
      - description: Must be "internal", "exported" or "kms". If set to "exported",
          the generated private key will be returned. This is your *only* chance to
          retrieve the private key!
        explode: false
        in: path
        name: exported
        required: true
        schema:
          enum:
          - internal
          - external
          - kms
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRootRotateRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/root/sign-intermediate:
    description: Issue an intermediate CA certificate based on the provided CSR.
    post:
      operationId: postPkiRootSignIntermediate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRootSignIntermediateRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/root/sign-self-issued:
    description: Re-issue a self-signed certificate based on the provided certificate.
    post:
      operationId: postPkiRootSignSelfIssued
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiRootSignSelfIssuedRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-sudo: true
  /pki/sign-verbatim:
    description: Issue a certificate directly based on the provided CSR.
    post:
      operationId: postPkiSignVerbatim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiSignVerbatimRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/sign-verbatim/{role}:
    description: Issue a certificate directly based on the provided CSR.
    post:
      operationId: postPkiSignVerbatimRole
      parameters:
      - description: The desired role with configuration for this request
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiSignVerbatimRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/sign/{role}:
    description: Request certificates using a certain role with the provided details.
    post:
      operationId: postPkiSignRole
      parameters:
      - description: The desired role with configuration for this request
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiSignRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/tidy:
    description: Tidy up the backend by removing expired certificates, revocation
      information, or both.
    post:
      operationId: postPkiTidy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PkiTidyRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/tidy-cancel:
    description: Cancels a currently running tidy operation.
    post:
      operationId: postPkiTidyCancel
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/tidy-status:
    description: Returns the status of the tidy operation.
    get:
      operationId: getPkiTidyStatus
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/{issuer_ref}/crl/pem|/der|/delta/pem:
    description: Fetch an issuer's Certificate Revocation Log (CRL).
    get:
      operationId: getPkiIssuer_refCrlPemDerDeltaPem
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /pki/{issuer_ref}/der|/pem:
    delete:
      operationId: deletePkiIssuer_refDerPem
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Fetch a single issuer certificate.
    get:
      operationId: getPkiIssuer_refDerPem
      parameters:
      - description: Reference to a existing issuer; either "default" for the configured
          default issuer, an identifier or the name assigned to the issuer.
        explode: false
        in: path
        name: issuer_ref
        required: true
        schema:
          default: default
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /rabbitmq/config/connection:
    description: Configure the connection URI, username, and password to talk to RabbitMQ
      management HTTP API.
    post:
      operationId: postRabbitmqConfigConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RabbitmqConfigConnectionRequest'
      responses:
        "200":
          description: OK
      summary: Configure the connection URI, username, and password to talk to RabbitMQ
        management HTTP API.
      tags:
      - secrets
  /rabbitmq/config/lease:
    description: Configure the lease parameters for generated credentials
    get:
      operationId: getRabbitmqConfigLease
      responses:
        "200":
          description: OK
      summary: Configure the lease parameters for generated credentials
      tags:
      - secrets
    post:
      operationId: postRabbitmqConfigLease
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RabbitmqConfigLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Configure the lease parameters for generated credentials
      tags:
      - secrets
  /rabbitmq/creds/{name}:
    description: Request RabbitMQ credentials for a certain role.
    get:
      operationId: getRabbitmqCredsName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Request RabbitMQ credentials for a certain role.
      tags:
      - secrets
  /rabbitmq/roles:
    description: Manage the roles that can be created with this backend.
    get:
      operationId: getRabbitmqRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage the roles that can be created with this backend.
      tags:
      - secrets
  /rabbitmq/roles/{name}:
    delete:
      operationId: deleteRabbitmqRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage the roles that can be created with this backend.
      tags:
      - secrets
    description: Manage the roles that can be created with this backend.
    get:
      operationId: getRabbitmqRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage the roles that can be created with this backend.
      tags:
      - secrets
    post:
      operationId: postRabbitmqRolesName
      parameters:
      - description: Name of the role.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RabbitmqRolesRequest'
      responses:
        "200":
          description: OK
      summary: Manage the roles that can be created with this backend.
      tags:
      - secrets
  /secret/.*: {}
  /secret/config:
    description: Configures settings for the KV store
    get:
      operationId: getSecretConfig
      responses:
        "200":
          description: OK
      summary: Read the backend level settings.
      tags:
      - secrets
    post:
      operationId: postSecretConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KvConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure backend level settings that are applied to every key in the
        key-value store.
      tags:
      - secrets
    x-vault-createSupported: true
  /secret/data/{path}:
    delete:
      operationId: deleteSecretDataPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Write, Patch, Read, and Delete data in the Key-Value Store.
      tags:
      - secrets
    description: Write, Patch, Read, and Delete data in the Key-Value Store.
    get:
      operationId: getSecretDataPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Write, Patch, Read, and Delete data in the Key-Value Store.
      tags:
      - secrets
    post:
      operationId: postSecretDataPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KvDataRequest'
      responses:
        "200":
          description: OK
      summary: Write, Patch, Read, and Delete data in the Key-Value Store.
      tags:
      - secrets
    x-vault-createSupported: true
  /secret/delete/{path}:
    description: Marks one or more versions as deleted in the KV store.
    post:
      operationId: postSecretDeletePath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KvDeleteRequest'
      responses:
        "200":
          description: OK
      summary: Marks one or more versions as deleted in the KV store.
      tags:
      - secrets
    x-vault-createSupported: true
  /secret/destroy/{path}:
    description: Permanently removes one or more versions in the KV store
    post:
      operationId: postSecretDestroyPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KvDestroyRequest'
      responses:
        "200":
          description: OK
      summary: Permanently removes one or more versions in the KV store
      tags:
      - secrets
    x-vault-createSupported: true
  /secret/metadata/{path}:
    delete:
      operationId: deleteSecretMetadataPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Configures settings for the KV store
      tags:
      - secrets
    description: Configures settings for the KV store
    get:
      operationId: getSecretMetadataPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Configures settings for the KV store
      tags:
      - secrets
    post:
      operationId: postSecretMetadataPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KvMetadataRequest'
      responses:
        "200":
          description: OK
      summary: Configures settings for the KV store
      tags:
      - secrets
    x-vault-createSupported: true
  /secret/subkeys/{path}:
    description: Read the structure of a secret entry from the Key-Value store with
      the values removed.
    get:
      operationId: getSecretSubkeysPath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the structure of a secret entry from the Key-Value store with
        the values removed.
      tags:
      - secrets
  /secret/undelete/{path}:
    description: Undeletes one or more versions from the KV store.
    post:
      operationId: postSecretUndeletePath
      parameters:
      - description: Location of the secret.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KvUndeleteRequest'
      responses:
        "200":
          description: OK
      summary: Undeletes one or more versions from the KV store.
      tags:
      - secrets
    x-vault-createSupported: true
  /ssh/config/ca:
    delete:
      operationId: deleteSshConfigCa
      responses:
        "204":
          description: empty body
      summary: Set the SSH private key used for signing certificates.
      tags:
      - secrets
    description: Set the SSH private key used for signing certificates.
    get:
      operationId: getSshConfigCa
      responses:
        "200":
          description: OK
      summary: Set the SSH private key used for signing certificates.
      tags:
      - secrets
    post:
      operationId: postSshConfigCa
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshConfigCaRequest'
      responses:
        "200":
          description: OK
      summary: Set the SSH private key used for signing certificates.
      tags:
      - secrets
  /ssh/config/zeroaddress:
    delete:
      operationId: deleteSshConfigZeroaddress
      responses:
        "204":
          description: empty body
      summary: Assign zero address as default CIDR block for select roles.
      tags:
      - secrets
    description: Assign zero address as default CIDR block for select roles.
    get:
      operationId: getSshConfigZeroaddress
      responses:
        "200":
          description: OK
      summary: Assign zero address as default CIDR block for select roles.
      tags:
      - secrets
    post:
      operationId: postSshConfigZeroaddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshConfigZeroaddressRequest'
      responses:
        "200":
          description: OK
      summary: Assign zero address as default CIDR block for select roles.
      tags:
      - secrets
  /ssh/creds/{role}:
    description: Creates a credential for establishing SSH connection with the remote
      host.
    post:
      operationId: postSshCredsRole
      parameters:
      - description: '[Required] Name of the role'
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshCredsRequest'
      responses:
        "200":
          description: OK
      summary: Creates a credential for establishing SSH connection with the remote
        host.
      tags:
      - secrets
  /ssh/issue/{role}:
    description: Request a certificate using a certain role with the provided details.
    post:
      operationId: postSshIssueRole
      parameters:
      - description: The desired role with configuration for this request.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshIssueRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /ssh/keys/{key_name}:
    delete:
      operationId: deleteSshKeysKey_name
      parameters:
      - description: '[Required] Name of the key'
        explode: false
        in: path
        name: key_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Register a shared private key with Vault.
      tags:
      - secrets
    description: Register a shared private key with Vault.
    post:
      operationId: postSshKeysKey_name
      parameters:
      - description: '[Required] Name of the key'
        explode: false
        in: path
        name: key_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshKeysRequest'
      responses:
        "200":
          description: OK
      summary: Register a shared private key with Vault.
      tags:
      - secrets
  /ssh/lookup:
    description: List all the roles associated with the given IP address.
    post:
      operationId: postSshLookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshLookupRequest'
      responses:
        "200":
          description: OK
      summary: List all the roles associated with the given IP address.
      tags:
      - secrets
  /ssh/public_key:
    description: Retrieve the public key.
    get:
      operationId: getSshPublic_key
      responses:
        "200":
          description: OK
      summary: Retrieve the public key.
      tags:
      - secrets
    x-vault-unauthenticated: true
  /ssh/roles:
    description: Manage the 'roles' that can be created with this backend.
    get:
      operationId: getSshRoles
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage the 'roles' that can be created with this backend.
      tags:
      - secrets
  /ssh/roles/{role}:
    delete:
      operationId: deleteSshRolesRole
      parameters:
      - description: '[Required for all types] Name of the role being created.'
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage the 'roles' that can be created with this backend.
      tags:
      - secrets
    description: Manage the 'roles' that can be created with this backend.
    get:
      operationId: getSshRolesRole
      parameters:
      - description: '[Required for all types] Name of the role being created.'
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage the 'roles' that can be created with this backend.
      tags:
      - secrets
    post:
      operationId: postSshRolesRole
      parameters:
      - description: '[Required for all types] Name of the role being created.'
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshRolesRequest'
      responses:
        "200":
          description: OK
      summary: Manage the 'roles' that can be created with this backend.
      tags:
      - secrets
  /ssh/sign/{role}:
    description: Request signing an SSH key using a certain role with the provided
      details.
    post:
      operationId: postSshSignRole
      parameters:
      - description: The desired role with configuration for this request.
        explode: false
        in: path
        name: role
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshSignRequest'
      responses:
        "200":
          description: OK
      summary: Request signing an SSH key using a certain role with the provided details.
      tags:
      - secrets
  /ssh/verify:
    description: Validate the OTP provided by Vault SSH Agent.
    post:
      operationId: postSshVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshVerifyRequest'
      responses:
        "200":
          description: OK
      summary: Validate the OTP provided by Vault SSH Agent.
      tags:
      - secrets
    x-vault-unauthenticated: true
  /sys/audit:
    description: List the currently enabled audit backends.
    get:
      operationId: getSysAudit
      responses:
        "200":
          description: OK
      summary: List the enabled audit devices.
      tags:
      - system
    x-vault-sudo: true
  /sys/audit-hash/{path}:
    description: The hash of the given string via the given audit backend
    post:
      operationId: postSysAuditHashPath
      parameters:
      - description: 'The name of the backend. Cannot be delimited. Example: "mysql"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAuditHashRequest'
      responses:
        "200":
          description: OK
      summary: The hash of the given string via the given audit backend
      tags:
      - system
  /sys/audit/{path}:
    delete:
      operationId: deleteSysAuditPath
      parameters:
      - description: 'The name of the backend. Cannot be delimited. Example: "mysql"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Disable the audit device at the given path.
      tags:
      - system
    description: Enable or disable audit backends.
    post:
      operationId: postSysAuditPath
      parameters:
      - description: 'The name of the backend. Cannot be delimited. Example: "mysql"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAuditRequest'
      responses:
        "200":
          description: OK
      summary: Enable a new audit device at the supplied path.
      tags:
      - system
    x-vault-sudo: true
  /sys/auth:
    description: List the currently enabled credential backends.
    get:
      operationId: getSysAuth
      responses:
        "200":
          description: OK
      summary: List the currently enabled credential backends.
      tags:
      - system
  /sys/auth/{path}:
    delete:
      operationId: deleteSysAuthPath
      parameters:
      - description: 'The path to mount to. Cannot be delimited. Example: "user"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Disable the auth method at the given auth path
      tags:
      - system
    description: Enable a new credential backend with a name.
    get:
      operationId: getSysAuthPath
      parameters:
      - description: 'The path to mount to. Cannot be delimited. Example: "user"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the configuration of the auth engine at the given path.
      tags:
      - system
    post:
      description: |-
        After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.

        For example, enable the "foo" auth method will make it accessible at /auth/foo.
      operationId: postSysAuthPath
      parameters:
      - description: 'The path to mount to. Cannot be delimited. Example: "user"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAuthRequest'
      responses:
        "200":
          description: OK
      summary: Enables a new auth method.
      tags:
      - system
    x-vault-sudo: true
  /sys/auth/{path}/tune:
    description: Tune the configuration parameters for an auth path.
    get:
      description: This endpoint requires sudo capability on the final path, but the
        same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
      operationId: getSysAuthPathTune
      parameters:
      - description: Tune the configuration parameters for an auth path.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Reads the given auth path's configuration.
      tags:
      - system
    post:
      description: This endpoint requires sudo capability on the final path, but the
        same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
      operationId: postSysAuthPathTune
      parameters:
      - description: Tune the configuration parameters for an auth path.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAuthTuneRequest'
      responses:
        "200":
          description: OK
      summary: Tune configuration parameters for a given auth path.
      tags:
      - system
    x-vault-sudo: true
  /sys/capabilities:
    description: Fetches the capabilities of the given token on the given path.
    post:
      operationId: postSysCapabilities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemCapabilitiesRequest'
      responses:
        "200":
          description: OK
      summary: Fetches the capabilities of the given token on the given path.
      tags:
      - system
  /sys/capabilities-accessor:
    description: Fetches the capabilities of the token associated with the given token,
      on the given path.
    post:
      operationId: postSysCapabilitiesAccessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemCapabilitiesAccessorRequest'
      responses:
        "200":
          description: OK
      summary: Fetches the capabilities of the token associated with the given token,
        on the given path.
      tags:
      - system
  /sys/capabilities-self:
    description: Fetches the capabilities of the given token on the given path.
    post:
      operationId: postSysCapabilitiesSelf
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemCapabilitiesSelfRequest'
      responses:
        "200":
          description: OK
      summary: Fetches the capabilities of the given token on the given path.
      tags:
      - system
  /sys/config/auditing/request-headers:
    description: Lists the headers configured to be audited.
    get:
      operationId: getSysConfigAuditingRequestHeaders
      responses:
        "200":
          description: OK
      summary: List the request headers that are configured to be audited.
      tags:
      - system
    x-vault-sudo: true
  /sys/config/auditing/request-headers/{header}:
    delete:
      operationId: deleteSysConfigAuditingRequestHeadersHeader
      parameters:
      - explode: false
        in: path
        name: header
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Disable auditing of the given request header.
      tags:
      - system
    description: Configures the headers sent to the audit logs.
    get:
      operationId: getSysConfigAuditingRequestHeadersHeader
      parameters:
      - explode: false
        in: path
        name: header
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: List the information for the given request header.
      tags:
      - system
    post:
      operationId: postSysConfigAuditingRequestHeadersHeader
      parameters:
      - explode: false
        in: path
        name: header
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfigAuditingRequestHeadersRequest'
      responses:
        "200":
          description: OK
      summary: Enable auditing of a header.
      tags:
      - system
    x-vault-sudo: true
  /sys/config/cors:
    delete:
      operationId: deleteSysConfigCors
      responses:
        "204":
          description: empty body
      summary: Remove any CORS settings.
      tags:
      - system
    description: This path responds to the following HTTP methods. GET / Returns the
      configuration of the CORS setting. POST / Sets the comma-separated list of origins
      that can make cross-origin requests. DELETE / Clears the CORS configuration
      and disables acceptance of CORS requests.
    get:
      operationId: getSysConfigCors
      responses:
        "200":
          description: OK
      summary: Return the current CORS settings.
      tags:
      - system
    post:
      operationId: postSysConfigCors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfigCorsRequest'
      responses:
        "200":
          description: OK
      summary: Configure the CORS settings.
      tags:
      - system
    x-vault-sudo: true
  /sys/config/reload/{subsystem}:
    post:
      operationId: postSysConfigReloadSubsystem
      parameters:
      - explode: false
        in: path
        name: subsystem
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Reload the given subsystem
      tags:
      - system
  /sys/config/state/sanitized:
    get:
      description: The sanitized output strips configuration values in the storage,
        HA storage, and seals stanzas, which may contain sensitive values such as
        API tokens. It also removes any token or secret fields in other stanzas, such
        as the circonus_api_token from telemetry.
      operationId: getSysConfigStateSanitized
      responses:
        "200":
          description: OK
      summary: Return a sanitized version of the Vault server configuration.
      tags:
      - system
  /sys/config/ui/headers/:
    description: This path responds to the following HTTP methods. GET /<header> Returns
      the header value. POST /<header> Sets the header value for the UI. DELETE /<header>
      Clears the header value for UI. LIST / List the headers configured for the UI.
    get:
      operationId: getSysConfigUiHeaders
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Return a list of configured UI headers.
      tags:
      - system
    x-vault-sudo: true
  /sys/config/ui/headers/{header}:
    delete:
      operationId: deleteSysConfigUiHeadersHeader
      parameters:
      - description: The name of the header.
        explode: false
        in: path
        name: header
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Remove a UI header.
      tags:
      - system
    description: This path responds to the following HTTP methods. GET /<header> Returns
      the header value. POST /<header> Sets the header value for the UI. DELETE /<header>
      Clears the header value for UI. LIST / List the headers configured for the UI.
    get:
      operationId: getSysConfigUiHeadersHeader
      parameters:
      - description: The name of the header.
        explode: false
        in: path
        name: header
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Return the given UI header's configuration
      tags:
      - system
    post:
      operationId: postSysConfigUiHeadersHeader
      parameters:
      - description: The name of the header.
        explode: false
        in: path
        name: header
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfigUiHeadersRequest'
      responses:
        "200":
          description: OK
      summary: Configure the values to be returned for the UI header.
      tags:
      - system
    x-vault-sudo: true
  /sys/generate-root:
    delete:
      operationId: deleteSysGenerateRoot
      responses:
        "204":
          description: empty body
      summary: Cancels any in-progress root generation attempt.
      tags:
      - system
    description: Reads, generates, or deletes a root token regeneration process.
    get:
      operationId: getSysGenerateRoot
      responses:
        "200":
          description: OK
      summary: Read the configuration and progress of the current root generation
        attempt.
      tags:
      - system
    post:
      description: Only a single root generation attempt can take place at a time.
        One (and only one) of otp or pgp_key are required.
      operationId: postSysGenerateRoot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemGenerateRootRequest'
      responses:
        "200":
          description: OK
      summary: Initializes a new root generation attempt.
      tags:
      - system
  /sys/generate-root/attempt:
    delete:
      operationId: deleteSysGenerateRootAttempt
      responses:
        "204":
          description: empty body
      summary: Cancels any in-progress root generation attempt.
      tags:
      - system
    description: Reads, generates, or deletes a root token regeneration process.
    get:
      operationId: getSysGenerateRootAttempt
      responses:
        "200":
          description: OK
      summary: Read the configuration and progress of the current root generation
        attempt.
      tags:
      - system
    post:
      description: Only a single root generation attempt can take place at a time.
        One (and only one) of otp or pgp_key are required.
      operationId: postSysGenerateRootAttempt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemGenerateRootAttemptRequest'
      responses:
        "200":
          description: OK
      summary: Initializes a new root generation attempt.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/generate-root/update:
    description: Reads, generates, or deletes a root token regeneration process.
    post:
      description: If the threshold number of unseal key shares is reached, Vault
        will complete the root generation and issue the new token. Otherwise, this
        API must be called multiple times until that threshold is met. The attempt
        nonce must be provided with each call.
      operationId: postSysGenerateRootUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemGenerateRootUpdateRequest'
      responses:
        "200":
          description: OK
      summary: Enter a single unseal key share to progress the root generation attempt.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/ha-status:
    description: Provides information about the nodes in an HA cluster.
    get:
      operationId: getSysHaStatus
      responses:
        "200":
          description: OK
      summary: Check the HA status of a Vault cluster
      tags:
      - system
  /sys/health:
    description: Checks the health status of the Vault.
    get:
      operationId: getSysHealth
      responses:
        "200":
          description: initialized, unsealed, and active
        "429":
          description: unsealed and standby
        "472":
          description: data recovery mode replication secondary and active
        "501":
          description: not initialized
        "503":
          description: sealed
      summary: Returns the health status of Vault.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/host-info:
    description: Information about the host instance that this Vault server is running
      on.
    get:
      description: "Information about the host instance that this Vault server is\
        \ running on.\n\t\tThe information that gets collected includes host hardware\
        \ information, and CPU,\n\t\tdisk, and memory utilization"
      operationId: getSysHostInfo
      responses:
        "200":
          description: OK
      summary: Information about the host instance that this Vault server is running
        on.
      tags:
      - system
  /sys/in-flight-req:
    get:
      description: "This path responds to the following HTTP methods.\n\t\tGET /\n\
        \t\t\tReturns a map of in-flight requests."
      operationId: getSysInFlightReq
      responses:
        "200":
          description: OK
      summary: reports in-flight requests
      tags:
      - system
  /sys/init:
    description: Initializes or returns the initialization status of the Vault.
    get:
      operationId: getSysInit
      responses:
        "200":
          description: OK
      summary: Returns the initialization status of Vault.
      tags:
      - system
    post:
      description: The Vault must not have been previously initialized. The recovery
        options, as well as the stored shares option, are only available when using
        Vault HSM.
      operationId: postSysInit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemInitRequest'
      responses:
        "200":
          description: OK
      summary: Initialize a new Vault.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/internal/counters/activity:
    description: Query the historical count of clients.
    get:
      operationId: getSysInternalCountersActivity
      responses:
        "200":
          description: OK
      summary: Report the client count metrics, for this namespace and all child namespaces.
      tags:
      - system
  /sys/internal/counters/activity/export:
    description: Export the historical activity of clients.
    get:
      operationId: getSysInternalCountersActivityExport
      responses:
        "200":
          description: OK
      summary: Report the client count metrics, for this namespace and all child namespaces.
      tags:
      - system
  /sys/internal/counters/activity/monthly:
    description: Count of active clients so far this month.
    get:
      operationId: getSysInternalCountersActivityMonthly
      responses:
        "200":
          description: OK
      summary: Report the number of clients for this month, for this namespace and
        all child namespaces.
      tags:
      - system
  /sys/internal/counters/config:
    description: Control the collection and reporting of client counts.
    get:
      operationId: getSysInternalCountersConfig
      responses:
        "200":
          description: OK
      summary: Read the client count tracking configuration.
      tags:
      - system
    post:
      operationId: postSysInternalCountersConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemInternalCountersConfigRequest'
      responses:
        "200":
          description: OK
      summary: Enable or disable collection of client count, set retention period,
        or set default reporting period.
      tags:
      - system
  /sys/internal/counters/entities:
    description: Count of active entities in this Vault cluster.
    get:
      operationId: getSysInternalCountersEntities
      responses:
        "200":
          description: OK
      summary: Backwards compatibility is not guaranteed for this API
      tags:
      - system
  /sys/internal/counters/requests:
    description: Currently unsupported. Previously, count of requests seen by this
      Vault cluster over time.
    get:
      operationId: getSysInternalCountersRequests
      responses:
        "200":
          description: OK
      summary: Backwards compatibility is not guaranteed for this API
      tags:
      - system
  /sys/internal/counters/tokens:
    description: Count of active tokens in this Vault cluster.
    get:
      operationId: getSysInternalCountersTokens
      responses:
        "200":
          description: OK
      summary: Backwards compatibility is not guaranteed for this API
      tags:
      - system
  /sys/internal/specs/openapi:
    get:
      operationId: getSysInternalSpecsOpenapi
      responses:
        "200":
          description: OK
      summary: Generate an OpenAPI 3 document of all mounted paths.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/internal/ui/feature-flags:
    description: Enabled feature flags. Internal API; its location, inputs, and outputs
      may change.
    get:
      operationId: getSysInternalUiFeatureFlags
      responses:
        "200":
          description: OK
      summary: Lists enabled feature flags.
      tags:
      - system
  /sys/internal/ui/mounts:
    description: Information about mounts returned according to their tuned visibility.
      Internal API; its location, inputs, and outputs may change.
    get:
      operationId: getSysInternalUiMounts
      responses:
        "200":
          description: OK
      summary: Lists all enabled and visible auth and secrets mounts.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/internal/ui/mounts/{path}:
    description: Information about mounts returned according to their tuned visibility.
      Internal API; its location, inputs, and outputs may change.
    get:
      operationId: getSysInternalUiMountsPath
      parameters:
      - description: The path of the mount.
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Return information about the given mount.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/internal/ui/namespaces:
    description: Information about visible child namespaces. Internal API; its location,
      inputs, and outputs may change.
    get:
      operationId: getSysInternalUiNamespaces
      responses:
        "200":
          description: OK
      summary: Backwards compatibility is not guaranteed for this API
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/internal/ui/resultant-acl:
    description: Information about a token's resultant ACL. Internal API; its location,
      inputs, and outputs may change.
    get:
      operationId: getSysInternalUiResultantAcl
      responses:
        "200":
          description: OK
      summary: Backwards compatibility is not guaranteed for this API
      tags:
      - system
  /sys/key-status:
    description: Provides information about the backend encryption key.
    get:
      operationId: getSysKeyStatus
      responses:
        "200":
          description: OK
      summary: Provides information about the backend encryption key.
      tags:
      - system
  /sys/leader:
    description: Check the high availability status and current leader of Vault
    get:
      operationId: getSysLeader
      responses:
        "200":
          description: OK
      summary: Returns the high availability status and current leader instance of
        Vault.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/leases:
    description: List leases associated with this Vault cluster
    get:
      operationId: getSysLeases
      responses:
        "200":
          description: OK
      summary: List leases associated with this Vault cluster
      tags:
      - system
    x-vault-sudo: true
  /sys/leases/count:
    description: Count of leases associated with this Vault cluster
    get:
      operationId: getSysLeasesCount
      responses:
        "200":
          description: OK
      summary: Count of leases associated with this Vault cluster
      tags:
      - system
  /sys/leases/lookup:
    description: View or list lease metadata.
    post:
      operationId: postSysLeasesLookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLeasesLookupRequest'
      responses:
        "200":
          description: OK
      summary: Retrieve lease metadata.
      tags:
      - system
  /sys/leases/lookup/:
    description: View or list lease metadata.
    get:
      operationId: getSysLeasesLookup
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Returns a list of lease ids.
      tags:
      - system
    x-vault-sudo: true
  /sys/leases/lookup/{prefix}:
    description: View or list lease metadata.
    get:
      operationId: getSysLeasesLookupPrefix
      parameters:
      - description: 'The path to list leases under. Example: "aws/creds/deploy"'
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Returns a list of lease ids.
      tags:
      - system
    x-vault-sudo: true
  /sys/leases/renew:
    description: Renew a lease on a secret
    post:
      operationId: postSysLeasesRenew
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLeasesRenewRequest'
      responses:
        "200":
          description: OK
      summary: Renews a lease, requesting to extend the lease.
      tags:
      - system
  /sys/leases/renew/{url_lease_id}:
    description: Renew a lease on a secret
    post:
      operationId: postSysLeasesRenewUrl_lease_id
      parameters:
      - description: The lease identifier to renew. This is included with a lease.
        explode: false
        in: path
        name: url_lease_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLeasesRenewLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Renews a lease, requesting to extend the lease.
      tags:
      - system
  /sys/leases/revoke:
    description: Revoke a leased secret immediately
    post:
      operationId: postSysLeasesRevoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLeasesRevokeRequest'
      responses:
        "200":
          description: OK
      summary: Revokes a lease immediately.
      tags:
      - system
  /sys/leases/revoke-force/{prefix}:
    description: Revoke all secrets generated in a given prefix, ignoring errors.
    post:
      description: |-
        Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.

        By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
      operationId: postSysLeasesRevokeForcePrefix
      parameters:
      - description: 'The path to revoke keys under. Example: "prod/aws/ops"'
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Revokes all secrets or tokens generated under a given prefix immediately
      tags:
      - system
    x-vault-sudo: true
  /sys/leases/revoke-prefix/{prefix}:
    description: Revoke all secrets generated in a given prefix
    post:
      operationId: postSysLeasesRevokePrefixPrefix
      parameters:
      - description: 'The path to revoke keys under. Example: "prod/aws/ops"'
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLeasesRevokePrefixRequest'
      responses:
        "200":
          description: OK
      summary: Revokes all secrets (via a lease ID prefix) or tokens (via the tokens'
        path property) generated under a given prefix immediately.
      tags:
      - system
    x-vault-sudo: true
  /sys/leases/revoke/{url_lease_id}:
    description: Revoke a leased secret immediately
    post:
      operationId: postSysLeasesRevokeUrl_lease_id
      parameters:
      - description: The lease identifier to renew. This is included with a lease.
        explode: false
        in: path
        name: url_lease_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLeasesRevokeLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Revokes a lease immediately.
      tags:
      - system
  /sys/leases/tidy:
    description: This endpoint performs cleanup tasks that can be run if certain error
      conditions have occurred.
    post:
      operationId: postSysLeasesTidy
      responses:
        "200":
          description: OK
      summary: |-
        This endpoint performs cleanup tasks that can be run if certain error
        conditions have occurred.
      tags:
      - system
  /sys/loggers:
    delete:
      operationId: deleteSysLoggers
      responses:
        "204":
          description: empty body
      summary: Revert the all loggers to use log level provided in config.
      tags:
      - system
    post:
      operationId: postSysLoggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLoggersRequest'
      responses:
        "200":
          description: OK
      summary: Modify the log level for all existing loggers.
      tags:
      - system
  /sys/loggers/{name}:
    delete:
      operationId: deleteSysLoggersName
      parameters:
      - description: The name of the logger to be modified.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Revert a single logger to use log level provided in config.
      tags:
      - system
    post:
      operationId: postSysLoggersName
      parameters:
      - description: The name of the logger to be modified.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemLoggersRequest'
      responses:
        "200":
          description: OK
      summary: Modify the log level of a single logger.
      tags:
      - system
  /sys/metrics:
    description: Export the metrics aggregated for telemetry purpose.
    get:
      operationId: getSysMetrics
      parameters:
      - description: Format to export metrics into. Currently accepts only "prometheus".
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Export the metrics aggregated for telemetry purpose.
      tags:
      - system
  /sys/mfa/validate:
    post:
      operationId: postSysMfaValidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemMfaValidateRequest'
      responses:
        "200":
          description: OK
      summary: Validates the login for the given MFA methods. Upon successful validation,
        it returns an auth response containing the client token
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/monitor:
    get:
      operationId: getSysMonitor
      parameters:
      - description: Output format of logs. Supported values are "standard" and "json".
          The default is "standard".
        explode: true
        in: query
        name: log_format
        required: false
        schema:
          default: standard
          type: string
        style: form
      - description: Log level to view system logs at. Currently supported values
          are "trace", "debug", "info", "warn", "error".
        explode: true
        in: query
        name: log_level
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - system
  /sys/mounts:
    description: List the currently mounted backends.
    get:
      operationId: getSysMounts
      responses:
        "200":
          description: OK
      summary: List the currently mounted backends.
      tags:
      - system
  /sys/mounts/{path}:
    delete:
      operationId: deleteSysMountsPath
      parameters:
      - description: 'The path to mount to. Example: "aws/east"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Disable the mount point specified at the given path.
      tags:
      - system
    description: Mount a new backend at a new path.
    get:
      operationId: getSysMountsPath
      parameters:
      - description: 'The path to mount to. Example: "aws/east"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Read the configuration of the secret engine at the given path.
      tags:
      - system
    post:
      operationId: postSysMountsPath
      parameters:
      - description: 'The path to mount to. Example: "aws/east"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemMountsRequest'
      responses:
        "200":
          description: OK
      summary: Enable a new secrets engine at the given path.
      tags:
      - system
  /sys/mounts/{path}/tune:
    description: Tune backend configuration parameters for this mount.
    get:
      operationId: getSysMountsPathTune
      parameters:
      - description: 'The path to mount to. Example: "aws/east"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Tune backend configuration parameters for this mount.
      tags:
      - system
    post:
      operationId: postSysMountsPathTune
      parameters:
      - description: 'The path to mount to. Example: "aws/east"'
        explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemMountsTuneRequest'
      responses:
        "200":
          description: OK
      summary: Tune backend configuration parameters for this mount.
      tags:
      - system
  /sys/plugins/catalog:
    description: Lists all the plugins known to Vault
    get:
      operationId: getSysPluginsCatalog
      responses:
        "200":
          description: OK
      summary: Lists all the plugins known to Vault
      tags:
      - system
  /sys/plugins/catalog/{name}:
    delete:
      operationId: deleteSysPluginsCatalogName
      parameters:
      - description: The name of the plugin
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Remove the plugin with the given name.
      tags:
      - system
    description: Configures the plugins known to Vault
    get:
      operationId: getSysPluginsCatalogName
      parameters:
      - description: The name of the plugin
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Return the configuration data for the plugin with the given name.
      tags:
      - system
    post:
      operationId: postSysPluginsCatalogName
      parameters:
      - description: The name of the plugin
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPluginsCatalogRequest'
      responses:
        "200":
          description: OK
      summary: Register a new plugin, or updates an existing one with the supplied
        name.
      tags:
      - system
    x-vault-sudo: true
  /sys/plugins/catalog/{type}:
    description: Configures the plugins known to Vault
    get:
      operationId: getSysPluginsCatalogType
      parameters:
      - description: The type of the plugin, may be auth, secret, or database
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the plugins in the catalog.
      tags:
      - system
    x-vault-sudo: true
  /sys/plugins/catalog/{type}/{name}:
    delete:
      operationId: deleteSysPluginsCatalogTypeName
      parameters:
      - description: The name of the plugin
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: The type of the plugin, may be auth, secret, or database
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Remove the plugin with the given name.
      tags:
      - system
    description: Configures the plugins known to Vault
    get:
      operationId: getSysPluginsCatalogTypeName
      parameters:
      - description: The name of the plugin
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: The type of the plugin, may be auth, secret, or database
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Return the configuration data for the plugin with the given name.
      tags:
      - system
    post:
      operationId: postSysPluginsCatalogTypeName
      parameters:
      - description: The name of the plugin
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: The type of the plugin, may be auth, secret, or database
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPluginsCatalogRequest'
      responses:
        "200":
          description: OK
      summary: Register a new plugin, or updates an existing one with the supplied
        name.
      tags:
      - system
    x-vault-sudo: true
  /sys/plugins/reload/backend:
    description: Reload mounts that use a particular backend plugin.
    post:
      description: Either the plugin name (`plugin`) or the desired plugin backend
        mounts (`mounts`) must be provided, but not both. In the case that the plugin
        name is provided, all mounted paths that use that plugin backend will be reloaded.  If
        (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
      operationId: postSysPluginsReloadBackend
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPluginsReloadBackendRequest'
      responses:
        "200":
          description: OK
      summary: Reload mounted plugin backends.
      tags:
      - system
  /sys/policies/acl:
    description: List the configured access control policies.
    get:
      operationId: getSysPoliciesAcl
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the configured access control policies.
      tags:
      - system
  /sys/policies/acl/{name}:
    delete:
      operationId: deleteSysPoliciesAclName
      parameters:
      - description: 'The name of the policy. Example: "ops"'
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete the ACL policy with the given name.
      tags:
      - system
    description: Read, Modify, or Delete an access control policy.
    get:
      operationId: getSysPoliciesAclName
      parameters:
      - description: 'The name of the policy. Example: "ops"'
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Retrieve information about the named ACL policy.
      tags:
      - system
    post:
      operationId: postSysPoliciesAclName
      parameters:
      - description: 'The name of the policy. Example: "ops"'
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPoliciesAclRequest'
      responses:
        "200":
          description: OK
      summary: Add a new or update an existing ACL policy.
      tags:
      - system
  /sys/policies/password:
    get:
      operationId: getSysPoliciesPassword
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the existing password policies.
      tags:
      - system
  /sys/policies/password/{name}:
    delete:
      operationId: deleteSysPoliciesPasswordName
      parameters:
      - description: The name of the password policy.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete a password policy.
      tags:
      - system
    description: Read, Modify, or Delete a password policy.
    get:
      operationId: getSysPoliciesPasswordName
      parameters:
      - description: The name of the password policy.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Retrieve an existing password policy.
      tags:
      - system
    post:
      operationId: postSysPoliciesPasswordName
      parameters:
      - description: The name of the password policy.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPoliciesPasswordRequest'
      responses:
        "200":
          description: OK
      summary: Add a new or update an existing password policy.
      tags:
      - system
  /sys/policies/password/{name}/generate:
    description: Generate a password from an existing password policy.
    get:
      operationId: getSysPoliciesPasswordNameGenerate
      parameters:
      - description: The name of the password policy.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate a password from an existing password policy.
      tags:
      - system
  /sys/policy:
    description: List the configured access control policies.
    get:
      operationId: getSysPolicy
      parameters:
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: List the configured access control policies.
      tags:
      - system
  /sys/policy/{name}:
    delete:
      operationId: deleteSysPolicyName
      parameters:
      - description: 'The name of the policy. Example: "ops"'
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete the policy with the given name.
      tags:
      - system
    description: Read, Modify, or Delete an access control policy.
    get:
      operationId: getSysPolicyName
      parameters:
      - description: 'The name of the policy. Example: "ops"'
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Retrieve the policy body for the named policy.
      tags:
      - system
    post:
      operationId: postSysPolicyName
      parameters:
      - description: 'The name of the policy. Example: "ops"'
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemPolicyRequest'
      responses:
        "200":
          description: OK
      summary: Add a new or update an existing policy.
      tags:
      - system
  /sys/pprof/:
    get:
      description: "Returns an HTML page listing the available \nprofiles. This should\
        \ be mainly accessed via browsers or applications that can \nrender pages."
      operationId: getSysPprof
      responses:
        "200":
          description: OK
      summary: Returns an HTML page listing the available profiles.
      tags:
      - system
  /sys/pprof/allocs:
    get:
      description: Returns a sampling of all past memory allocations.
      operationId: getSysPprofAllocs
      responses:
        "200":
          description: OK
      summary: Returns a sampling of all past memory allocations.
      tags:
      - system
  /sys/pprof/block:
    get:
      description: Returns stack traces that led to blocking on synchronization primitives
      operationId: getSysPprofBlock
      responses:
        "200":
          description: OK
      summary: Returns stack traces that led to blocking on synchronization primitives
      tags:
      - system
  /sys/pprof/cmdline:
    get:
      description: Returns the running program's command line, with arguments separated
        by NUL bytes.
      operationId: getSysPprofCmdline
      responses:
        "200":
          description: OK
      summary: Returns the running program's command line.
      tags:
      - system
  /sys/pprof/goroutine:
    get:
      description: Returns stack traces of all current goroutines.
      operationId: getSysPprofGoroutine
      responses:
        "200":
          description: OK
      summary: Returns stack traces of all current goroutines.
      tags:
      - system
  /sys/pprof/heap:
    get:
      description: Returns a sampling of memory allocations of live object.
      operationId: getSysPprofHeap
      responses:
        "200":
          description: OK
      summary: Returns a sampling of memory allocations of live object.
      tags:
      - system
  /sys/pprof/mutex:
    get:
      description: Returns stack traces of holders of contended mutexes
      operationId: getSysPprofMutex
      responses:
        "200":
          description: OK
      summary: Returns stack traces of holders of contended mutexes
      tags:
      - system
  /sys/pprof/profile:
    get:
      description: Returns a pprof-formatted cpu profile payload. Profiling lasts
        for duration specified in seconds GET parameter, or for 30 seconds if not
        specified.
      operationId: getSysPprofProfile
      responses:
        "200":
          description: OK
      summary: Returns a pprof-formatted cpu profile payload.
      tags:
      - system
  /sys/pprof/symbol:
    get:
      description: Returns the program counters listed in the request.
      operationId: getSysPprofSymbol
      responses:
        "200":
          description: OK
      summary: Returns the program counters listed in the request.
      tags:
      - system
  /sys/pprof/threadcreate:
    get:
      description: Returns stack traces that led to the creation of new OS threads
      operationId: getSysPprofThreadcreate
      responses:
        "200":
          description: OK
      summary: Returns stack traces that led to the creation of new OS threads
      tags:
      - system
  /sys/pprof/trace:
    get:
      description: Returns  the execution trace in binary form. Tracing lasts for
        duration specified in seconds GET parameter, or for 1 second if not specified.
      operationId: getSysPprofTrace
      responses:
        "200":
          description: OK
      summary: Returns the execution trace in binary form.
      tags:
      - system
  /sys/quotas/config:
    description: Create, update and read the quota configuration.
    get:
      operationId: getSysQuotasConfig
      responses:
        "200":
          description: OK
      tags:
      - system
    post:
      operationId: postSysQuotasConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemQuotasConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - system
  /sys/quotas/rate-limit:
    description: Lists the names of all the rate limit quotas.
    get:
      operationId: getSysQuotasRateLimit
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - system
  /sys/quotas/rate-limit/{name}:
    delete:
      operationId: deleteSysQuotasRateLimitName
      parameters:
      - description: Name of the quota rule.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - system
    description: Get, create or update rate limit resource quota for an optional namespace
      or mount.
    get:
      operationId: getSysQuotasRateLimitName
      parameters:
      - description: Name of the quota rule.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - system
    post:
      operationId: postSysQuotasRateLimitName
      parameters:
      - description: Name of the quota rule.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemQuotasRateLimitRequest'
      responses:
        "200":
          description: OK
      tags:
      - system
  /sys/raw:
    delete:
      operationId: deleteSysRaw
      responses:
        "204":
          description: empty body
      summary: Delete the key with given path.
      tags:
      - system
    description: Write, Read, and Delete data directly in the Storage backend.
    get:
      operationId: getSysRaw
      parameters:
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Read the value of the key at the given path.
      tags:
      - system
    post:
      operationId: postSysRaw
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRawRequest'
      responses:
        "200":
          description: OK
      summary: Update the value of the key at the given path.
      tags:
      - system
    x-vault-sudo: true
    x-vault-createSupported: true
  /sys/raw/{path}:
    delete:
      operationId: deleteSysRawPath
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Delete the key with given path.
      tags:
      - system
    description: Write, Read, and Delete data directly in the Storage backend.
    get:
      operationId: getSysRawPath
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      - description: Return a list if `true`
        explode: true
        in: query
        name: list
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Read the value of the key at the given path.
      tags:
      - system
    post:
      operationId: postSysRawPath
      parameters:
      - explode: false
        in: path
        name: path
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRawRequest'
      responses:
        "200":
          description: OK
      summary: Update the value of the key at the given path.
      tags:
      - system
    x-vault-sudo: true
    x-vault-createSupported: true
  /sys/rekey/backup:
    delete:
      operationId: deleteSysRekeyBackup
      responses:
        "204":
          description: empty body
      summary: Delete the backup copy of PGP-encrypted unseal keys.
      tags:
      - system
    description: Allows fetching or deleting the backup of the rotated unseal keys.
    get:
      operationId: getSysRekeyBackup
      responses:
        "200":
          description: OK
      summary: Return the backup copy of PGP-encrypted unseal keys.
      tags:
      - system
  /sys/rekey/init:
    delete:
      description: 'This clears the rekey settings as well as any progress made. This
        must be called to change the parameters of the rekey. Note: verification is
        still a part of a rekey. If rekeying is canceled during the verification flow,
        the current unseal keys remain valid.'
      operationId: deleteSysRekeyInit
      responses:
        "204":
          description: empty body
      summary: Cancels any in-progress rekey.
      tags:
      - system
    get:
      operationId: getSysRekeyInit
      responses:
        "200":
          description: OK
      summary: Reads the configuration and progress of the current rekey attempt.
      tags:
      - system
    post:
      description: Only a single rekey attempt can take place at a time, and changing
        the parameters of a rekey requires canceling and starting a new rekey, which
        will also provide a new nonce.
      operationId: postSysRekeyInit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRekeyInitRequest'
      responses:
        "200":
          description: OK
      summary: Initializes a new rekey attempt.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/rekey/recovery-key-backup:
    delete:
      operationId: deleteSysRekeyRecoveryKeyBackup
      responses:
        "204":
          description: empty body
      summary: Allows fetching or deleting the backup of the rotated unseal keys.
      tags:
      - system
    description: Allows fetching or deleting the backup of the rotated unseal keys.
    get:
      operationId: getSysRekeyRecoveryKeyBackup
      responses:
        "200":
          description: OK
      summary: Allows fetching or deleting the backup of the rotated unseal keys.
      tags:
      - system
  /sys/rekey/update:
    post:
      operationId: postSysRekeyUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRekeyUpdateRequest'
      responses:
        "200":
          description: OK
      summary: Enter a single unseal key share to progress the rekey of the Vault.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/rekey/verify:
    delete:
      description: This clears any progress made and resets the nonce. Unlike a `DELETE`
        against `sys/rekey/init`, this only resets the current verification operation,
        not the entire rekey atttempt.
      operationId: deleteSysRekeyVerify
      responses:
        "204":
          description: empty body
      summary: Cancel any in-progress rekey verification operation.
      tags:
      - system
    get:
      operationId: getSysRekeyVerify
      responses:
        "200":
          description: OK
      summary: Read the configuration and progress of the current rekey verification
        attempt.
      tags:
      - system
    post:
      operationId: postSysRekeyVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRekeyVerifyRequest'
      responses:
        "200":
          description: OK
      summary: Enter a single new key share to progress the rekey verification operation.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/remount:
    description: Move the mount point of an already-mounted backend, within or across
      namespaces
    post:
      operationId: postSysRemount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRemountRequest'
      responses:
        "200":
          description: OK
      summary: Initiate a mount migration
      tags:
      - system
    x-vault-sudo: true
  /sys/remount/status/{migration_id}:
    description: Check the status of a mount move operation
    get:
      operationId: getSysRemountStatusMigration_id
      parameters:
      - description: The ID of the migration operation
        explode: false
        in: path
        name: migration_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Check status of a mount migration
      tags:
      - system
  /sys/renew:
    description: Renew a lease on a secret
    post:
      operationId: postSysRenew
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRenewRequest'
      responses:
        "200":
          description: OK
      summary: Renews a lease, requesting to extend the lease.
      tags:
      - system
  /sys/renew/{url_lease_id}:
    description: Renew a lease on a secret
    post:
      operationId: postSysRenewUrl_lease_id
      parameters:
      - description: The lease identifier to renew. This is included with a lease.
        explode: false
        in: path
        name: url_lease_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRenewLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Renews a lease, requesting to extend the lease.
      tags:
      - system
  /sys/replication/status:
    get:
      operationId: getSysReplicationStatus
      responses:
        "200":
          description: OK
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/revoke:
    description: Revoke a leased secret immediately
    post:
      operationId: postSysRevoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRevokeRequest'
      responses:
        "200":
          description: OK
      summary: Revokes a lease immediately.
      tags:
      - system
  /sys/revoke-force/{prefix}:
    description: Revoke all secrets generated in a given prefix, ignoring errors.
    post:
      description: |-
        Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.

        By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
      operationId: postSysRevokeForcePrefix
      parameters:
      - description: 'The path to revoke keys under. Example: "prod/aws/ops"'
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Revokes all secrets or tokens generated under a given prefix immediately
      tags:
      - system
    x-vault-sudo: true
  /sys/revoke-prefix/{prefix}:
    description: Revoke all secrets generated in a given prefix
    post:
      operationId: postSysRevokePrefixPrefix
      parameters:
      - description: 'The path to revoke keys under. Example: "prod/aws/ops"'
        explode: false
        in: path
        name: prefix
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRevokePrefixRequest'
      responses:
        "200":
          description: OK
      summary: Revokes all secrets (via a lease ID prefix) or tokens (via the tokens'
        path property) generated under a given prefix immediately.
      tags:
      - system
    x-vault-sudo: true
  /sys/revoke/{url_lease_id}:
    description: Revoke a leased secret immediately
    post:
      operationId: postSysRevokeUrl_lease_id
      parameters:
      - description: The lease identifier to renew. This is included with a lease.
        explode: false
        in: path
        name: url_lease_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRevokeLeaseRequest'
      responses:
        "200":
          description: OK
      summary: Revokes a lease immediately.
      tags:
      - system
  /sys/rotate:
    description: Rotates the backend encryption key used to persist data.
    post:
      operationId: postSysRotate
      responses:
        "200":
          description: OK
      summary: Rotates the backend encryption key used to persist data.
      tags:
      - system
    x-vault-sudo: true
  /sys/rotate/config:
    description: Configures settings related to the backend encryption key management.
    get:
      operationId: getSysRotateConfig
      responses:
        "200":
          description: OK
      tags:
      - system
    post:
      operationId: postSysRotateConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemRotateConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - system
  /sys/seal:
    description: Seals the Vault.
    post:
      operationId: postSysSeal
      responses:
        "200":
          description: OK
      summary: Seal the Vault.
      tags:
      - system
  /sys/seal-status:
    description: Returns the seal status of the Vault.
    get:
      operationId: getSysSealStatus
      responses:
        "200":
          description: OK
      summary: Check the seal status of a Vault.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/step-down:
    post:
      description: This endpoint forces the node to give up active status. If the
        node does not have active status, this endpoint does nothing. Note that the
        node will sleep for ten seconds before attempting to grab the active lock
        again, but if no standby nodes grab the active lock in the interim, the same
        node may become the active node again.
      operationId: postSysStepDown
      responses:
        "204":
          description: empty body
      summary: Cause the node to give up active status.
      tags:
      - system
  /sys/tools/hash:
    description: Generate a hash sum for input data
    post:
      operationId: postSysToolsHash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemToolsHashRequest'
      responses:
        "200":
          description: OK
      summary: Generate a hash sum for input data
      tags:
      - system
  /sys/tools/hash/{urlalgorithm}:
    description: Generate a hash sum for input data
    post:
      operationId: postSysToolsHashUrlalgorithm
      parameters:
      - description: Algorithm to use (POST URL parameter)
        explode: false
        in: path
        name: urlalgorithm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemToolsHashRequest'
      responses:
        "200":
          description: OK
      summary: Generate a hash sum for input data
      tags:
      - system
  /sys/tools/random:
    description: Generate random bytes
    post:
      operationId: postSysToolsRandom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemToolsRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - system
  /sys/tools/random/{source}:
    description: Generate random bytes
    post:
      operationId: postSysToolsRandomSource
      parameters:
      - description: Which system to source random data from, ether "platform", "seal",
          or "all".
        explode: false
        in: path
        name: source
        required: true
        schema:
          default: platform
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemToolsRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - system
  /sys/tools/random/{source}/{urlbytes}:
    description: Generate random bytes
    post:
      operationId: postSysToolsRandomSourceUrlbytes
      parameters:
      - description: Which system to source random data from, ether "platform", "seal",
          or "all".
        explode: false
        in: path
        name: source
        required: true
        schema:
          default: platform
          type: string
        style: simple
      - description: The number of bytes to generate (POST URL parameter)
        explode: false
        in: path
        name: urlbytes
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemToolsRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - system
  /sys/tools/random/{urlbytes}:
    description: Generate random bytes
    post:
      operationId: postSysToolsRandomUrlbytes
      parameters:
      - description: The number of bytes to generate (POST URL parameter)
        explode: false
        in: path
        name: urlbytes
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemToolsRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - system
  /sys/unseal:
    description: Unseals the Vault.
    post:
      operationId: postSysUnseal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemUnsealRequest'
      responses:
        "200":
          description: OK
      summary: Unseal the Vault.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/version-history/:
    description: List historical version changes sorted by installation time in ascending
      order.
    get:
      operationId: getSysVersionHistory
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Returns map of historical version change entries
      tags:
      - system
  /sys/wrapping/lookup:
    description: Looks up the properties of a response-wrapped token.
    get:
      operationId: getSysWrappingLookup
      responses:
        "200":
          description: OK
      summary: Look up wrapping properties for the requester's token.
      tags:
      - system
    post:
      operationId: postSysWrappingLookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemWrappingLookupRequest'
      responses:
        "200":
          description: OK
      summary: Look up wrapping properties for the given token.
      tags:
      - system
    x-vault-unauthenticated: true
  /sys/wrapping/rewrap:
    description: Rotates a response-wrapped token.
    post:
      operationId: postSysWrappingRewrap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemWrappingRewrapRequest'
      responses:
        "200":
          description: OK
      summary: Rotates a response-wrapped token.
      tags:
      - system
  /sys/wrapping/unwrap:
    description: Unwraps a response-wrapped token.
    post:
      operationId: postSysWrappingUnwrap
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemWrappingUnwrapRequest'
      responses:
        "200":
          description: OK
      summary: Unwraps a response-wrapped token.
      tags:
      - system
  /sys/wrapping/wrap:
    description: Response-wraps an arbitrary JSON object.
    post:
      operationId: postSysWrappingWrap
      responses:
        "200":
          description: OK
      summary: Response-wraps an arbitrary JSON object.
      tags:
      - system
  /terraform/config:
    delete:
      operationId: deleteTerraformConfig
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Configure the Terraform Cloud / Enterprise backend.
    get:
      operationId: getTerraformConfig
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postTerraformConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerraformConfigRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /terraform/creds/{name}:
    description: Generate a Terraform Cloud or Enterprise API token from a specific
      Vault role.
    get:
      operationId: getTerraformCredsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate a Terraform Cloud or Enterprise API token from a specific
        Vault role.
      tags:
      - secrets
    post:
      operationId: postTerraformCredsName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Generate a Terraform Cloud or Enterprise API token from a specific
        Vault role.
      tags:
      - secrets
  /terraform/role:
    description: List the existing roles in Terraform Cloud / Enterprise backend
    get:
      operationId: getTerraformRole
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /terraform/role/{name}:
    delete:
      operationId: deleteTerraformRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      tags:
      - secrets
    description: Manages the Vault role for generating Terraform Cloud / Enterprise
      tokens.
    get:
      operationId: getTerraformRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
    post:
      operationId: postTerraformRoleName
      parameters:
      - description: Name of the role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerraformRoleRequest'
      responses:
        "200":
          description: OK
      tags:
      - secrets
    x-vault-createSupported: true
  /terraform/rotate-role/{name}:
    description: Request to rotate the credentials for a team or organization.
    post:
      operationId: postTerraformRotateRoleName
      parameters:
      - description: Name of the team or organization role
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      tags:
      - secrets
  /totp/code/{name}:
    description: Request time-based one-time use password or validate a password for
      a certain key .
    get:
      operationId: getTotpCodeName
      parameters:
      - description: Name of the key.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Request time-based one-time use password or validate a password for
        a certain key .
      tags:
      - secrets
    post:
      operationId: postTotpCodeName
      parameters:
      - description: Name of the key.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TotpCodeRequest'
      responses:
        "200":
          description: OK
      summary: Request time-based one-time use password or validate a password for
        a certain key .
      tags:
      - secrets
  /totp/keys:
    description: Manage the keys that can be created with this backend.
    get:
      operationId: getTotpKeys
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Manage the keys that can be created with this backend.
      tags:
      - secrets
  /totp/keys/{name}:
    delete:
      operationId: deleteTotpKeysName
      parameters:
      - description: Name of the key.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Manage the keys that can be created with this backend.
      tags:
      - secrets
    description: Manage the keys that can be created with this backend.
    get:
      operationId: getTotpKeysName
      parameters:
      - description: Name of the key.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Manage the keys that can be created with this backend.
      tags:
      - secrets
    post:
      operationId: postTotpKeysName
      parameters:
      - description: Name of the key.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TotpKeysRequest'
      responses:
        "200":
          description: OK
      summary: Manage the keys that can be created with this backend.
      tags:
      - secrets
  /transit/backup/{name}:
    description: Backup the named key
    get:
      operationId: getTransitBackupName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Backup the named key
      tags:
      - secrets
  /transit/cache-config:
    description: Configure caching strategy
    get:
      operationId: getTransitCacheConfig
      responses:
        "200":
          description: OK
      summary: Returns the size of the active cache
      tags:
      - secrets
    post:
      operationId: postTransitCacheConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitCacheConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configures a new cache of the specified size
      tags:
      - secrets
    x-vault-createSupported: true
  /transit/datakey/{plaintext}/{name}:
    description: Generate a data key
    post:
      operationId: postTransitDatakeyPlaintextName
      parameters:
      - description: The backend key used for encrypting the data key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: '"plaintext" will return the key in both plaintext and ciphertext;
          "wrapped" will return the ciphertext only.'
        explode: false
        in: path
        name: plaintext
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitDatakeyRequest'
      responses:
        "200":
          description: OK
      summary: Generate a data key
      tags:
      - secrets
  /transit/decrypt/{name}:
    description: Decrypt a ciphertext value using a named key
    post:
      operationId: postTransitDecryptName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitDecryptRequest'
      responses:
        "200":
          description: OK
      summary: Decrypt a ciphertext value using a named key
      tags:
      - secrets
  /transit/encrypt/{name}:
    description: Encrypt a plaintext value or a batch of plaintext blocks using a
      named key
    post:
      operationId: postTransitEncryptName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitEncryptRequest'
      responses:
        "200":
          description: OK
      summary: |-
        Encrypt a plaintext value or a batch of plaintext
        blocks using a named key
      tags:
      - secrets
    x-vault-createSupported: true
  /transit/export/{type}/{name}:
    description: Export named encryption or signing key
    get:
      operationId: getTransitExportTypeName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Type of key to export (encryption-key, signing-key, hmac-key)
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Export named encryption or signing key
      tags:
      - secrets
  /transit/export/{type}/{name}/{version}:
    description: Export named encryption or signing key
    get:
      operationId: getTransitExportTypeNameVersion
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Type of key to export (encryption-key, signing-key, hmac-key)
        explode: false
        in: path
        name: type
        required: true
        schema:
          type: string
        style: simple
      - description: Version of the key
        explode: false
        in: path
        name: version
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Export named encryption or signing key
      tags:
      - secrets
  /transit/hash:
    description: Generate a hash sum for input data
    post:
      operationId: postTransitHash
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitHashRequest'
      responses:
        "200":
          description: OK
      summary: Generate a hash sum for input data
      tags:
      - secrets
  /transit/hash/{urlalgorithm}:
    description: Generate a hash sum for input data
    post:
      operationId: postTransitHashUrlalgorithm
      parameters:
      - description: Algorithm to use (POST URL parameter)
        explode: false
        in: path
        name: urlalgorithm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitHashRequest'
      responses:
        "200":
          description: OK
      summary: Generate a hash sum for input data
      tags:
      - secrets
  /transit/hmac/{name}:
    description: Generate an HMAC for input data using the named key
    post:
      operationId: postTransitHmacName
      parameters:
      - description: The key to use for the HMAC function
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitHmacRequest'
      responses:
        "200":
          description: OK
      summary: Generate an HMAC for input data using the named key
      tags:
      - secrets
  /transit/hmac/{name}/{urlalgorithm}:
    description: Generate an HMAC for input data using the named key
    post:
      operationId: postTransitHmacNameUrlalgorithm
      parameters:
      - description: The key to use for the HMAC function
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Algorithm to use (POST URL parameter)
        explode: false
        in: path
        name: urlalgorithm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitHmacRequest'
      responses:
        "200":
          description: OK
      summary: Generate an HMAC for input data using the named key
      tags:
      - secrets
  /transit/keys:
    description: Managed named encryption keys
    get:
      operationId: getTransitKeys
      parameters:
      - description: Must be set to `true`
        explode: true
        in: query
        name: list
        required: true
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          description: OK
      summary: Managed named encryption keys
      tags:
      - secrets
  /transit/keys/{name}:
    delete:
      operationId: deleteTransitKeysName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: empty body
      summary: Managed named encryption keys
      tags:
      - secrets
    description: Managed named encryption keys
    get:
      operationId: getTransitKeysName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Managed named encryption keys
      tags:
      - secrets
    post:
      operationId: postTransitKeysName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitKeysRequest'
      responses:
        "200":
          description: OK
      summary: Managed named encryption keys
      tags:
      - secrets
  /transit/keys/{name}/config:
    description: Configure a named encryption key
    post:
      operationId: postTransitKeysNameConfig
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitKeysConfigRequest'
      responses:
        "200":
          description: OK
      summary: Configure a named encryption key
      tags:
      - secrets
  /transit/keys/{name}/import:
    description: Imports an externally-generated key into a new transit key
    post:
      operationId: postTransitKeysNameImport
      parameters:
      - description: The name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitKeysImportRequest'
      responses:
        "200":
          description: OK
      summary: Imports an externally-generated key into a new transit key
      tags:
      - secrets
  /transit/keys/{name}/import_version:
    description: Imports an externally-generated key into an existing imported key
    post:
      operationId: postTransitKeysNameImport_version
      parameters:
      - description: The name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitKeysImportVersionRequest'
      responses:
        "200":
          description: OK
      summary: Imports an externally-generated key into an existing imported key
      tags:
      - secrets
  /transit/keys/{name}/rotate:
    description: Rotate named encryption key
    post:
      operationId: postTransitKeysNameRotate
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
      summary: Rotate named encryption key
      tags:
      - secrets
  /transit/keys/{name}/trim:
    description: Trim key versions of a named key
    post:
      operationId: postTransitKeysNameTrim
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitKeysTrimRequest'
      responses:
        "200":
          description: OK
      summary: Trim key versions of a named key
      tags:
      - secrets
  /transit/random:
    description: Generate random bytes
    post:
      operationId: postTransitRandom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - secrets
  /transit/random/{source}:
    description: Generate random bytes
    post:
      operationId: postTransitRandomSource
      parameters:
      - description: Which system to source random data from, ether "platform", "seal",
          or "all".
        explode: false
        in: path
        name: source
        required: true
        schema:
          default: platform
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - secrets
  /transit/random/{source}/{urlbytes}:
    description: Generate random bytes
    post:
      operationId: postTransitRandomSourceUrlbytes
      parameters:
      - description: Which system to source random data from, ether "platform", "seal",
          or "all".
        explode: false
        in: path
        name: source
        required: true
        schema:
          default: platform
          type: string
        style: simple
      - description: The number of bytes to generate (POST URL parameter)
        explode: false
        in: path
        name: urlbytes
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - secrets
  /transit/random/{urlbytes}:
    description: Generate random bytes
    post:
      operationId: postTransitRandomUrlbytes
      parameters:
      - description: The number of bytes to generate (POST URL parameter)
        explode: false
        in: path
        name: urlbytes
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRandomRequest'
      responses:
        "200":
          description: OK
      summary: Generate random bytes
      tags:
      - secrets
  /transit/restore:
    description: Restore the named key
    post:
      operationId: postTransitRestore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRestoreRequest'
      responses:
        "200":
          description: OK
      summary: Restore the named key
      tags:
      - secrets
  /transit/restore/{name}:
    description: Restore the named key
    post:
      operationId: postTransitRestoreName
      parameters:
      - description: If set, this will be the name of the restored key.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRestoreRequest'
      responses:
        "200":
          description: OK
      summary: Restore the named key
      tags:
      - secrets
  /transit/rewrap/{name}:
    description: Rewrap ciphertext
    post:
      operationId: postTransitRewrapName
      parameters:
      - description: Name of the key
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitRewrapRequest'
      responses:
        "200":
          description: OK
      summary: Rewrap ciphertext
      tags:
      - secrets
  /transit/sign/{name}:
    description: Generate a signature for input data using the named key
    post:
      operationId: postTransitSignName
      parameters:
      - description: The key to use
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitSignRequest'
      responses:
        "200":
          description: OK
      summary: Generate a signature for input data using the named key
      tags:
      - secrets
  /transit/sign/{name}/{urlalgorithm}:
    description: Generate a signature for input data using the named key
    post:
      operationId: postTransitSignNameUrlalgorithm
      parameters:
      - description: The key to use
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Hash algorithm to use (POST URL parameter)
        explode: false
        in: path
        name: urlalgorithm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitSignRequest'
      responses:
        "200":
          description: OK
      summary: Generate a signature for input data using the named key
      tags:
      - secrets
  /transit/verify/{name}:
    description: Verify a signature or HMAC for input data created using the named
      key
    post:
      operationId: postTransitVerifyName
      parameters:
      - description: The key to use
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitVerifyRequest'
      responses:
        "200":
          description: OK
      summary: Verify a signature or HMAC for input data created using the named key
      tags:
      - secrets
  /transit/verify/{name}/{urlalgorithm}:
    description: Verify a signature or HMAC for input data created using the named
      key
    post:
      operationId: postTransitVerifyNameUrlalgorithm
      parameters:
      - description: The key to use
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Hash algorithm to use (POST URL parameter)
        explode: false
        in: path
        name: urlalgorithm
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransitVerifyRequest'
      responses:
        "200":
          description: OK
      summary: Verify a signature or HMAC for input data created using the named key
      tags:
      - secrets
  /transit/wrapping_key:
    description: Returns the public key to use for wrapping imported keys
    get:
      operationId: getTransitWrapping_key
      responses:
        "200":
          description: OK
      summary: Returns the public key to use for wrapping imported keys
      tags:
      - secrets
components:
  schemas:
    AdConfigRequest:
      example:
        last_rotation_tolerance: 0
        bindpass: bindpass
        client_tls_key: client_tls_key
        max_ttl: 1
        request_timeout: 5
        certificate: certificate
        use_pre111_group_cn_behavior: true
        case_sensitive_names: true
        anonymous_group_search: false
        groupattr: cn
        tls_min_version: tls12
        client_tls_cert: client_tls_cert
        upndomain: upndomain
        userattr: cn
        starttls: true
        groupfilter: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
        length: 6
        insecure_tls: true
        deny_null_bind: true
        tls_max_version: tls12
        ttl: 5
        url: ldap://127.0.0.1
        formatter: formatter
        binddn: binddn
        username_as_alias: false
        password_policy: password_policy
        groupdn: groupdn
        use_token_groups: false
        userfilter: ({{.UserAttr}}={{.Username}})
        discoverdn: true
        userdn: userdn
      properties:
        anonymous_group_search:
          default: false
          description: Use anonymous binds when performing LDAP group searches (if
            true the initial credentials will still be used for the initial connection
            test).
          type: boolean
          x-vault-displayAttrs:
            name: Anonymous group search
        binddn:
          description: LDAP DN for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            name: Name of Object to bind (binddn)
        bindpass:
          description: LDAP password for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            sensitive: true
        case_sensitive_names:
          description: If true, case sensitivity will be used when comparing usernames
            and groups for matching policies.
          type: boolean
        certificate:
          description: CA certificate to use when verifying LDAP server certificate,
            must be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: CA certificate
            editType: file
        client_tls_cert:
          description: Client certificate to provide to the LDAP server, must be x509
            PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client certificate
            editType: file
        client_tls_key:
          description: Client certificate key to provide to the LDAP server, must
            be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client key
            editType: file
        deny_null_bind:
          default: true
          description: Denies an unauthenticated LDAP bind request if the user's password
            is empty; defaults to true
          type: boolean
        discoverdn:
          description: Use anonymous bind to discover the bind DN of a user (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Discover DN
        formatter:
          deprecated: true
          description: Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
          type: string
        groupattr:
          default: cn
          description: 'LDAP attribute to follow on objects returned by <groupfilter>
            in order to enumerate user group membership. Examples: "cn" or "memberOf",
            etc. Default: cn'
          type: string
          x-vault-displayAttrs:
            name: Group Attribute
            value: cn
        groupdn:
          description: 'LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: Group DN
        groupfilter:
          default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
          description: 'Go template for querying group membership of user (optional)
            The template can access the following context variables: UserDN, Username
            Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))
            Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))'
          type: string
          x-vault-displayAttrs:
            name: Group Filter
        insecure_tls:
          description: Skip LDAP server SSL Certificate verification - VERY insecure
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Insecure TLS
        last_rotation_tolerance:
          default: 5
          description: The number of seconds after a Vault rotation where, if Active
            Directory shows a later rotation, it should be considered out-of-band.
          format: seconds
          type: integer
        length:
          default: 64
          deprecated: true
          description: The desired length of passwords that Vault generates.
          type: integer
        max_ttl:
          description: In seconds, the maximum password time-to-live.
          format: seconds
          type: integer
        password_policy:
          description: Name of the password policy to use to generate passwords.
          type: string
        request_timeout:
          description: Timeout, in seconds, for the connection when making requests
            against the server before returning back an error.
          format: seconds
          type: integer
        starttls:
          description: Issue a StartTLS command after establishing unencrypted connection
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Issue StartTLS
        tls_max_version:
          default: tls12
          description: Maximum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Maximum TLS Version
        tls_min_version:
          default: tls12
          description: Minimum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Minimum TLS Version
        ttl:
          description: In seconds, the default password time-to-live.
          format: seconds
          type: integer
        upndomain:
          description: Enables userPrincipalDomain login with [username]@UPNDomain
            (optional)
          type: string
          x-vault-displayAttrs:
            name: User Principal (UPN) Domain
        url:
          default: ldap://127.0.0.1
          description: 'LDAP URL to connect to (default: ldap://127.0.0.1). Multiple
            URLs can be specified by concatenating them with commas; they will be
            tried in-order.'
          type: string
          x-vault-displayAttrs:
            name: URL
        use_pre111_group_cn_behavior:
          description: In Vault 1.1.1 a fix for handling group CN values of different
            cases unfortunately introduced a regression that could cause previously
            defined groups to not be found due to a change in the resulting name.
            If set true, the pre-1.1.1 behavior for matching group CNs will be used.
            This is only needed in some upgrade scenarios for backwards compatibility.
            It is enabled by default if the config is upgraded but disabled by default
            on new configurations.
          type: boolean
        use_token_groups:
          default: false
          description: If true, use the Active Directory tokenGroups constructed attribute
            of the user to find the group memberships. This will find all security
            groups including nested ones.
          type: boolean
        userattr:
          default: cn
          description: 'Attribute used for users (default: cn)'
          type: string
          x-vault-displayAttrs:
            name: User Attribute
            value: cn
        userdn:
          description: 'LDAP domain to use for users (eg: ou=People,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: User DN
        userfilter:
          default: ({{.UserAttr}}={{.Username}})
          description: 'Go template for LDAP user search filer (optional) The template
            can access the following context variables: UserAttr, Username Default:
            ({{.UserAttr}}={{.Username}})'
          type: string
          x-vault-displayAttrs:
            name: User Search Filter
        username_as_alias:
          default: false
          description: If true, sets the alias name to the username
          type: boolean
      type: object
    AdLibraryCheckInRequest:
      example:
        service_account_names:
        - service_account_names
        - service_account_names
      properties:
        service_account_names:
          description: The username/logon name for the service accounts to check in.
          items:
            type: string
          type: array
      type: object
    AdLibraryCheckOutRequest:
      example:
        ttl: 0
      properties:
        ttl:
          description: The length of time before the check-out will expire, in seconds.
          format: seconds
          type: integer
      type: object
    AdLibraryManageCheckInRequest:
      example:
        service_account_names:
        - service_account_names
        - service_account_names
      properties:
        service_account_names:
          description: The username/logon name for the service accounts to check in.
          items:
            type: string
          type: array
      type: object
    AdLibraryRequest:
      example:
        max_ttl: 0
        service_account_names:
        - service_account_names
        - service_account_names
        disable_check_in_enforcement: false
        ttl: 6
      properties:
        disable_check_in_enforcement:
          default: false
          description: Disable the default behavior of requiring that check-ins are
            performed by the entity that checked them out.
          type: boolean
        max_ttl:
          default: 86400
          description: In seconds, the max amount of time a check-out's renewals should
            last. Defaults to 24 hours.
          format: seconds
          type: integer
        service_account_names:
          description: The username/logon name for the service accounts with which
            this set will be associated.
          items:
            type: string
          type: array
        ttl:
          default: 86400
          description: In seconds, the amount of time a check-out should last. Defaults
            to 24 hours.
          format: seconds
          type: integer
      type: object
    AdRolesRequest:
      example:
        service_account_name: service_account_name
        ttl: 0
      properties:
        service_account_name:
          description: The username/logon name for the service account with which
            this role will be associated.
          type: string
        ttl:
          description: In seconds, the default password time-to-live.
          format: seconds
          type: integer
      type: object
    AlicloudConfigRequest:
      example:
        secret_key: secret_key
        access_key: access_key
      properties:
        access_key:
          description: Access key with appropriate permissions.
          type: string
        secret_key:
          description: Secret key with appropriate permissions.
          type: string
      type: object
    AlicloudLoginRequest:
      example:
        identity_request_url: identity_request_url
        role: role
        identity_request_headers: identity_request_headers
      properties:
        identity_request_headers:
          description: The request headers. This must include the headers over which
            AliCloud has included a signature.
          type: string
        identity_request_url:
          description: Base64-encoded full URL against which to make the AliCloud
            request.
          type: string
        role:
          description: Name of the role against which the login is being attempted.
            If 'role' is not specified, then the login endpoint looks for a role name
            in the ARN returned by the GetCallerIdentity request. If a matching role
            is not found, login fails.
          type: string
      type: object
    AlicloudRoleRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        period: 6
        token_num_uses: 5
        max_ttl: 0
        token_explicit_max_ttl: 1
        policies:
        - policies
        - policies
        token_period: 2
        token_max_ttl: 5
        token_type: default-service
        ttl: 9
        token_no_default_policy: true
        token_ttl: 7
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        arn: arn
      properties:
        arn:
          description: ARN of the RAM to bind to this role.
          type: string
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    ApproleLoginRequest:
      example:
        secret_id: secret_id
        role_id: role_id
      properties:
        role_id:
          description: Unique identifier of the Role. Required to be supplied when
            the 'bind_secret_id' constraint is set.
          type: string
        secret_id:
          default: ""
          description: SecretID belong to the App role
          type: string
      type: object
    ApproleRoleBindSecretIdRequest:
      example:
        bind_secret_id: true
      properties:
        bind_secret_id:
          default: true
          description: Impose secret_id to be presented when logging in using this
            role.
          type: boolean
      type: object
    ApproleRoleBoundCidrListRequest:
      example:
        bound_cidr_list:
        - bound_cidr_list
        - bound_cidr_list
      properties:
        bound_cidr_list:
          description: 'Deprecated: Please use "secret_id_bound_cidrs" instead. Comma
            separated string or list of CIDR blocks. If set, specifies the blocks
            of IP addresses which can perform the login operation.'
          items:
            type: string
          type: array
      type: object
    ApproleRoleCustomSecretIdRequest:
      example:
        secret_id: secret_id
        metadata: metadata
        num_uses: 0
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        ttl: 6
        cidr_list:
        - cidr_list
        - cidr_list
      properties:
        cidr_list:
          description: Comma separated string or list of CIDR blocks enforcing secret
            IDs to be used from specific set of IP addresses. If 'bound_cidr_list'
            is set on the role, then the list of CIDR blocks listed here should be
            a subset of the CIDR blocks listed on the role.
          items:
            type: string
          type: array
        metadata:
          description: Metadata to be tied to the SecretID. This should be a JSON
            formatted string containing metadata in key value pairs.
          type: string
        num_uses:
          description: Number of times this SecretID can be used, after which the
            SecretID expires. Overrides secret_id_num_uses role option when supplied.
            May not be higher than role's secret_id_num_uses.
          type: integer
        secret_id:
          description: SecretID to be attached to the role.
          type: string
        token_bound_cidrs:
          description: Comma separated string or list of CIDR blocks. If set, specifies
            the blocks of IP addresses which can use the returned token. Should be
            a subset of the token CIDR blocks listed on the role, if any.
          items:
            type: string
          type: array
        ttl:
          description: Duration in seconds after which this SecretID expires. Overrides
            secret_id_ttl role option when supplied. May not be longer than role's
            secret_id_ttl.
          format: seconds
          type: integer
      type: object
    ApproleRolePeriodRequest:
      example:
        period: 0
        token_period: 6
      properties:
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
      type: object
    ApproleRolePoliciesRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        policies:
        - policies
        - policies
      properties:
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
      type: object
    ApproleRoleRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        period: 0
        token_num_uses: 2
        bound_cidr_list:
        - bound_cidr_list
        - bound_cidr_list
        token_explicit_max_ttl: 5
        policies:
        - policies
        - policies
        token_period: 7
        token_max_ttl: 5
        secret_id_bound_cidrs:
        - secret_id_bound_cidrs
        - secret_id_bound_cidrs
        token_type: default-service
        token_no_default_policy: true
        token_ttl: 9
        bind_secret_id: true
        local_secret_ids: true
        role_id: role_id
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        secret_id_num_uses: 6
        secret_id_ttl: 1
      properties:
        bind_secret_id:
          default: true
          description: Impose secret_id to be presented when logging in using this
            role. Defaults to 'true'.
          type: boolean
        bound_cidr_list:
          deprecated: true
          description: Use "secret_id_bound_cidrs" instead.
          items:
            type: string
          type: array
        local_secret_ids:
          description: If set, the secret IDs generated using this role will be cluster
            local. This can only be set during role creation and once set, it can't
            be reset later.
          type: boolean
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        role_id:
          description: Identifier of the role. Defaults to a UUID.
          type: string
        secret_id_bound_cidrs:
          description: Comma separated string or list of CIDR blocks. If set, specifies
            the blocks of IP addresses which can perform the login operation.
          items:
            type: string
          type: array
        secret_id_num_uses:
          description: Number of times a SecretID can access the role, after which
            the SecretID will expire. Defaults to 0 meaning that the the secret_id
            is of unlimited use.
          type: integer
        secret_id_ttl:
          description: Duration in seconds after which the issued SecretID should
            expire. Defaults to 0, meaning no expiration.
          format: seconds
          type: integer
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
      type: object
    ApproleRoleRoleIdRequest:
      example:
        role_id: role_id
      properties:
        role_id:
          description: Identifier of the role. Defaults to a UUID.
          type: string
      type: object
    ApproleRoleSecretIdAccessorDestroyRequest:
      example:
        secret_id_accessor: secret_id_accessor
      properties:
        secret_id_accessor:
          description: Accessor of the SecretID
          type: string
      type: object
    ApproleRoleSecretIdAccessorLookupRequest:
      example:
        secret_id_accessor: secret_id_accessor
      properties:
        secret_id_accessor:
          description: Accessor of the SecretID
          type: string
      type: object
    ApproleRoleSecretIdBoundCidrsRequest:
      example:
        secret_id_bound_cidrs:
        - secret_id_bound_cidrs
        - secret_id_bound_cidrs
      properties:
        secret_id_bound_cidrs:
          description: Comma separated string or list of CIDR blocks. If set, specifies
            the blocks of IP addresses which can perform the login operation.
          items:
            type: string
          type: array
      type: object
    ApproleRoleSecretIdDestroyRequest:
      example:
        secret_id: secret_id
      properties:
        secret_id:
          description: SecretID attached to the role.
          type: string
      type: object
    ApproleRoleSecretIdLookupRequest:
      example:
        secret_id: secret_id
      properties:
        secret_id:
          description: SecretID attached to the role.
          type: string
      type: object
    ApproleRoleSecretIdNumUsesRequest:
      example:
        secret_id_num_uses: 0
      properties:
        secret_id_num_uses:
          description: Number of times a SecretID can access the role, after which
            the SecretID will expire.
          type: integer
      type: object
    ApproleRoleSecretIdRequest:
      example:
        metadata: metadata
        num_uses: 0
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        ttl: 6
        cidr_list:
        - cidr_list
        - cidr_list
      properties:
        cidr_list:
          description: Comma separated string or list of CIDR blocks enforcing secret
            IDs to be used from specific set of IP addresses. If 'bound_cidr_list'
            is set on the role, then the list of CIDR blocks listed here should be
            a subset of the CIDR blocks listed on the role.
          items:
            type: string
          type: array
        metadata:
          description: Metadata to be tied to the SecretID. This should be a JSON
            formatted string containing the metadata in key value pairs.
          type: string
        num_uses:
          description: Number of times this SecretID can be used, after which the
            SecretID expires. Overrides secret_id_num_uses role option when supplied.
            May not be higher than role's secret_id_num_uses.
          type: integer
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
        ttl:
          description: Duration in seconds after which this SecretID expires. Overrides
            secret_id_ttl role option when supplied. May not be longer than role's
            secret_id_ttl.
          format: seconds
          type: integer
      type: object
    ApproleRoleSecretIdTtlRequest:
      example:
        secret_id_ttl: 0
      properties:
        secret_id_ttl:
          description: Duration in seconds after which the issued SecretID should
            expire. Defaults to 0, meaning no expiration.
          format: seconds
          type: integer
      type: object
    ApproleRoleTokenBoundCidrsRequest:
      example:
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
      properties:
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
      type: object
    ApproleRoleTokenMaxTtlRequest:
      example:
        token_max_ttl: 0
      properties:
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
      type: object
    ApproleRoleTokenNumUsesRequest:
      example:
        token_num_uses: 0
      properties:
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
      type: object
    ApproleRoleTokenTtlRequest:
      example:
        token_ttl: 0
      properties:
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
      type: object
    AwsConfigCertificateRequest:
      example:
        aws_public_cert: aws_public_cert
        type: pkcs7
      properties:
        aws_public_cert:
          description: Base64 encoded AWS Public cert required to verify PKCS7 signature
            of the EC2 instance metadata.
          type: string
        type:
          default: pkcs7
          description: Takes the value of either "pkcs7" or "identity", indicating
            the type of document which can be verified using the given certificate.
            The reason is that the PKCS#7 document will have a DSA digest and the
            identity signature will have an RSA signature, and accordingly the public
            certificates to verify those also vary. Defaults to "pkcs7".
          type: string
      type: object
    AwsConfigClientRequest:
      example:
        secret_key: secret_key
        endpoint: endpoint
        max_retries: 0
        access_key: access_key
        iam_endpoint: iam_endpoint
        iam_server_id_header_value: iam_server_id_header_value
        sts_endpoint: sts_endpoint
        allowed_sts_header_values:
        - allowed_sts_header_values
        - allowed_sts_header_values
        sts_region: sts_region
      properties:
        access_key:
          default: ""
          description: AWS Access Key ID for the account used to make AWS API requests.
          type: string
        allowed_sts_header_values:
          description: List of additional headers that are allowed to be in AWS STS
            request headers
          items:
            type: string
          type: array
        endpoint:
          default: ""
          description: URL to override the default generated endpoint for making AWS
            EC2 API calls.
          type: string
        iam_endpoint:
          default: ""
          description: URL to override the default generated endpoint for making AWS
            IAM API calls.
          type: string
        iam_server_id_header_value:
          default: ""
          description: Value to require in the X-Vault-AWS-IAM-Server-ID request header
          type: string
        max_retries:
          default: -1
          description: Maximum number of retries for recoverable exceptions of AWS
            APIs
          type: integer
        secret_key:
          default: ""
          description: AWS Secret Access Key for the account used to make AWS API
            requests.
          type: string
        sts_endpoint:
          default: ""
          description: URL to override the default generated endpoint for making AWS
            STS API calls.
          type: string
        sts_region:
          default: ""
          description: The region ID for the sts_endpoint, if set.
          type: string
      type: object
    AwsConfigIdentityRequest:
      example:
        ec2_alias: instance_id
        iam_metadata:
        - iam_metadata
        - iam_metadata
        iam_alias: unique_id
        ec2_metadata:
        - ec2_metadata
        - ec2_metadata
      properties:
        ec2_alias:
          default: instance_id
          description: Configure how the AWS auth method generates entity alias when
            using EC2 auth. Valid values are "role_id", "instance_id", and "image_id".
            Defaults to "role_id".
          type: string
        ec2_metadata:
          default:
          - default
          description: 'The metadata to include on the aliases and audit logs generated
            by this plugin. When set to ''default'', includes: account_id, auth_type.
            These fields are available to add: ami_id, instance_id, region. Not editing
            this field means the ''default'' fields are included. Explicitly setting
            this field to empty overrides the ''default'' and means no metadata will
            be included. If not using ''default'', explicit fields must be sent like:
            ''field1,field2''.'
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: ec2_metadata
            value: field1,field2
        iam_alias:
          default: unique_id
          description: Configure how the AWS auth method generates entity aliases
            when using IAM auth. Valid values are "role_id", "unique_id", and "full_arn".
            Defaults to "role_id".
          type: string
        iam_metadata:
          default:
          - default
          description: 'The metadata to include on the aliases and audit logs generated
            by this plugin. When set to ''default'', includes: account_id, auth_type.
            These fields are available to add: canonical_arn, client_arn, client_user_id,
            inferred_aws_region, inferred_entity_id, inferred_entity_type. Not editing
            this field means the ''default'' fields are included. Explicitly setting
            this field to empty overrides the ''default'' and means no metadata will
            be included. If not using ''default'', explicit fields must be sent like:
            ''field1,field2''.'
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: iam_metadata
            value: field1,field2
      type: object
    AwsConfigLeaseRequest:
      example:
        lease_max: lease_max
        lease: lease
      properties:
        lease:
          description: Default lease for roles.
          type: string
        lease_max:
          description: Maximum time a credential is valid for.
          type: string
      type: object
    AwsConfigRootRequest:
      example:
        secret_key: secret_key
        max_retries: 0
        access_key: access_key
        username_template: username_template
        iam_endpoint: iam_endpoint
        sts_endpoint: sts_endpoint
        region: region
      properties:
        access_key:
          description: Access key with permission to create new keys.
          type: string
        iam_endpoint:
          description: Endpoint to custom IAM server URL
          type: string
        max_retries:
          default: -1
          description: Maximum number of retries for recoverable exceptions of AWS
            APIs
          type: integer
        region:
          description: Region for API calls.
          type: string
        secret_key:
          description: Secret key with permission to create new keys.
          type: string
        sts_endpoint:
          description: Endpoint to custom STS server URL
          type: string
        username_template:
          description: Template to generate custom IAM usernames
          type: string
      type: object
    AwsConfigStsRequest:
      example:
        sts_role: sts_role
      properties:
        sts_role:
          description: AWS ARN for STS role to be assumed when interacting with the
            account specified. The Vault server must have permissions to assume this
            role.
          type: string
      type: object
    AwsConfigTidyIdentityAccesslistRequest:
      example:
        disable_periodic_tidy: false
        safety_buffer: 0
      properties:
        disable_periodic_tidy:
          default: false
          description: If set to 'true', disables the periodic tidying of the 'identity-accesslist/<instance_id>'
            entries.
          type: boolean
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond the identity's
            expiration, before it is removed from the backend storage.
          format: seconds
          type: integer
      type: object
    AwsConfigTidyIdentityWhitelistRequest:
      example:
        disable_periodic_tidy: false
        safety_buffer: 0
      properties:
        disable_periodic_tidy:
          default: false
          description: If set to 'true', disables the periodic tidying of the 'identity-accesslist/<instance_id>'
            entries.
          type: boolean
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond the identity's
            expiration, before it is removed from the backend storage.
          format: seconds
          type: integer
      type: object
    AwsConfigTidyRoletagBlacklistRequest:
      example:
        disable_periodic_tidy: false
        safety_buffer: 0
      properties:
        disable_periodic_tidy:
          default: false
          description: If set to 'true', disables the periodic tidying of deny listed
            entries.
          type: boolean
        safety_buffer:
          default: 15552000
          description: The amount of extra time that must have passed beyond the roletag
            expiration, before it is removed from the backend storage. Defaults to
            4320h (180 days).
          format: seconds
          type: integer
      type: object
    AwsConfigTidyRoletagDenylistRequest:
      example:
        disable_periodic_tidy: false
        safety_buffer: 0
      properties:
        disable_periodic_tidy:
          default: false
          description: If set to 'true', disables the periodic tidying of deny listed
            entries.
          type: boolean
        safety_buffer:
          default: 15552000
          description: The amount of extra time that must have passed beyond the roletag
            expiration, before it is removed from the backend storage. Defaults to
            4320h (180 days).
          format: seconds
          type: integer
      type: object
    AwsCredsRequest:
      example:
        role_arn: role_arn
        role_session_name: role_session_name
        name: name
        ttl: 0
      properties:
        name:
          description: Name of the role
          type: string
        role_arn:
          description: ARN of role to assume when credential_type is assumed_role
          type: string
        role_session_name:
          description: 'Session name to use when assuming role. Max chars: 64'
          type: string
        ttl:
          default: 3600
          description: Lifetime of the returned credentials in seconds
          format: seconds
          type: integer
      type: object
    AwsLoginRequest:
      example:
        pkcs7: pkcs7
        role: role
        iam_request_url: iam_request_url
        signature: signature
        identity: identity
        iam_request_body: iam_request_body
        iam_request_headers: iam_request_headers
        iam_http_request_method: iam_http_request_method
        nonce: nonce
      properties:
        iam_http_request_method:
          description: HTTP method to use for the AWS request when auth_type is iam.
            This must match what has been signed in the presigned request. Currently,
            POST is the only supported value
          type: string
        iam_request_body:
          description: Base64-encoded request body when auth_type is iam. This must
            match the request body included in the signature.
          type: string
        iam_request_headers:
          description: Key/value pairs of headers for use in the sts:GetCallerIdentity
            HTTP requests headers when auth_type is iam. Can be either a Base64-encoded,
            JSON-serialized string, or a JSON object of key/value pairs. This must
            at a minimum include the headers over which AWS has included a signature.
          type: string
        iam_request_url:
          description: Base64-encoded full URL against which to make the AWS request
            when using iam auth_type.
          type: string
        identity:
          description: Base64 encoded EC2 instance identity document. This needs to
            be supplied along with the 'signature' parameter. If using 'curl' for
            fetching the identity document, consider using the option '-w 0' while
            piping the output to 'base64' binary.
          type: string
        nonce:
          description: The nonce to be used for subsequent login requests when auth_type
            is ec2. If this parameter is not specified at all and if reauthentication
            is allowed, then the backend will generate a random nonce, attaches it
            to the instance's identity access list entry and returns the nonce back
            as part of auth metadata. This value should be used with further login
            requests, to establish client authenticity. Clients can choose to set
            a custom nonce if preferred, in which case, it is recommended that clients
            provide a strong nonce. If a nonce is provided but with an empty value,
            it indicates intent to disable reauthentication. Note that, when 'disallow_reauthentication'
            option is enabled on either the role or the role tag, the 'nonce' holds
            no significance.
          type: string
        pkcs7:
          description: PKCS7 signature of the identity document when using an auth_type
            of ec2.
          type: string
        role:
          description: Name of the role against which the login is being attempted.
            If 'role' is not specified, then the login endpoint looks for a role bearing
            the name of the AMI ID of the EC2 instance that is trying to login. If
            a matching role is not found, login fails.
          type: string
        signature:
          description: Base64 encoded SHA256 RSA signature of the instance identity
            document. This needs to be supplied along with 'identity' parameter.
          type: string
      type: object
    AwsRoleRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        bound_ami_id:
        - bound_ami_id
        - bound_ami_id
        resolve_aws_unique_ids: true
        token_num_uses: 5
        max_ttl: 0
        bound_region:
        - bound_region
        - bound_region
        disallow_reauthentication: false
        token_explicit_max_ttl: 1
        bound_subnet_id:
        - bound_subnet_id
        - bound_subnet_id
        policies:
        - policies
        - policies
        token_max_ttl: 5
        bound_account_id:
        - bound_account_id
        - bound_account_id
        bound_ec2_instance_id:
        - bound_ec2_instance_id
        - bound_ec2_instance_id
        token_type: default-service
        inferred_aws_region: inferred_aws_region
        token_ttl: 7
        bound_iam_instance_profile_arn:
        - bound_iam_instance_profile_arn
        - bound_iam_instance_profile_arn
        bound_iam_role_arn:
        - bound_iam_role_arn
        - bound_iam_role_arn
        auth_type: auth_type
        period: 6
        bound_iam_principal_arn:
        - bound_iam_principal_arn
        - bound_iam_principal_arn
        token_period: 2
        allow_instance_migration: false
        ttl: 9
        bound_vpc_id:
        - bound_vpc_id
        - bound_vpc_id
        role_tag: role_tag
        token_no_default_policy: true
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        inferred_entity_type: inferred_entity_type
      properties:
        allow_instance_migration:
          default: false
          description: If set, allows migration of the underlying instance where the
            client resides. This keys off of pendingTime in the metadata document,
            so essentially, this disables the client nonce check whenever the instance
            is migrated to a new host and pendingTime is newer than the previously-remembered
            time. Use with caution. This is only checked when auth_type is ec2.
          type: boolean
        auth_type:
          description: The auth_type permitted to authenticate to this role. Must
            be one of iam or ec2 and cannot be changed after role creation.
          type: string
        bound_account_id:
          description: If set, defines a constraint on the EC2 instances that the
            account ID in its identity document to match one of the IDs specified
            by this parameter. This is only applicable when auth_type is ec2 or inferred_entity_type
            is ec2_instance.
          items:
            type: string
          type: array
        bound_ami_id:
          description: If set, defines a constraint on the EC2 instances that they
            should be using one of the AMI IDs specified by this parameter. This is
            only applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.
          items:
            type: string
          type: array
        bound_ec2_instance_id:
          description: If set, defines a constraint on the EC2 instances to have one
            of the given instance IDs. Can be a list or comma-separated string of
            EC2 instance IDs. This is only applicable when auth_type is ec2 or inferred_entity_type
            is ec2_instance.
          items:
            type: string
          type: array
        bound_iam_instance_profile_arn:
          description: If set, defines a constraint on the EC2 instances to be associated
            with an IAM instance profile ARN which has a prefix that matches one of
            the values specified by this parameter. The value is prefix-matched (as
            though it were a glob ending in '*'). This is only applicable when auth_type
            is ec2 or inferred_entity_type is ec2_instance.
          items:
            type: string
          type: array
        bound_iam_principal_arn:
          description: ARN of the IAM principals to bind to this role. Only applicable
            when auth_type is iam.
          items:
            type: string
          type: array
        bound_iam_role_arn:
          description: If set, defines a constraint on the authenticating EC2 instance
            that it must match one of the IAM role ARNs specified by this parameter.
            The value is prefix-matched (as though it were a glob ending in '*').
            The configured IAM user or EC2 instance role must be allowed to execute
            the 'iam:GetInstanceProfile' action if this is specified. This is only
            applicable when auth_type is ec2 or inferred_entity_type is ec2_instance.
          items:
            type: string
          type: array
        bound_region:
          description: If set, defines a constraint on the EC2 instances that the
            region in its identity document match one of the regions specified by
            this parameter. This is only applicable when auth_type is ec2.
          items:
            type: string
          type: array
        bound_subnet_id:
          description: If set, defines a constraint on the EC2 instance to be associated
            with the subnet ID that matches one of the values specified by this parameter.
            This is only applicable when auth_type is ec2 or inferred_entity_type
            is ec2_instance.
          items:
            type: string
          type: array
        bound_vpc_id:
          description: If set, defines a constraint on the EC2 instance to be associated
            with a VPC ID that matches one of the value specified by this parameter.
            This is only applicable when auth_type is ec2 or inferred_entity_type
            is ec2_instance.
          items:
            type: string
          type: array
        disallow_reauthentication:
          default: false
          description: If set, only allows a single token to be granted per instance
            ID. In order to perform a fresh login, the entry in the access list for
            the instance ID needs to be cleared using 'auth/aws-ec2/identity-accesslist/<instance_id>'
            endpoint. This is only applicable when auth_type is ec2.
          type: boolean
        inferred_aws_region:
          description: When auth_type is iam and inferred_entity_type is set, the
            region to assume the inferred entity exists in.
          type: string
        inferred_entity_type:
          description: 'When auth_type is iam, the AWS entity type to infer from the
            authenticated principal. The only supported value is ec2_instance, which
            will extract the EC2 instance ID from the authenticated role and apply
            the following restrictions specific to EC2 instances: bound_ami_id, bound_account_id,
            bound_iam_role_arn, bound_iam_instance_profile_arn, bound_vpc_id, bound_subnet_id.
            The configured EC2 client must be able to find the inferred instance ID
            in the results, and the instance must be running. If unable to determine
            the EC2 instance ID or unable to find the EC2 instance ID among running
            instances, then authentication will fail.'
          type: string
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        resolve_aws_unique_ids:
          default: true
          description: If set, resolve all AWS IAM ARNs into AWS's internal unique
            IDs. When an IAM entity (e.g., user, role, or instance profile) is deleted,
            then all references to it within the role will be invalidated, which prevents
            a new IAM entity from being created with the same name and matching the
            role's IAM binds. Once set, this cannot be unset.
          type: boolean
        role_tag:
          default: ""
          description: If set, enables the role tags for this role. The value set
            for this field should be the 'key' of the tag on the EC2 instance. The
            'value' of the tag should be generated using 'role/<role>/tag' endpoint.
            Defaults to an empty string, meaning that role tags are disabled. This
            is only allowed if auth_type is ec2.
          type: string
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    AwsRoleTagRequest:
      example:
        instance_id: instance_id
        max_ttl: 0
        disallow_reauthentication: false
        policies:
        - policies
        - policies
        allow_instance_migration: false
      properties:
        allow_instance_migration:
          default: false
          description: If set, allows migration of the underlying instance where the
            client resides. This keys off of pendingTime in the metadata document,
            so essentially, this disables the client nonce check whenever the instance
            is migrated to a new host and pendingTime is newer than the previously-remembered
            time. Use with caution.
          type: boolean
        disallow_reauthentication:
          default: false
          description: If set, only allows a single token to be granted per instance
            ID. In order to perform a fresh login, the entry in access list for the
            instance ID needs to be cleared using the 'auth/aws-ec2/identity-accesslist/<instance_id>'
            endpoint.
          type: boolean
        instance_id:
          description: Instance ID for which this tag is intended for. If set, the
            created tag can only be used by the instance with the given ID.
          type: string
        max_ttl:
          default: 0
          description: If set, specifies the maximum allowed token lifetime.
          format: seconds
          type: integer
        policies:
          description: Policies to be associated with the tag. If set, must be a subset
            of the role's policies. If set, but set to an empty value, only the 'default'
            policy will be given to issued tokens.
          items:
            type: string
          type: array
      type: object
    AwsRolesRequest:
      example:
        credential_type: credential_type
        role_arns:
        - role_arns
        - role_arns
        max_sts_ttl: 6
        user_path: /
        iam_groups:
        - iam_groups
        - iam_groups
        iam_tags: '{}'
        permissions_boundary_arn: permissions_boundary_arn
        arn: arn
        default_sts_ttl: 0
        policy_document: policy_document
        policy: policy
        policy_arns:
        - policy_arns
        - policy_arns
      properties:
        arn:
          deprecated: true
          description: Use role_arns or policy_arns instead.
          type: string
        credential_type:
          description: Type of credential to retrieve. Must be one of assumed_role,
            iam_user, or federation_token
          type: string
        default_sts_ttl:
          description: Default TTL for assumed_role and federation_token credential
            types when no TTL is explicitly requested with the credentials
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Default STS TTL
        iam_groups:
          description: Names of IAM groups that generated IAM users will be added
            to. For a credential type of assumed_role or federation_token, the policies
            sent to the corresponding AWS call (sts:AssumeRole or sts:GetFederation)
            will be the policies from each group in iam_groups combined with the policy_document
            and policy_arns parameters.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IAM Groups
            value: group1,group2
        iam_tags:
          description: IAM tags to be set for any users created by this role. These
            must be presented as Key-Value pairs. This can be represented as a map
            or a list of equal sign delimited key pairs.
          format: kvpairs
          type: object
          x-vault-displayAttrs:
            name: IAM Tags
            value: '[key1=value1, key2=value2]'
        max_sts_ttl:
          description: Max allowed TTL for assumed_role and federation_token credential
            types
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Max STS TTL
        permissions_boundary_arn:
          description: ARN of an IAM policy to attach as a permissions boundary on
            IAM user credentials; only valid when credential_type isiam_user
          type: string
          x-vault-displayAttrs:
            name: Permissions Boundary ARN
        policy:
          deprecated: true
          description: Use policy_document instead.
          type: string
        policy_arns:
          description: ARNs of AWS policies. Behavior varies by credential_type. When
            credential_type is iam_user, then it will attach the specified policies
            to the generated IAM user. When credential_type is assumed_role or federation_token,
            the policies will be passed as the PolicyArns parameter, acting as a filter
            on permissions available.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Policy ARNs
        policy_document:
          description: JSON-encoded IAM policy document. Behavior varies by credential_type.
            When credential_type is iam_user, then it will attach the contents of
            the policy_document to the IAM user generated. When credential_type is
            assumed_role or federation_token, this will be passed in as the Policy
            parameter to the AssumeRole or GetFederationToken API call, acting as
            a filter on permissions available.
          type: string
        role_arns:
          description: ARNs of AWS roles allowed to be assumed. Only valid when credential_type
            is assumed_role
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Role ARNs
        user_path:
          default: /
          description: Path for IAM User. Only valid when credential_type is iam_user
          type: string
          x-vault-displayAttrs:
            name: User Path
            value: /
      type: object
    AwsStsRequest:
      example:
        role_arn: role_arn
        role_session_name: role_session_name
        ttl: 0
      properties:
        role_arn:
          description: ARN of role to assume when credential_type is assumed_role
          type: string
        role_session_name:
          description: 'Session name to use when assuming role. Max chars: 64'
          type: string
        ttl:
          default: 3600
          description: Lifetime of the returned credentials in seconds
          format: seconds
          type: integer
      type: object
    AwsTidyIdentityAccesslistRequest:
      example:
        safety_buffer: 0
      properties:
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond the identity's
            expiration, before it is removed from the backend storage.
          format: seconds
          type: integer
      type: object
    AwsTidyIdentityWhitelistRequest:
      example:
        safety_buffer: 0
      properties:
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond the identity's
            expiration, before it is removed from the backend storage.
          format: seconds
          type: integer
      type: object
    AwsTidyRoletagBlacklistRequest:
      example:
        safety_buffer: 0
      properties:
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond the roletag
            expiration, before it is removed from the backend storage.
          format: seconds
          type: integer
      type: object
    AwsTidyRoletagDenylistRequest:
      example:
        safety_buffer: 0
      properties:
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond the roletag
            expiration, before it is removed from the backend storage.
          format: seconds
          type: integer
      type: object
    AzureConfigRequest:
      example:
        tenant_id: tenant_id
        environment: environment
        resource: resource
        client_secret: client_secret
        client_id: client_id
      properties:
        client_id:
          description: The OAuth2 client id to connection to Azure. This value can
            also be provided with the AZURE_CLIENT_ID environment variable.
          type: string
          x-vault-displayAttrs:
            name: Client ID
        client_secret:
          description: The OAuth2 client secret to connection to Azure. This value
            can also be provided with the AZURE_CLIENT_SECRET environment variable.
          type: string
        environment:
          description: The Azure environment name. If not provided, AzurePublicCloud
            is used. This value can also be provided with the AZURE_ENVIRONMENT environment
            variable.
          type: string
        resource:
          description: The resource URL for the vault application in Azure Active
            Directory. This value can also be provided with the AZURE_AD_RESOURCE
            environment variable.
          type: string
        tenant_id:
          description: The tenant id for the Azure Active Directory. This is sometimes
            referred to as Directory ID in AD. This value can also be provided with
            the AZURE_TENANT_ID environment variable.
          type: string
          x-vault-displayAttrs:
            name: Tenant ID
      type: object
    AzureLoginRequest:
      example:
        subscription_id: subscription_id
        vmss_name: vmss_name
        role: role
        jwt: jwt
        resource_group_name: resource_group_name
        vm_name: vm_name
      properties:
        jwt:
          description: A signed JWT
          type: string
        resource_group_name:
          description: The resource group from the instance.
          type: string
        role:
          description: The token role.
          type: string
        subscription_id:
          description: The subscription id for the instance.
          type: string
        vm_name:
          description: The name of the virtual machine. This value is ignored if vmss_name
            is specified.
          type: string
        vmss_name:
          description: The name of the virtual machine scale set the instance is in.
          type: string
      type: object
    AzureRoleRequest:
      example:
        bound_group_ids:
        - bound_group_ids
        - bound_group_ids
        token_policies:
        - token_policies
        - token_policies
        bound_service_principal_ids:
        - bound_service_principal_ids
        - bound_service_principal_ids
        period: 1
        token_num_uses: 2
        max_ttl: 0
        bound_locations:
        - bound_locations
        - bound_locations
        token_explicit_max_ttl: 5
        policies:
        - policies
        - policies
        token_period: 7
        num_uses: 6
        token_max_ttl: 5
        bound_subscription_ids:
        - bound_subscription_ids
        - bound_subscription_ids
        token_type: default-service
        ttl: 3
        token_no_default_policy: true
        token_ttl: 9
        bound_resource_groups:
        - bound_resource_groups
        - bound_resource_groups
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        bound_scale_sets:
        - bound_scale_sets
        - bound_scale_sets
      properties:
        bound_group_ids:
          description: Comma-separated list of group ids that login is restricted
            to.
          items:
            type: string
          type: array
        bound_locations:
          description: Comma-separated list of locations that login is restricted
            to.
          items:
            type: string
          type: array
        bound_resource_groups:
          description: Comma-separated list of resource groups that login is restricted
            to.
          items:
            type: string
          type: array
        bound_scale_sets:
          description: Comma-separated list of scale sets that login is restricted
            to.
          items:
            type: string
          type: array
        bound_service_principal_ids:
          description: Comma-separated list of service principal ids that login is
            restricted to.
          items:
            type: string
          type: array
        bound_subscription_ids:
          description: Comma-separated list of subscription ids that login is restricted
            to.
          items:
            type: string
          type: array
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        num_uses:
          deprecated: true
          description: Use "token_num_uses" instead. If this and "token_num_uses"
            are both specified, only "token_num_uses" will be used.
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    AzureRolesRequest:
      example:
        max_ttl: 0
        permanently_delete: false
        application_object_id: application_object_id
        azure_roles: azure_roles
        ttl: 6
        azure_groups: azure_groups
      properties:
        application_object_id:
          description: Application Object ID to use for static service principal credentials.
          type: string
        azure_groups:
          description: JSON list of Azure groups to add the service principal to.
          type: string
        azure_roles:
          description: JSON list of Azure roles to assign.
          type: string
        max_ttl:
          description: Maximum time a service principal. If not set or set to 0, will
            use system default.
          format: seconds
          type: integer
        permanently_delete:
          default: false
          description: Indicates whether new application objects should be permanently
            deleted. If not set, objects will not be permanently deleted.
          type: boolean
        ttl:
          description: Default lease for generated credentials. If not set or set
            to 0, will use system default.
          format: seconds
          type: integer
      type: object
    CentrifyConfigRequest:
      example:
        token_no_default_policy: true
        token_policies:
        - token_policies
        - token_policies
        service_url: service_url
        token_num_uses: 0
        token_ttl: 6
        scope: vault_io_integration
        policies:
        - policies
        - policies
        client_secret: client_secret
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        token_type: default-service
        app_id: vault_io_integration
        client_id: client_id
      properties:
        app_id:
          default: vault_io_integration
          description: OAuth2 App ID
          type: string
        client_id:
          description: OAuth2 Client ID
          type: string
        client_secret:
          description: OAuth2 Client Secret
          type: string
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        scope:
          default: vault_io_integration
          description: OAuth2 App Scope
          type: string
        service_url:
          description: Service URL (https://<tenant>.my.centrify.com)
          type: string
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
      type: object
    CentrifyLoginRequest:
      example:
        mode: ro
        password: password
        username: username
      properties:
        mode:
          default: ro
          description: Auth mode ('ro' for resource owner, 'cc' for credential client).
          type: string
        password:
          description: Password for this user.
          type: string
        username:
          description: Username of the user.
          type: string
      type: object
    CertCertsRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 2
        max_ttl: 6
        required_extensions:
        - required_extensions
        - required_extensions
        token_explicit_max_ttl: 5
        certificate: certificate
        policies:
        - policies
        - policies
        token_max_ttl: 5
        allowed_dns_sans:
        - allowed_dns_sans
        - allowed_dns_sans
        token_type: default-service
        allowed_email_sans:
        - allowed_email_sans
        - allowed_email_sans
        allowed_metadata_extensions:
        - allowed_metadata_extensions
        - allowed_metadata_extensions
        token_ttl: 9
        allowed_uri_sans:
        - allowed_uri_sans
        - allowed_uri_sans
        allowed_common_names:
        - allowed_common_names
        - allowed_common_names
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        period: 1
        token_period: 7
        allowed_names:
        - allowed_names
        - allowed_names
        allowed_organizational_units:
        - allowed_organizational_units
        - allowed_organizational_units
        display_name: display_name
        ttl: 3
        token_no_default_policy: true
        lease: 0
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
      properties:
        allowed_common_names:
          description: A comma-separated list of names. At least one must exist in
            the Common Name. Supports globbing.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            group: Constraints
        allowed_dns_sans:
          description: A comma-separated list of DNS names. At least one must exist
            in the SANs. Supports globbing.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Allowed DNS SANs
            group: Constraints
        allowed_email_sans:
          description: A comma-separated list of Email Addresses. At least one must
            exist in the SANs. Supports globbing.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Allowed Email SANs
            group: Constraints
        allowed_metadata_extensions:
          description: A comma-separated string or array of oid extensions. Upon successfull
            authentication, these extensions will be added as metadata if they are
            present in the certificate. The metadata key will be the string consisting
            of the oid numbers separated by a dash (-) instead of a dot (.) to allow
            usage in ACL templates.
          items:
            type: string
          type: array
        allowed_names:
          description: A comma-separated list of names. At least one must exist in
            either the Common Name or SANs. Supports globbing. This parameter is deprecated,
            please use allowed_common_names, allowed_dns_sans, allowed_email_sans,
            allowed_uri_sans.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            group: Constraints
        allowed_organizational_units:
          description: A comma-separated list of Organizational Units names. At least
            one must exist in the OU field.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            group: Constraints
        allowed_uri_sans:
          description: A comma-separated list of URIs. At least one must exist in
            the SANs. Supports globbing.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Allowed URI SANs
            group: Constraints
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        certificate:
          description: The public certificate that should be trusted. Must be x509
            PEM encoded.
          type: string
          x-vault-displayAttrs:
            editType: file
        display_name:
          description: The display name to use for clients using this certificate.
          type: string
        lease:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          type: integer
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        required_extensions:
          description: A comma-separated string or array of extensions formatted as
            "oid:value". Expects the extension value to be some type of ASN1 encoded
            string. All values much match. Supports globbing on "value".
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    CertConfigRequest:
      example:
        disable_binding: false
        enable_identity_alias_metadata: false
      properties:
        disable_binding:
          default: false
          description: If set, during renewal, skips the matching of presented client
            identity with the client identity used during login. Defaults to false.
          type: boolean
        enable_identity_alias_metadata:
          default: false
          description: If set, metadata of the certificate including the metadata
            corresponding to allowed_metadata_extensions will be stored in the alias.
            Defaults to false.
          type: boolean
      type: object
    CertCrlsRequest:
      example:
        crl: crl
        url: url
      properties:
        crl:
          description: 'The public CRL that should be trusted to attest to certificates''
            validity statuses. May be DER or PEM encoded. Note: the expiration time
            is ignored; if the CRL is no longer valid, delete it using the same name
            as specified here.'
          type: string
        url:
          description: The URL of a CRL distribution point. Only one of 'crl' or 'url'
            parameters should be specified.
          type: string
      type: object
    CertLoginRequest:
      example:
        name: name
      properties:
        name:
          description: The name of the certificate role to authenticate against.
          type: string
      type: object
    CfConfigRequest:
      example:
        cf_api_mutual_tls_certificate: cf_api_mutual_tls_certificate
        cf_client_id: cf_client_id
        cf_api_addr: cf_api_addr
        cf_client_secret: cf_client_secret
        login_max_seconds_not_after: 0
        cf_api_trusted_certificates:
        - cf_api_trusted_certificates
        - cf_api_trusted_certificates
        login_max_seconds_not_before: 6
        pcf_api_trusted_certificates:
        - pcf_api_trusted_certificates
        - pcf_api_trusted_certificates
        cf_username: cf_username
        pcf_api_addr: pcf_api_addr
        cf_password: cf_password
        identity_ca_certificates:
        - identity_ca_certificates
        - identity_ca_certificates
        pcf_username: pcf_username
        pcf_password: pcf_password
        cf_api_mutual_tls_key: cf_api_mutual_tls_key
      properties:
        cf_api_addr:
          description: CF’s API address.
          type: string
          x-vault-displayAttrs:
            name: CF API Address
            value: https://api.10.244.0.34.xip.io
        cf_api_mutual_tls_certificate:
          description: The PEM-format certificates that are presented for mutual TLS
            with the CloudFoundry API. If not set, mutual TLS is not used
          type: string
          x-vault-displayAttrs:
            name: CF API Mutual TLS Certificate
            value: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        cf_api_mutual_tls_key:
          description: The PEM-format private key that are used for mutual TLS with
            the CloudFoundry API. If not set, mutual TLS is not used
          type: string
          x-vault-displayAttrs:
            name: CF API Mutual TLS Key
            value: '-----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY-----'
        cf_api_trusted_certificates:
          description: The PEM-format CA certificates that are acceptable for the
            CF API to present.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: CF API Trusted IdentityCACertificates
            value: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        cf_client_id:
          description: The client id for CF’s API.
          type: string
          x-vault-displayAttrs:
            name: CF API Client ID
            value: client
        cf_client_secret:
          description: The client secret for CF’s API.
          type: string
          x-vault-displayAttrs:
            name: CF API Client Secret
            sensitive: true
        cf_password:
          description: The password for CF’s API.
          type: string
          x-vault-displayAttrs:
            name: CF API Password
            sensitive: true
        cf_username:
          description: The username for CF’s API.
          type: string
          x-vault-displayAttrs:
            name: CF API Username
            value: admin
        identity_ca_certificates:
          description: The PEM-format CA certificates that are required to have issued
            the instance certificates presented for logging in.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Identity CA Certificates
            value: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        login_max_seconds_not_after:
          default: 60
          description: Duration in seconds for the maximum acceptable length in the
            future a "signing_time" can be. Useful for clock drift. Set low to reduce
            the opportunity for replay attacks.
          type: integer
          x-vault-displayAttrs:
            name: Login Max Seconds Ahead
            value: "60"
        login_max_seconds_not_before:
          default: 300
          description: Duration in seconds for the maximum acceptable age of a "signing_time".
            Useful for clock drift. Set low to reduce the opportunity for replay attacks.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Login Max Seconds Old
            value: "300"
        pcf_api_addr:
          deprecated: true
          description: Deprecated. Please use "cf_api_addr".
          type: string
          x-vault-displayAttrs:
            name: CF API Address
            value: https://api.10.244.0.34.xip.io
        pcf_api_trusted_certificates:
          deprecated: true
          description: Deprecated. Please use "cf_api_trusted_certificates".
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: CF API Trusted IdentityCACertificates
            value: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        pcf_password:
          deprecated: true
          description: Deprecated. Please use "cf_password".
          type: string
          x-vault-displayAttrs:
            name: CF API Password
            sensitive: true
        pcf_username:
          deprecated: true
          description: Deprecated. Please use "cf_username".
          type: string
          x-vault-displayAttrs:
            name: CF API Username
            value: admin
      type: object
    CfLoginRequest:
      example:
        role: role
        signature: signature
        cf_instance_cert: cf_instance_cert
        signing_time: signing_time
      properties:
        cf_instance_cert:
          description: The full body of the file available at the CF_INSTANCE_CERT
            path on the CF instance.
          type: string
          x-vault-displayAttrs:
            name: CF_INSTANCE_CERT Contents
        role:
          description: The name of the role to authenticate against.
          type: string
          x-vault-displayAttrs:
            name: Role Name
            value: internally-defined-role
        signature:
          description: The signature generated by the client certificate's private
            key.
          type: string
          x-vault-displayAttrs:
            name: Signature
        signing_time:
          description: The date and time used to construct the signature.
          type: string
          x-vault-displayAttrs:
            name: Signing Time
            value: 2006-01-02T15:04:05Z
      required:
      - cf_instance_cert
      - role
      - signature
      - signing_time
      type: object
    CfRolesRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        period: 6
        token_num_uses: 5
        max_ttl: 0
        token_explicit_max_ttl: 1
        policies:
        - policies
        - policies
        token_period: 2
        token_max_ttl: 5
        token_type: default-service
        ttl: 9
        bound_instance_ids:
        - bound_instance_ids
        - bound_instance_ids
        token_no_default_policy: true
        disable_ip_matching: false
        token_ttl: 7
        bound_organization_ids:
        - bound_organization_ids
        - bound_organization_ids
        bound_application_ids:
        - bound_application_ids
        - bound_application_ids
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        bound_space_ids:
        - bound_space_ids
        - bound_space_ids
      properties:
        bound_application_ids:
          description: Require that the client certificate presented has at least
            one of these app IDs.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Bound Application IDs
            value: 6b814521-5f08-4b1a-8c4e-fbe7c5f3a169
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        bound_instance_ids:
          description: Require that the client certificate presented has at least
            one of these instance IDs.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Bound Instance IDs
            value: 8a886b31-ccf7-480d-54d8-cc28
        bound_organization_ids:
          description: Require that the client certificate presented has at least
            one of these org IDs.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Bound Organization IDs
            value: 34a878d0-c2f9-4521-ba73-a9f664e82c7b
        bound_space_ids:
          description: Require that the client certificate presented has at least
            one of these space IDs.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Bound Space IDs
            value: 3d2eba6b-ef19-44d5-91dd-1975b0db5cc9
        disable_ip_matching:
          default: false
          description: If set to true, disables the default behavior that logging
            in must be performed from an acceptable IP address described by the certificate
            presented.
          type: boolean
          x-vault-displayAttrs:
            name: Disable IP Address Matching
            value: "false"
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    ConsulConfigAccessRequest:
      example:
        client_key: client_key
        address: address
        scheme: http
        client_cert: client_cert
        ca_cert: ca_cert
        token: token
      properties:
        address:
          description: Consul server address
          type: string
        ca_cert:
          description: CA certificate to use when verifying Consul server certificate,
            must be x509 PEM encoded.
          type: string
        client_cert:
          description: Client certificate used for Consul's TLS communication, must
            be x509 PEM encoded and if this is set you need to also set client_key.
          type: string
        client_key:
          description: Client key used for Consul's TLS communication, must be x509
            PEM encoded and if this is set you need to also set client_cert.
          type: string
        scheme:
          default: http
          description: URI scheme for the Consul address
          type: string
        token:
          description: Token for API calls
          type: string
      type: object
    ConsulRolesRequest:
      example:
        consul_namespace: consul_namespace
        max_ttl: 6
        policies:
        - policies
        - policies
        consul_roles:
        - consul_roles
        - consul_roles
        token_type: client
        service_identities:
        - service_identities
        - service_identities
        ttl: 1
        local: true
        partition: partition
        consul_policies:
        - consul_policies
        - consul_policies
        lease: 0
        node_identities:
        - node_identities
        - node_identities
        policy: policy
      properties:
        consul_namespace:
          description: Indicates which namespace that the token will be created within.
            Defaults to 'default'. Available in Consul 1.7 and above.
          type: string
        consul_policies:
          description: List of policies to attach to the token. Either "consul_policies"
            or "consul_roles" are required for Consul 1.5 and above, or just "consul_policies"
            if using Consul 1.4.
          items:
            type: string
          type: array
        consul_roles:
          description: List of Consul roles to attach to the token. Either "policies"
            or "consul_roles" are required for Consul 1.5 and above.
          items:
            type: string
          type: array
        lease:
          deprecated: true
          description: Use "ttl" instead.
          format: seconds
          type: integer
        local:
          description: Indicates that the token should not be replicated globally
            and instead be local to the current datacenter. Available in Consul 1.4
            and above.
          type: boolean
        max_ttl:
          description: Max TTL for the Consul token created from the role.
          format: seconds
          type: integer
        node_identities:
          description: List of Node Identities to attach to the token. Available in
            Consul 1.8.1 or above.
          items:
            type: string
          type: array
        partition:
          description: Indicates which admin partition that the token will be created
            within. Defaults to 'default'. Available in Consul 1.11 and above.
          type: string
        policies:
          deprecated: true
          description: Use "consul_policies" instead.
          items:
            type: string
          type: array
        policy:
          deprecated: true
          description: Policy document, base64 encoded. Required for 'client' tokens.
            Required for Consul pre-1.4.
          type: string
        service_identities:
          description: List of Service Identities to attach to the token, separated
            by semicolons. Available in Consul 1.5 or above.
          items:
            type: string
          type: array
        token_type:
          default: client
          deprecated: true
          description: 'Which type of token to create: ''client'' or ''management''.
            If a ''management'' token, the "policy", "policies", and "consul_roles"
            parameters are not required. Defaults to ''client''.'
          type: string
        ttl:
          description: TTL for the Consul token created from the role.
          format: seconds
          type: integer
      type: object
    GcpConfigRequest:
      example:
        gce_alias: role_id
        google_certs_endpoint: google_certs_endpoint
        gce_metadata:
        - gce_metadata
        - gce_metadata
        credentials: credentials
        iam_metadata:
        - iam_metadata
        - iam_metadata
        iam_alias: role_id
        custom_endpoint: '{}'
      properties:
        credentials:
          description: Google credentials JSON that Vault will use to verify users
            against GCP APIs. If not specified, will use application default credentials
          type: string
          x-vault-displayAttrs:
            name: Credentials
        custom_endpoint:
          description: Specifies overrides for various Google API Service Endpoints
            used in requests.
          format: kvpairs
          type: object
        gce_alias:
          default: role_id
          description: Indicates what value to use when generating an alias for GCE
            authentications.
          type: string
        gce_metadata:
          default:
          - default
          description: 'The metadata to include on the aliases and audit logs generated
            by this plugin. When set to ''default'', includes: instance_creation_timestamp,
            instance_id, instance_name, project_id, project_number, role, service_account_id,
            service_account_email, zone. Not editing this field means the ''default''
            fields are included. Explicitly setting this field to empty overrides
            the ''default'' and means no metadata will be included. If not using ''default'',
            explicit fields must be sent like: ''field1,field2''.'
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: gce_metadata
            value: field1,field2
        google_certs_endpoint:
          deprecated: true
          description: Deprecated. This field does nothing and be removed in a future
            release
          type: string
        iam_alias:
          default: role_id
          description: Indicates what value to use when generating an alias for IAM
            authentications.
          type: string
        iam_metadata:
          default:
          - default
          description: 'The metadata to include on the aliases and audit logs generated
            by this plugin. When set to ''default'', includes: project_id, role, service_account_id,
            service_account_email. Not editing this field means the ''default'' fields
            are included. Explicitly setting this field to empty overrides the ''default''
            and means no metadata will be included. If not using ''default'', explicit
            fields must be sent like: ''field1,field2''.'
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: iam_metadata
            value: field1,field2
      type: object
    GcpKeyRequest:
      example:
        key_type: TYPE_GOOGLE_CREDENTIALS_FILE
        key_algorithm: KEY_ALG_RSA_2048
        ttl: 0
      properties:
        key_algorithm:
          default: KEY_ALG_RSA_2048
          description: Private key algorithm for service account key - defaults to
            KEY_ALG_RSA_2048"
          type: string
        key_type:
          default: TYPE_GOOGLE_CREDENTIALS_FILE
          description: Private key type for service account key - defaults to TYPE_GOOGLE_CREDENTIALS_FILE"
          type: string
        ttl:
          description: Lifetime of the service account key
          format: seconds
          type: integer
      type: object
    GcpLoginRequest:
      example:
        role: role
        jwt: jwt
      properties:
        jwt:
          description: A signed JWT. This is either a self-signed service account
            JWT ('iam' roles only) or a GCE identity metadata token ('iam', 'gce'
            roles).
          type: string
        role:
          description: Name of the role against which the login is being attempted.
            Required.
          type: string
      type: object
    GcpRoleLabelsRequest:
      example:
        add:
        - add
        - add
        remove:
        - remove
        - remove
      properties:
        add:
          description: BoundLabels to add (in $key:$value)
          items:
            type: string
          type: array
        remove:
          description: Label key values to remove
          items:
            type: string
          type: array
      type: object
    GcpRoleRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 2
        max_ttl: 6
        bound_region: bound_region
        add_group_aliases: false
        max_jwt_exp: 0
        token_explicit_max_ttl: 5
        policies:
        - policies
        - policies
        token_max_ttl: 5
        bound_instance_group: bound_instance_group
        token_type: default-service
        type: type
        bound_service_accounts:
        - bound_service_accounts
        - bound_service_accounts
        token_ttl: 9
        project_id: project_id
        bound_projects:
        - bound_projects
        - bound_projects
        period: 1
        bound_zones:
        - bound_zones
        - bound_zones
        bound_instance_groups:
        - bound_instance_groups
        - bound_instance_groups
        token_period: 7
        ttl: 3
        token_no_default_policy: true
        bound_regions:
        - bound_regions
        - bound_regions
        bound_zone: bound_zone
        bound_labels:
        - bound_labels
        - bound_labels
        service_accounts:
        - service_accounts
        - service_accounts
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        allow_gce_inference: true
      properties:
        add_group_aliases:
          default: false
          description: If true, will add group aliases to auth tokens generated under
            this role. This will add the full list of ancestors (projects, folders,
            organizations) for the given entity's project. Requires IAM permission
            `resourcemanager.projects.get` on this project.
          type: boolean
        allow_gce_inference:
          default: true
          description: '''iam'' roles only. If false, Vault will not not allow GCE
            instances to login in against this role'
          type: boolean
        bound_instance_group:
          description: 'Deprecated: use "bound_instance_groups" instead.'
          type: string
        bound_instance_groups:
          description: Comma-separated list of permitted instance groups to which
            the GCE instance must belong. This option only applies to "gce" roles.
          items:
            type: string
          type: array
        bound_labels:
          description: Comma-separated list of GCP labels formatted as"key:value"
            strings that must be present on the GCE instance in order to authenticate.
            This option only applies to "gce" roles.
          items:
            type: string
          type: array
        bound_projects:
          description: GCP Projects that authenticating entities must belong to.
          items:
            type: string
          type: array
        bound_region:
          description: 'Deprecated: use "bound_regions" instead.'
          type: string
        bound_regions:
          description: Comma-separated list of permitted regions to which the GCE
            instance must belong. If a group is provided, it is assumed to be a regional
            group. If "zone" is provided, this option is ignored. This can be a self-link
            or region name. This option only applies to "gce" roles.
          items:
            type: string
          type: array
        bound_service_accounts:
          description: Can be set for both 'iam' and 'gce' roles (required for 'iam').
            A comma-seperated list of authorized service accounts. If the single value
            "*" is given, this is assumed to be all service accounts under the role's
            project. If this is set on a GCE role, the inferred service account from
            the instance metadata token will be used.
          items:
            type: string
          type: array
        bound_zone:
          description: 'Deprecated: use "bound_zones" instead.'
          type: string
        bound_zones:
          description: Comma-separated list of permitted zones to which the GCE instance
            must belong. If a group is provided, it is assumed to be a zonal group.
            This can be a self-link or zone name. This option only applies to "gce"
            roles.
          items:
            type: string
          type: array
        max_jwt_exp:
          default: 900
          description: Currently enabled for 'iam' only. Duration in seconds from
            time of validation that a JWT must expire within.
          format: seconds
          type: integer
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        project_id:
          description: 'Deprecated: use "bound_projects" instead'
          type: string
        service_accounts:
          description: 'Deprecated: use "bound_service_accounts" instead.'
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
        type:
          description: 'Type of the role. Currently supported: iam, gce'
          type: string
      type: object
    GcpRoleServiceAccountsRequest:
      example:
        add:
        - add
        - add
        remove:
        - remove
        - remove
      properties:
        add:
          description: Service-account emails or IDs to add.
          items:
            type: string
          type: array
        remove:
          description: Service-account emails or IDs to remove.
          items:
            type: string
          type: array
      type: object
    GcpRolesetKeyRequest:
      example:
        key_type: TYPE_GOOGLE_CREDENTIALS_FILE
        key_algorithm: KEY_ALG_RSA_2048
        ttl: 0
      properties:
        key_algorithm:
          default: KEY_ALG_RSA_2048
          description: Private key algorithm for service account key - defaults to
            KEY_ALG_RSA_2048"
          type: string
        key_type:
          default: TYPE_GOOGLE_CREDENTIALS_FILE
          description: Private key type for service account key - defaults to TYPE_GOOGLE_CREDENTIALS_FILE"
          type: string
        ttl:
          description: Lifetime of the service account key
          format: seconds
          type: integer
      type: object
    GcpRolesetRequest:
      example:
        secret_type: access_token
        token_scopes:
        - token_scopes
        - token_scopes
        bindings: bindings
        project: project
      properties:
        bindings:
          description: Bindings configuration string.
          type: string
        project:
          description: Name of the GCP project that this roleset's service account
            will belong to.
          type: string
        secret_type:
          default: access_token
          description: Type of secret generated for this role set. Defaults to 'access_token'
          type: string
        token_scopes:
          description: List of OAuth scopes to assign to credentials generated under
            this role set
          items:
            type: string
          type: array
      type: object
    GcpStaticAccountKeyRequest:
      example:
        key_type: TYPE_GOOGLE_CREDENTIALS_FILE
        key_algorithm: KEY_ALG_RSA_2048
        ttl: 0
      properties:
        key_algorithm:
          default: KEY_ALG_RSA_2048
          description: Private key algorithm for service account key. Defaults to
            KEY_ALG_RSA_2048."
          type: string
        key_type:
          default: TYPE_GOOGLE_CREDENTIALS_FILE
          description: Private key type for service account key. Defaults to TYPE_GOOGLE_CREDENTIALS_FILE."
          type: string
        ttl:
          description: Lifetime of the service account key
          format: seconds
          type: integer
      type: object
    GcpStaticAccountRequest:
      example:
        secret_type: access_token
        token_scopes:
        - token_scopes
        - token_scopes
        bindings: bindings
        service_account_email: service_account_email
      properties:
        bindings:
          description: Bindings configuration string.
          type: string
        secret_type:
          default: access_token
          description: Type of secret generated for this account. Cannot be updated.
            Defaults to "access_token"
          type: string
        service_account_email:
          description: Required. Email of the GCP service account to manage. Cannot
            be updated.
          type: string
        token_scopes:
          description: List of OAuth scopes to assign to access tokens generated under
            this account. Ignored if "secret_type" is not ""access_token""
          items:
            type: string
          type: array
      type: object
    GcpkmsConfigRequest:
      example:
        credentials: credentials
        scopes:
        - scopes
        - scopes
      properties:
        credentials:
          description: The credentials to use for authenticating to Google Cloud.
            Leave this blank to use the Default Application Credentials or instance
            metadata authentication.
          type: string
        scopes:
          description: The list of full-URL scopes to request when authenticating.
            By default, this requests https://www.googleapis.com/auth/cloudkms.
          items:
            type: string
          type: array
      type: object
    GcpkmsDecryptRequest:
      example:
        ciphertext: ciphertext
        key_version: 0
        additional_authenticated_data: additional_authenticated_data
      properties:
        additional_authenticated_data:
          description: Optional data that was specified during encryption of this
            payload.
          type: string
        ciphertext:
          description: Ciphertext to decrypt as previously returned from an encrypt
            operation. This must be base64-encoded ciphertext as previously returned
            from an encrypt operation.
          type: string
        key_version:
          description: Integer version of the crypto key version to use for decryption.
            This is required for asymmetric keys. For symmetric keys, Cloud KMS will
            choose the correct version automatically.
          type: integer
      type: object
    GcpkmsEncryptRequest:
      example:
        key_version: 0
        plaintext: plaintext
        additional_authenticated_data: additional_authenticated_data
      properties:
        additional_authenticated_data:
          description: Optional base64-encoded data that, if specified, must also
            be provided to decrypt this payload.
          type: string
        key_version:
          description: Integer version of the crypto key version to use for encryption.
            If unspecified, this defaults to the latest active crypto key version.
          type: integer
        plaintext:
          description: Plaintext value to be encrypted. This can be a string or binary,
            but the size is limited. See the Google Cloud KMS documentation for information
            on size limitations by key types.
          type: string
      type: object
    GcpkmsKeysConfigRequest:
      example:
        min_version: 6
        max_version: 0
      properties:
        max_version:
          description: Maximum allowed crypto key version. If set to a positive value,
            key versions greater than the given value are not permitted to be used.
            If set to 0 or a negative value, there is no maximum key version.
          type: integer
        min_version:
          description: Minimum allowed crypto key version. If set to a positive value,
            key versions less than the given value are not permitted to be used. If
            set to 0 or a negative value, there is no minimum key version. This value
            only affects encryption/re-encryption, not decryption. To restrict old
            values from being decrypted, increase this value and then perform a trim
            operation.
          type: integer
      type: object
    GcpkmsKeysRegisterRequest:
      example:
        crypto_key: crypto_key
        verify: true
      properties:
        crypto_key:
          description: Full resource ID of the crypto key including the project, location,
            key ring, and crypto key like "projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s".
            This crypto key must already exist in Google Cloud KMS unless verify is
            set to "false".
          type: string
        verify:
          default: true
          description: Verify that the given Google Cloud KMS crypto key exists and
            is accessible before creating the storage entry in Vault. Set this to
            "false" if the key will not exist at creation time.
          type: boolean
      type: object
    GcpkmsKeysRequest:
      example:
        crypto_key: crypto_key
        protection_level: protection_level
        purpose: purpose
        key_ring: key_ring
        rotation_period: 0
        algorithm: algorithm
        labels: '{}'
      properties:
        algorithm:
          description: 'Algorithm to use for encryption, decryption, or signing. The
            value depends on the key purpose. The value cannot be changed after creation.
            For a key purpose of "encrypt_decrypt", the valid values are: - symmetric_encryption
            (default) For a key purpose of "asymmetric_sign", valid values are: -
            rsa_sign_pss_2048_sha256 - rsa_sign_pss_3072_sha256 - rsa_sign_pss_4096_sha256
            - rsa_sign_pkcs1_2048_sha256 - rsa_sign_pkcs1_3072_sha256 - rsa_sign_pkcs1_4096_sha256
            - ec_sign_p256_sha256 - ec_sign_p384_sha384 For a key purpose of "asymmetric_decrypt",
            valid values are: - rsa_decrypt_oaep_2048_sha256 - rsa_decrypt_oaep_3072_sha256
            - rsa_decrypt_oaep_4096_sha256'
          type: string
        crypto_key:
          description: Name of the crypto key to use. If the given crypto key does
            not exist, Vault will try to create it. This defaults to the name of the
            key given to Vault as the parameter if unspecified.
          type: string
        key_ring:
          description: Full Google Cloud resource ID of the key ring with the project
            and location (e.g. projects/my-project/locations/global/keyRings/my-keyring).
            If the given key ring does not exist, Vault will try to create it during
            a create operation.
          type: string
        labels:
          description: Arbitrary key=value label to apply to the crypto key. To specify
            multiple labels, specify this argument multiple times (e.g. labels="a=b"
            labels="c=d").
          format: kvpairs
          type: object
        protection_level:
          description: Level of protection to use for the key management. Valid values
            are "software" and "hsm". The default value is "software". The value cannot
            be changed after creation.
          type: string
        purpose:
          description: Purpose of the key. Valid options are "asymmetric_decrypt",
            "asymmetric_sign", and "encrypt_decrypt". The default value is "encrypt_decrypt".
            The value cannot be changed after creation.
          type: string
        rotation_period:
          description: Amount of time between crypto key version rotations. This is
            specified as a time duration value like 72h (72 hours). The smallest possible
            value is 24h. This value only applies to keys with a purpose of "encrypt_decrypt".
          format: seconds
          type: integer
      type: object
    GcpkmsReencryptRequest:
      example:
        ciphertext: ciphertext
        key_version: 0
        additional_authenticated_data: additional_authenticated_data
      properties:
        additional_authenticated_data:
          description: Optional data that, if specified, must also be provided during
            decryption.
          type: string
        ciphertext:
          description: Ciphertext to be re-encrypted to the latest key version. This
            must be ciphertext that Vault previously generated for this named key.
          type: string
        key_version:
          description: Integer version of the crypto key version to use for the new
            encryption. If unspecified, this defaults to the latest active crypto
            key version.
          type: integer
      type: object
    GcpkmsSignRequest:
      example:
        key_version: 0
        digest: digest
      properties:
        digest:
          description: Digest to sign. This digest must use the same SHA algorithm
            as the underlying Cloud KMS key. The digest must be the base64-encoded
            binary value. This field is required.
          type: string
        key_version:
          description: Integer version of the crypto key version to use for signing.
            This field is required.
          type: integer
      type: object
    GcpkmsVerifyRequest:
      example:
        key_version: 0
        signature: signature
        digest: digest
      properties:
        digest:
          description: Digest to verify. This digest must use the same SHA algorithm
            as the underlying Cloud KMS key. The digest must be the base64-encoded
            binary value. This field is required.
          type: string
        key_version:
          description: Integer version of the crypto key version to use for verification.
            This field is required.
          type: integer
        signature:
          description: Base64-encoded signature to use for verification. This field
            is required.
          type: string
      type: object
    GithubConfigRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 5
        max_ttl: 0
        token_explicit_max_ttl: 1
        base_url: base_url
        token_period: 2
        token_max_ttl: 5
        token_type: default-service
        ttl: 9
        token_no_default_policy: true
        token_ttl: 7
        organization: organization
        organization_id: 6
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
      properties:
        base_url:
          description: The API endpoint to use. Useful if you are running GitHub Enterprise
            or an API-compatible authentication server.
          type: string
          x-vault-displayAttrs:
            name: Base URL
            group: GitHub Options
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        organization:
          description: The organization users must be part of
          type: string
        organization_id:
          description: The ID of the organization users must be part of
          format: int64
          type: integer
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies. This will apply to all tokens
            generated by this auth method, in addition to any policies configured
            for specific users/groups.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      required:
      - organization
      type: object
    GithubLoginRequest:
      example:
        token: token
      properties:
        token:
          description: GitHub personal API token
          type: string
      type: object
    GithubMapTeamsRequest:
      example:
        value: value
      properties:
        value:
          description: Value for teams mapping
          type: string
      type: object
    GithubMapUsersRequest:
      example:
        value: value
      properties:
        value:
          description: Value for users mapping
          type: string
      type: object
    IdentityAliasIdRequest:
      example:
        canonical_id: canonical_id
        name: name
        entity_id: entity_id
        mount_accessor: mount_accessor
      properties:
        canonical_id:
          description: Entity ID to which this alias should be tied to
          type: string
        entity_id:
          description: Entity ID to which this alias should be tied to. This field
            is deprecated in favor of 'canonical_id'.
          type: string
        mount_accessor:
          description: Mount accessor to which this alias belongs to
          type: string
        name:
          description: Name of the alias
          type: string
      type: object
    IdentityAliasRequest:
      example:
        canonical_id: canonical_id
        name: name
        id: id
        entity_id: entity_id
        mount_accessor: mount_accessor
      properties:
        canonical_id:
          description: Entity ID to which this alias belongs to
          type: string
        entity_id:
          description: Entity ID to which this alias belongs to. This field is deprecated
            in favor of 'canonical_id'.
          type: string
        id:
          description: ID of the alias
          type: string
        mount_accessor:
          description: Mount accessor to which this alias belongs to
          type: string
        name:
          description: Name of the alias
          type: string
      type: object
    IdentityEntityAliasIdRequest:
      example:
        canonical_id: canonical_id
        name: name
        entity_id: entity_id
        mount_accessor: mount_accessor
        custom_metadata: '{}'
      properties:
        canonical_id:
          description: Entity ID to which this alias should be tied to
          type: string
        custom_metadata:
          description: User provided key-value pairs
          format: kvpairs
          type: object
        entity_id:
          description: Entity ID to which this alias belongs to. This field is deprecated,
            use canonical_id.
          type: string
        mount_accessor:
          description: (Unused)
          type: string
        name:
          description: (Unused)
          type: string
      type: object
    IdentityEntityAliasRequest:
      example:
        canonical_id: canonical_id
        name: name
        id: id
        entity_id: entity_id
        mount_accessor: mount_accessor
        custom_metadata: '{}'
      properties:
        canonical_id:
          description: Entity ID to which this alias belongs
          type: string
        custom_metadata:
          description: User provided key-value pairs
          format: kvpairs
          type: object
        entity_id:
          description: Entity ID to which this alias belongs. This field is deprecated,
            use canonical_id.
          type: string
        id:
          description: ID of the entity alias. If set, updates the corresponding entity
            alias.
          type: string
        mount_accessor:
          description: Mount accessor to which this alias belongs to; unused for a
            modify
          type: string
        name:
          description: Name of the alias; unused for a modify
          type: string
      type: object
    IdentityEntityBatchDeleteRequest:
      example:
        entity_ids:
        - entity_ids
        - entity_ids
      properties:
        entity_ids:
          description: Entity IDs to delete
          items:
            type: string
          type: array
      type: object
    IdentityEntityIdRequest:
      example:
        metadata: '{}'
        name: name
        policies:
        - policies
        - policies
        disabled: true
      properties:
        disabled:
          description: If set true, tokens tied to this identity will not be able
            to be used (but will not be revoked).
          type: boolean
        metadata:
          description: 'Metadata to be associated with the entity. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        name:
          description: Name of the entity
          type: string
        policies:
          description: Policies to be tied to the entity.
          items:
            type: string
          type: array
      type: object
    IdentityEntityMergeRequest:
      example:
        from_entity_ids:
        - from_entity_ids
        - from_entity_ids
        conflicting_alias_ids_to_keep:
        - conflicting_alias_ids_to_keep
        - conflicting_alias_ids_to_keep
        to_entity_id: to_entity_id
        force: true
      properties:
        conflicting_alias_ids_to_keep:
          description: Alias IDs to keep in case of conflicting aliases. Ignored if
            no conflicting aliases found
          items:
            type: string
          type: array
        force:
          description: Setting this will follow the 'mine' strategy for merging MFA
            secrets. If there are secrets of the same type both in entities that are
            merged from and in entity into which all others are getting merged, secrets
            in the destination will be unaltered. If not set, this API will throw
            an error containing all the conflicts.
          type: boolean
        from_entity_ids:
          description: Entity IDs which need to get merged
          items:
            type: string
          type: array
        to_entity_id:
          description: Entity ID into which all the other entities need to get merged
          type: string
      type: object
    IdentityEntityNameRequest:
      example:
        metadata: '{}'
        policies:
        - policies
        - policies
        disabled: true
        id: id
      properties:
        disabled:
          description: If set true, tokens tied to this identity will not be able
            to be used (but will not be revoked).
          type: boolean
        id:
          description: ID of the entity. If set, updates the corresponding existing
            entity.
          type: string
        metadata:
          description: 'Metadata to be associated with the entity. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        policies:
          description: Policies to be tied to the entity.
          items:
            type: string
          type: array
      type: object
    IdentityEntityRequest:
      example:
        metadata: '{}'
        name: name
        policies:
        - policies
        - policies
        disabled: true
        id: id
      properties:
        disabled:
          description: If set true, tokens tied to this identity will not be able
            to be used (but will not be revoked).
          type: boolean
        id:
          description: ID of the entity. If set, updates the corresponding existing
            entity.
          type: string
        metadata:
          description: 'Metadata to be associated with the entity. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        name:
          description: Name of the entity
          type: string
        policies:
          description: Policies to be tied to the entity.
          items:
            type: string
          type: array
      type: object
    IdentityGroupAliasIdRequest:
      example:
        canonical_id: canonical_id
        name: name
        mount_accessor: mount_accessor
      properties:
        canonical_id:
          description: ID of the group to which this is an alias.
          type: string
        mount_accessor:
          description: Mount accessor to which this alias belongs to.
          type: string
        name:
          description: Alias of the group.
          type: string
      type: object
    IdentityGroupAliasRequest:
      example:
        canonical_id: canonical_id
        name: name
        id: id
        mount_accessor: mount_accessor
      properties:
        canonical_id:
          description: ID of the group to which this is an alias.
          type: string
        id:
          description: ID of the group alias.
          type: string
        mount_accessor:
          description: Mount accessor to which this alias belongs to.
          type: string
        name:
          description: Alias of the group.
          type: string
      type: object
    IdentityGroupIdRequest:
      example:
        member_group_ids:
        - member_group_ids
        - member_group_ids
        metadata: '{}'
        name: name
        policies:
        - policies
        - policies
        type: type
        member_entity_ids:
        - member_entity_ids
        - member_entity_ids
      properties:
        member_entity_ids:
          description: Entity IDs to be assigned as group members.
          items:
            type: string
          type: array
        member_group_ids:
          description: Group IDs to be assigned as group members.
          items:
            type: string
          type: array
        metadata:
          description: 'Metadata to be associated with the group. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        name:
          description: Name of the group.
          type: string
        policies:
          description: Policies to be tied to the group.
          items:
            type: string
          type: array
        type:
          description: Type of the group, 'internal' or 'external'. Defaults to 'internal'
          type: string
      type: object
    IdentityGroupNameRequest:
      example:
        member_group_ids:
        - member_group_ids
        - member_group_ids
        metadata: '{}'
        policies:
        - policies
        - policies
        id: id
        type: type
        member_entity_ids:
        - member_entity_ids
        - member_entity_ids
      properties:
        id:
          description: ID of the group. If set, updates the corresponding existing
            group.
          type: string
        member_entity_ids:
          description: Entity IDs to be assigned as group members.
          items:
            type: string
          type: array
        member_group_ids:
          description: Group IDs to be assigned as group members.
          items:
            type: string
          type: array
        metadata:
          description: 'Metadata to be associated with the group. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        policies:
          description: Policies to be tied to the group.
          items:
            type: string
          type: array
        type:
          description: Type of the group, 'internal' or 'external'. Defaults to 'internal'
          type: string
      type: object
    IdentityGroupRequest:
      example:
        member_group_ids:
        - member_group_ids
        - member_group_ids
        metadata: '{}'
        name: name
        policies:
        - policies
        - policies
        id: id
        type: type
        member_entity_ids:
        - member_entity_ids
        - member_entity_ids
      properties:
        id:
          description: ID of the group. If set, updates the corresponding existing
            group.
          type: string
        member_entity_ids:
          description: Entity IDs to be assigned as group members.
          items:
            type: string
          type: array
        member_group_ids:
          description: Group IDs to be assigned as group members.
          items:
            type: string
          type: array
        metadata:
          description: 'Metadata to be associated with the group. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        name:
          description: Name of the group.
          type: string
        policies:
          description: Policies to be tied to the group.
          items:
            type: string
          type: array
        type:
          description: Type of the group, 'internal' or 'external'. Defaults to 'internal'
          type: string
      type: object
    IdentityLookupEntityRequest:
      example:
        alias_mount_accessor: alias_mount_accessor
        alias_id: alias_id
        name: name
        id: id
        alias_name: alias_name
      properties:
        alias_id:
          description: ID of the alias.
          type: string
        alias_mount_accessor:
          description: Accessor of the mount to which the alias belongs to. This should
            be supplied in conjunction with 'alias_name'.
          type: string
        alias_name:
          description: Name of the alias. This should be supplied in conjunction with
            'alias_mount_accessor'.
          type: string
        id:
          description: ID of the entity.
          type: string
        name:
          description: Name of the entity.
          type: string
      type: object
    IdentityLookupGroupRequest:
      example:
        alias_mount_accessor: alias_mount_accessor
        alias_id: alias_id
        name: name
        id: id
        alias_name: alias_name
      properties:
        alias_id:
          description: ID of the alias.
          type: string
        alias_mount_accessor:
          description: Accessor of the mount to which the alias belongs to. This should
            be supplied in conjunction with 'alias_name'.
          type: string
        alias_name:
          description: Name of the alias. This should be supplied in conjunction with
            'alias_mount_accessor'.
          type: string
        id:
          description: ID of the group.
          type: string
        name:
          description: Name of the group.
          type: string
      type: object
    IdentityMfaLoginEnforcementRequest:
      example:
        auth_method_accessors:
        - auth_method_accessors
        - auth_method_accessors
        identity_entity_ids:
        - identity_entity_ids
        - identity_entity_ids
        auth_method_types:
        - auth_method_types
        - auth_method_types
        identity_group_ids:
        - identity_group_ids
        - identity_group_ids
        mfa_method_ids:
        - mfa_method_ids
        - mfa_method_ids
      properties:
        auth_method_accessors:
          description: Array of auth mount accessor IDs
          items:
            type: string
          type: array
        auth_method_types:
          description: Array of auth mount types
          items:
            type: string
          type: array
        identity_entity_ids:
          description: Array of identity entity IDs
          items:
            type: string
          type: array
        identity_group_ids:
          description: Array of identity group IDs
          items:
            type: string
          type: array
        mfa_method_ids:
          description: Array of Method IDs that determine what methods will be enforced
          items:
            type: string
          type: array
      required:
      - mfa_method_ids
      type: object
    IdentityMfaMethodDuoRequest:
      example:
        secret_key: secret_key
        integration_key: integration_key
        method_id: method_id
        username_format: username_format
        push_info: push_info
        use_passcode: true
        api_hostname: api_hostname
      properties:
        api_hostname:
          description: API host name for Duo.
          type: string
        integration_key:
          description: Integration key for Duo.
          type: string
        method_id:
          description: The unique identifier for this MFA method.
          type: string
        push_info:
          description: Push information for Duo.
          type: string
        secret_key:
          description: Secret key for Duo.
          type: string
        use_passcode:
          description: If true, the user is reminded to use the passcode upon MFA
            validation. This option does not enforce using the passcode. Defaults
            to false.
          type: boolean
        username_format:
          description: 'A template string for mapping Identity names to MFA method
            names. Values to subtitute should be placed in {{}}. For example, "{{alias.name}}@example.com".
            Currently-supported mappings: alias.name: The name returned by the mount
            configured via the mount_accessor parameter If blank, the Alias''s name
            field will be used as-is.'
          type: string
      type: object
    IdentityMfaMethodOktaRequest:
      example:
        production: true
        method_id: method_id
        api_token: api_token
        base_url: base_url
        username_format: username_format
        primary_email: true
        org_name: org_name
      properties:
        api_token:
          description: Okta API key.
          type: string
        base_url:
          description: The base domain to use for the Okta API. When not specified
            in the configuration, "okta.com" is used.
          type: string
        method_id:
          description: The unique identifier for this MFA method.
          type: string
        org_name:
          description: Name of the organization to be used in the Okta API.
          type: string
        primary_email:
          description: If true, the username will only match the primary email for
            the account. Defaults to false.
          type: boolean
        production:
          description: (DEPRECATED) Use base_url instead.
          type: boolean
        username_format:
          description: A template string for mapping Identity names to MFA method
            names. Values to substitute should be placed in {{}}. For example, "{{entity.name}}@example.com".
            If blank, the Entity's name field will be used as-is.
          type: string
      type: object
    IdentityMfaMethodPingidRequest:
      example:
        method_id: method_id
        username_format: username_format
        settings_file_base64: settings_file_base64
      properties:
        method_id:
          description: The unique identifier for this MFA method.
          type: string
        settings_file_base64:
          description: The settings file provided by Ping, Base64-encoded. This must
            be a settings file suitable for third-party clients, not the PingID SDK
            or PingFederate.
          type: string
        username_format:
          description: 'A template string for mapping Identity names to MFA method
            names. Values to subtitute should be placed in {{}}. For example, "{{alias.name}}@example.com".
            Currently-supported mappings: alias.name: The name returned by the mount
            configured via the mount_accessor parameter If blank, the Alias''s name
            field will be used as-is.'
          type: string
      type: object
    IdentityMfaMethodTotpAdminDestroyRequest:
      example:
        method_id: method_id
        entity_id: entity_id
      properties:
        entity_id:
          description: Identifier of the entity from which the MFA method secret needs
            to be removed.
          type: string
        method_id:
          description: The unique identifier for this MFA method.
          type: string
      required:
      - entity_id
      - method_id
      type: object
    IdentityMfaMethodTotpAdminGenerateRequest:
      example:
        method_id: method_id
        entity_id: entity_id
      properties:
        entity_id:
          description: Entity ID on which the generated secret needs to get stored.
          type: string
        method_id:
          description: The unique identifier for this MFA method.
          type: string
      required:
      - entity_id
      - method_id
      type: object
    IdentityMfaMethodTotpGenerateRequest:
      example:
        method_id: method_id
      properties:
        method_id:
          description: The unique identifier for this MFA method.
          type: string
      required:
      - method_id
      type: object
    IdentityMfaMethodTotpRequest:
      example:
        period: 5
        method_id: method_id
        qr_size: 5
        digits: 0
        max_validation_attempts: 1
        issuer: issuer
        algorithm: SHA1
        key_size: 6
        skew: 2
      properties:
        algorithm:
          default: SHA1
          description: The hashing algorithm used to generate the TOTP token. Options
            include SHA1, SHA256 and SHA512.
          type: string
        digits:
          default: 6
          description: The number of digits in the generated TOTP token. This value
            can either be 6 or 8.
          type: integer
        issuer:
          description: The name of the key's issuing organization.
          type: string
        key_size:
          default: 20
          description: Determines the size in bytes of the generated key.
          type: integer
        max_validation_attempts:
          description: Max number of allowed validation attempts.
          type: integer
        method_id:
          description: The unique identifier for this MFA method.
          type: string
        period:
          default: 30
          description: The length of time used to generate a counter for the TOTP
            token calculation.
          format: seconds
          type: integer
        qr_size:
          default: 200
          description: The pixel size of the generated square QR code.
          type: integer
        skew:
          default: 1
          description: The number of delay periods that are allowed when validating
            a TOTP token. This value can either be 0 or 1.
          type: integer
      type: object
    IdentityOidcAssignmentRequest:
      example:
        group_ids:
        - group_ids
        - group_ids
        entity_ids:
        - entity_ids
        - entity_ids
      properties:
        entity_ids:
          description: Comma separated string or array of identity entity IDs
          items:
            type: string
          type: array
        group_ids:
          description: Comma separated string or array of identity group IDs
          items:
            type: string
          type: array
      type: object
    IdentityOidcClientRequest:
      example:
        assignments:
        - assignments
        - assignments
        id_token_ttl: 6
        client_type: confidential
        redirect_uris:
        - redirect_uris
        - redirect_uris
        key: default
        access_token_ttl: 0
      properties:
        access_token_ttl:
          description: The time-to-live for access tokens obtained by the client.
          format: seconds
          type: integer
        assignments:
          description: Comma separated string or array of assignment resources.
          items:
            type: string
          type: array
        client_type:
          default: confidential
          description: 'The client type based on its ability to maintain confidentiality
            of credentials. The following client types are supported: ''confidential'',
            ''public''. Defaults to ''confidential''.'
          type: string
        id_token_ttl:
          description: The time-to-live for ID tokens obtained by the client.
          format: seconds
          type: integer
        key:
          default: default
          description: A reference to a named key resource. Cannot be modified after
            creation. Defaults to the 'default' key.
          type: string
        redirect_uris:
          description: Comma separated string or array of redirect URIs used by the
            client. One of these values must exactly match the redirect_uri parameter
            value used in each authentication request.
          items:
            type: string
          type: array
      type: object
    IdentityOidcConfigRequest:
      example:
        issuer: issuer
      properties:
        issuer:
          description: Issuer URL to be used in the iss claim of the token. If not
            set, Vault's app_addr will be used.
          type: string
      type: object
    IdentityOidcIntrospectRequest:
      example:
        client_id: client_id
        token: token
      properties:
        client_id:
          description: Optional client_id to verify
          type: string
        token:
          description: Token to verify
          type: string
      type: object
    IdentityOidcKeyRequest:
      example:
        verification_ttl: 6
        rotation_period: 0
        allowed_client_ids:
        - allowed_client_ids
        - allowed_client_ids
        algorithm: RS256
      properties:
        algorithm:
          default: RS256
          description: Signing algorithm to use. This will default to RS256.
          type: string
        allowed_client_ids:
          description: Comma separated string or array of role client ids allowed
            to use this key for signing. If empty no roles are allowed. If "*" all
            roles are allowed.
          items:
            type: string
          type: array
        rotation_period:
          description: How often to generate a new keypair.
          format: seconds
          type: integer
        verification_ttl:
          description: Controls how long the public portion of a key will be available
            for verification after being rotated.
          format: seconds
          type: integer
      type: object
    IdentityOidcKeyRotateRequest:
      example:
        verification_ttl: 0
      properties:
        verification_ttl:
          description: Controls how long the public portion of a key will be available
            for verification after being rotated. Setting verification_ttl here will
            override the verification_ttl set on the key.
          format: seconds
          type: integer
      type: object
    IdentityOidcProviderAuthorizeRequest:
      example:
        max_age: 0
        scope: scope
        response_type: response_type
        code_challenge_method: plain
        redirect_uri: redirect_uri
        state: state
        nonce: nonce
        client_id: client_id
        code_challenge: code_challenge
      properties:
        client_id:
          description: The ID of the requesting client.
          type: string
        code_challenge:
          description: The code challenge derived from the code verifier.
          type: string
        code_challenge_method:
          default: plain
          description: 'The method that was used to derive the code challenge. The
            following methods are supported: ''S256'', ''plain''. Defaults to ''plain''.'
          type: string
        max_age:
          description: The allowable elapsed time in seconds since the last time the
            end-user was actively authenticated.
          type: integer
        nonce:
          description: The value that will be returned in the ID token nonce claim
            after a token exchange.
          type: string
        redirect_uri:
          description: The redirection URI to which the response will be sent.
          type: string
        response_type:
          description: 'The OIDC authentication flow to be used. The following response
            types are supported: ''code'''
          type: string
        scope:
          description: A space-delimited, case-sensitive list of scopes to be requested.
            The 'openid' scope is required.
          type: string
        state:
          description: The value used to maintain state between the authentication
            request and client.
          type: string
      required:
      - client_id
      - redirect_uri
      - response_type
      - scope
      type: object
    IdentityOidcProviderRequest:
      example:
        scopes_supported:
        - scopes_supported
        - scopes_supported
        allowed_client_ids:
        - allowed_client_ids
        - allowed_client_ids
        issuer: issuer
      properties:
        allowed_client_ids:
          description: The client IDs that are permitted to use the provider
          items:
            type: string
          type: array
        issuer:
          description: Specifies what will be used for the iss claim of ID tokens.
          type: string
        scopes_supported:
          description: The scopes supported for requesting on the provider
          items:
            type: string
          type: array
      type: object
    IdentityOidcProviderTokenRequest:
      example:
        code: code
        grant_type: grant_type
        client_secret: client_secret
        redirect_uri: redirect_uri
        client_id: client_id
        code_verifier: code_verifier
      properties:
        client_id:
          description: The ID of the requesting client.
          type: string
        client_secret:
          description: The secret of the requesting client.
          type: string
        code:
          description: The authorization code received from the provider's authorization
            endpoint.
          type: string
        code_verifier:
          description: The code verifier associated with the authorization code.
          type: string
        grant_type:
          description: 'The authorization grant type. The following grant types are
            supported: ''authorization_code''.'
          type: string
        redirect_uri:
          description: The callback location where the authentication response was
            sent.
          type: string
      required:
      - code
      - grant_type
      - redirect_uri
      type: object
    IdentityOidcRoleRequest:
      example:
        template: template
        ttl: 0
        client_id: client_id
        key: key
      properties:
        client_id:
          description: Optional client_id
          type: string
        key:
          description: The OIDC key to use for generating tokens. The specified key
            must already exist.
          type: string
        template:
          description: The template string to use for generating tokens. This may
            be in string-ified JSON or base64 format.
          type: string
        ttl:
          description: TTL of the tokens generated against the role.
          format: seconds
          type: integer
      required:
      - key
      type: object
    IdentityOidcScopeRequest:
      example:
        template: template
        description: description
      properties:
        description:
          description: The description of the scope
          type: string
        template:
          description: The template string to use for the scope. This may be in string-ified
            JSON or base64 format.
          type: string
      type: object
    IdentityPersonaIdRequest:
      example:
        metadata: '{}'
        name: name
        entity_id: entity_id
        mount_accessor: mount_accessor
      properties:
        entity_id:
          description: Entity ID to which this persona should be tied to
          type: string
        metadata:
          description: 'Metadata to be associated with the persona. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        mount_accessor:
          description: Mount accessor to which this persona belongs to
          type: string
        name:
          description: Name of the persona
          type: string
      type: object
    IdentityPersonaRequest:
      example:
        metadata: '{}'
        name: name
        id: id
        entity_id: entity_id
        mount_accessor: mount_accessor
      properties:
        entity_id:
          description: Entity ID to which this persona belongs to
          type: string
        id:
          description: ID of the persona
          type: string
        metadata:
          description: 'Metadata to be associated with the persona. In CLI, this parameter
            can be repeated multiple times, and it all gets merged together. For example:
            vault <command> <path> metadata=key1=value1 metadata=key2=value2'
          format: kvpairs
          type: object
        mount_accessor:
          description: Mount accessor to which this persona belongs to
          type: string
        name:
          description: Name of the persona
          type: string
      type: object
    JwtConfigRequest:
      example:
        oidc_response_mode: oidc_response_mode
        namespace_in_state: true
        default_role: default_role
        jwt_supported_algs:
        - jwt_supported_algs
        - jwt_supported_algs
        oidc_client_id: oidc_client_id
        jwt_validation_pubkeys:
        - jwt_validation_pubkeys
        - jwt_validation_pubkeys
        oidc_response_types:
        - oidc_response_types
        - oidc_response_types
        oidc_client_secret: oidc_client_secret
        oidc_discovery_url: oidc_discovery_url
        provider_config: '{}'
        bound_issuer: bound_issuer
        jwks_ca_pem: jwks_ca_pem
        oidc_discovery_ca_pem: oidc_discovery_ca_pem
        jwks_url: jwks_url
      properties:
        bound_issuer:
          description: The value against which to match the 'iss' claim in a JWT.
            Optional.
          type: string
        default_role:
          description: The default role to use if none is provided during login. If
            not set, a role is required during login.
          format: lowercase
          type: string
        jwks_ca_pem:
          description: The CA certificate or chain of certificates, in PEM format,
            to use to validate connections to the JWKS URL. If not set, system certificates
            are used.
          type: string
        jwks_url:
          description: JWKS URL to use to authenticate signatures. Cannot be used
            with "oidc_discovery_url" or "jwt_validation_pubkeys".
          type: string
        jwt_supported_algs:
          description: A list of supported signing algorithms. Defaults to RS256.
          items:
            type: string
          type: array
        jwt_validation_pubkeys:
          description: A list of PEM-encoded public keys to use to authenticate signatures
            locally. Cannot be used with "jwks_url" or "oidc_discovery_url".
          items:
            type: string
          type: array
        namespace_in_state:
          description: Pass namespace in the OIDC state parameter instead of as a
            separate query parameter. With this setting, the allowed redirect URL(s)
            in Vault and on the provider side should not contain a namespace query
            parameter. This means only one redirect URL entry needs to be maintained
            on the provider side for all vault namespaces that will be authenticating
            against it. Defaults to true for new configs.
          type: boolean
          x-vault-displayAttrs:
            name: Namespace in OIDC state
            value: true
        oidc_client_id:
          description: The OAuth Client ID configured with your OIDC provider.
          type: string
        oidc_client_secret:
          description: The OAuth Client Secret configured with your OIDC provider.
          type: string
          x-vault-displayAttrs:
            sensitive: true
        oidc_discovery_ca_pem:
          description: The CA certificate or chain of certificates, in PEM format,
            to use to validate connections to the OIDC Discovery URL. If not set,
            system certificates are used.
          type: string
        oidc_discovery_url:
          description: OIDC Discovery URL, without any .well-known component (base
            path). Cannot be used with "jwks_url" or "jwt_validation_pubkeys".
          type: string
        oidc_response_mode:
          description: The response mode to be used in the OAuth2 request. Allowed
            values are 'query' and 'form_post'.
          type: string
        oidc_response_types:
          description: The response types to request. Allowed values are 'code' and
            'id_token'. Defaults to 'code'.
          items:
            type: string
          type: array
        provider_config:
          description: Provider-specific configuration. Optional.
          format: map
          type: object
          x-vault-displayAttrs:
            name: Provider Config
      type: object
    JwtLoginRequest:
      example:
        role: role
        jwt: jwt
      properties:
        jwt:
          description: The signed JWT to validate.
          type: string
        role:
          description: The role to log in against.
          format: lowercase
          type: string
      type: object
    JwtOidcAuthUrlRequest:
      example:
        role: role
        client_nonce: client_nonce
        redirect_uri: redirect_uri
      properties:
        client_nonce:
          description: Optional client-provided nonce that must match during callback,
            if present.
          type: string
        redirect_uri:
          description: The OAuth redirect_uri to use in the authorization URL.
          type: string
        role:
          description: The role to issue an OIDC authorization URL against.
          format: lowercase
          type: string
      type: object
    JwtOidcCallbackRequest:
      example:
        code: code
        id_token: id_token
        client_nonce: client_nonce
        state: state
      properties:
        client_nonce:
          type: string
        code:
          type: string
        id_token:
          type: string
        state:
          type: string
      type: object
    JwtRoleRequest:
      example:
        bound_claims: '{}'
        not_before_leeway: 5
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 2
        bound_audiences:
        - bound_audiences
        - bound_audiences
        max_ttl: 5
        token_explicit_max_ttl: 9
        policies:
        - policies
        - policies
        num_uses: 2
        token_max_ttl: 3
        token_type: default-service
        token_ttl: 7
        bound_subject: bound_subject
        expiration_leeway: 6
        bound_claims_type: string
        clock_skew_leeway: 0
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        claim_mappings: '{}'
        period: 7
        role_type: role_type
        user_claim: user_claim
        verbose_oidc_logging: true
        oidc_scopes:
        - oidc_scopes
        - oidc_scopes
        token_period: 4
        ttl: 1
        max_age: 1
        token_no_default_policy: true
        groups_claim: groups_claim
        allowed_redirect_uris:
        - allowed_redirect_uris
        - allowed_redirect_uris
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        user_claim_json_pointer: true
      properties:
        allowed_redirect_uris:
          description: Comma-separated list of allowed values for redirect_uri
          items:
            type: string
          type: array
        bound_audiences:
          description: Comma-separated list of 'aud' claims that are valid for login;
            any match is sufficient
          items:
            type: string
          type: array
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        bound_claims:
          description: Map of claims/values which must match for login
          format: map
          type: object
        bound_claims_type:
          default: string
          description: 'How to interpret values in the map of claims/values (which
            must match for login): allowed values are ''string'' or ''glob'''
          type: string
        bound_subject:
          description: The 'sub' claim that is valid for login. Optional.
          type: string
        claim_mappings:
          description: Mappings of claims (key) that will be copied to a metadata
            field (value)
          format: kvpairs
          type: object
        clock_skew_leeway:
          description: Duration in seconds of leeway when validating all claims to
            account for clock skew. Defaults to 60 (1 minute) if set to 0 and can
            be disabled if set to -1.
          format: seconds
          type: integer
        expiration_leeway:
          default: 150
          description: Duration in seconds of leeway when validating expiration of
            a token to account for clock skew. Defaults to 150 (2.5 minutes) if set
            to 0 and can be disabled if set to -1.
          format: seconds
          type: integer
        groups_claim:
          description: The claim to use for the Identity group alias names
          type: string
        max_age:
          description: Specifies the allowable elapsed time in seconds since the last
            time the user was actively authenticated.
          format: seconds
          type: integer
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        not_before_leeway:
          default: 150
          description: Duration in seconds of leeway when validating not before values
            of a token to account for clock skew. Defaults to 150 (2.5 minutes) if
            set to 0 and can be disabled if set to -1.
          format: seconds
          type: integer
        num_uses:
          deprecated: true
          description: Use "token_num_uses" instead. If this and "token_num_uses"
            are both specified, only "token_num_uses" will be used.
          type: integer
        oidc_scopes:
          description: Comma-separated list of OIDC scopes
          items:
            type: string
          type: array
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        role_type:
          description: Type of the role, either 'jwt' or 'oidc'.
          type: string
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
        user_claim:
          description: The claim to use for the Identity entity alias name
          type: string
        user_claim_json_pointer:
          description: If true, the user_claim value will use JSON pointer syntax
            for referencing claims.
          type: boolean
        verbose_oidc_logging:
          description: Log received OIDC tokens and claims when debug-level logging
            is active. Not recommended in production since sensitive information may
            be present in OIDC responses.
          type: boolean
      type: object
    KerberosConfigLdapRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        bindpass: bindpass
        token_num_uses: 5
        client_tls_key: client_tls_key
        request_timeout: 0
        token_explicit_max_ttl: 6
        certificate: certificate
        use_pre111_group_cn_behavior: true
        token_max_ttl: 1
        token_type: default-service
        case_sensitive_names: true
        anonymous_group_search: false
        groupattr: cn
        token_ttl: 2
        tls_min_version: tls12
        client_tls_cert: client_tls_cert
        upndomain: upndomain
        userattr: cn
        starttls: true
        groupfilter: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
        token_period: 5
        insecure_tls: true
        deny_null_bind: true
        tls_max_version: tls12
        url: ldap://127.0.0.1
        token_no_default_policy: true
        binddn: binddn
        username_as_alias: false
        groupdn: groupdn
        use_token_groups: false
        userfilter: ({{.UserAttr}}={{.Username}})
        discoverdn: true
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        userdn: userdn
      properties:
        anonymous_group_search:
          default: false
          description: Use anonymous binds when performing LDAP group searches (if
            true the initial credentials will still be used for the initial connection
            test).
          type: boolean
          x-vault-displayAttrs:
            name: Anonymous group search
        binddn:
          description: LDAP DN for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            name: Name of Object to bind (binddn)
        bindpass:
          description: LDAP password for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            sensitive: true
        case_sensitive_names:
          description: If true, case sensitivity will be used when comparing usernames
            and groups for matching policies.
          type: boolean
        certificate:
          description: CA certificate to use when verifying LDAP server certificate,
            must be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: CA certificate
            editType: file
        client_tls_cert:
          description: Client certificate to provide to the LDAP server, must be x509
            PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client certificate
            editType: file
        client_tls_key:
          description: Client certificate key to provide to the LDAP server, must
            be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client key
            editType: file
        deny_null_bind:
          default: true
          description: Denies an unauthenticated LDAP bind request if the user's password
            is empty; defaults to true
          type: boolean
        discoverdn:
          description: Use anonymous bind to discover the bind DN of a user (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Discover DN
        groupattr:
          default: cn
          description: 'LDAP attribute to follow on objects returned by <groupfilter>
            in order to enumerate user group membership. Examples: "cn" or "memberOf",
            etc. Default: cn'
          type: string
          x-vault-displayAttrs:
            name: Group Attribute
            value: cn
        groupdn:
          description: 'LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: Group DN
        groupfilter:
          default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
          description: 'Go template for querying group membership of user (optional)
            The template can access the following context variables: UserDN, Username
            Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))
            Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))'
          type: string
          x-vault-displayAttrs:
            name: Group Filter
        insecure_tls:
          description: Skip LDAP server SSL Certificate verification - VERY insecure
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Insecure TLS
        request_timeout:
          description: Timeout, in seconds, for the connection when making requests
            against the server before returning back an error.
          format: seconds
          type: integer
        starttls:
          description: Issue a StartTLS command after establishing unencrypted connection
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Issue StartTLS
        tls_max_version:
          default: tls12
          description: Maximum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Maximum TLS Version
        tls_min_version:
          default: tls12
          description: Minimum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Minimum TLS Version
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies. This will apply to all tokens
            generated by this auth method, in addition to any configured for specific
            users/groups.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        upndomain:
          description: Enables userPrincipalDomain login with [username]@UPNDomain
            (optional)
          type: string
          x-vault-displayAttrs:
            name: User Principal (UPN) Domain
        url:
          default: ldap://127.0.0.1
          description: 'LDAP URL to connect to (default: ldap://127.0.0.1). Multiple
            URLs can be specified by concatenating them with commas; they will be
            tried in-order.'
          type: string
          x-vault-displayAttrs:
            name: URL
        use_pre111_group_cn_behavior:
          description: In Vault 1.1.1 a fix for handling group CN values of different
            cases unfortunately introduced a regression that could cause previously
            defined groups to not be found due to a change in the resulting name.
            If set true, the pre-1.1.1 behavior for matching group CNs will be used.
            This is only needed in some upgrade scenarios for backwards compatibility.
            It is enabled by default if the config is upgraded but disabled by default
            on new configurations.
          type: boolean
        use_token_groups:
          default: false
          description: If true, use the Active Directory tokenGroups constructed attribute
            of the user to find the group memberships. This will find all security
            groups including nested ones.
          type: boolean
        userattr:
          default: cn
          description: 'Attribute used for users (default: cn)'
          type: string
          x-vault-displayAttrs:
            name: User Attribute
            value: cn
        userdn:
          description: 'LDAP domain to use for users (eg: ou=People,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: User DN
        userfilter:
          default: ({{.UserAttr}}={{.Username}})
          description: 'Go template for LDAP user search filer (optional) The template
            can access the following context variables: UserAttr, Username Default:
            ({{.UserAttr}}={{.Username}})'
          type: string
          x-vault-displayAttrs:
            name: User Search Filter
        username_as_alias:
          default: false
          description: If true, sets the alias name to the username
          type: boolean
      type: object
    KerberosConfigRequest:
      example:
        service_account: service_account
        remove_instance_name: true
        add_group_aliases: true
        keytab: keytab
      properties:
        add_group_aliases:
          description: If set to true, returns any groups found in LDAP as a group
            alias.
          type: boolean
        keytab:
          description: Base64 encoded keytab
          type: string
          x-vault-displayAttrs:
            sensitive: true
        remove_instance_name:
          description: Remove instance/FQDN from keytab principal names.
          type: boolean
        service_account:
          description: Service Account
          type: string
      type: object
    KerberosGroupsRequest:
      example:
        policies:
        - policies
        - policies
      properties:
        policies:
          description: Comma-separated list of policies associated to the group.
          items:
            type: string
          type: array
      type: object
    KerberosLoginRequest:
      example:
        authorization: authorization
      properties:
        authorization:
          description: SPNEGO Authorization header. Required.
          type: string
      type: object
    KubernetesConfigRequest:
      example:
        token_reviewer_jwt: token_reviewer_jwt
        kubernetes_ca_cert: kubernetes_ca_cert
        disable_local_ca_jwt: false
        disable_iss_validation: true
        kubernetes_host: kubernetes_host
        pem_keys:
        - pem_keys
        - pem_keys
        issuer: issuer
      properties:
        disable_iss_validation:
          default: true
          deprecated: true
          description: Disable JWT issuer validation (Deprecated, will be removed
            in a future release)
          type: boolean
          x-vault-displayAttrs:
            name: Disable JWT Issuer Validation
        disable_local_ca_jwt:
          default: false
          description: Disable defaulting to the local CA cert and service account
            JWT when running in a Kubernetes pod
          type: boolean
          x-vault-displayAttrs:
            name: Disable use of local CA and service account JWT
        issuer:
          deprecated: true
          description: Optional JWT issuer. If no issuer is specified, then this plugin
            will use kubernetes.io/serviceaccount as the default issuer. (Deprecated,
            will be removed in a future release)
          type: string
          x-vault-displayAttrs:
            name: JWT Issuer
        kubernetes_ca_cert:
          description: PEM encoded CA cert for use by the TLS client used to talk
            with the API.
          type: string
          x-vault-displayAttrs:
            name: Kubernetes CA Certificate
        kubernetes_host:
          description: Host must be a host string, a host:port pair, or a URL to the
            base of the Kubernetes API server.
          type: string
        pem_keys:
          description: Optional list of PEM-formated public keys or certificates used
            to verify the signatures of kubernetes service account JWTs. If a certificate
            is given, its public key will be extracted. Not every installation of
            Kubernetes exposes these keys.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Service account verification keys
        token_reviewer_jwt:
          description: A service account JWT used to access the TokenReview API to
            validate other JWTs during login. If not set the JWT used for login will
            be used to access the API.
          type: string
          x-vault-displayAttrs:
            name: Token Reviewer JWT
      type: object
    KubernetesCredsRequest:
      example:
        kubernetes_namespace: kubernetes_namespace
        cluster_role_binding: true
        ttl: 0
      properties:
        cluster_role_binding:
          description: If true, generate a ClusterRoleBinding to grant permissions
            across the whole cluster instead of within a namespace. Requires the Vault
            role to have kubernetes_role_type set to ClusterRole.
          type: boolean
        kubernetes_namespace:
          description: The name of the Kubernetes namespace in which to generate the
            credentials
          type: string
        ttl:
          description: The TTL of the generated credentials
          format: seconds
          type: integer
      required:
      - kubernetes_namespace
      type: object
    KubernetesLoginRequest:
      example:
        role: role
        jwt: jwt
      properties:
        jwt:
          description: A signed JWT for authenticating a service account. This field
            is required.
          type: string
        role:
          description: Name of the role against which the login is being attempted.
            This field is required
          type: string
      type: object
    KubernetesRoleRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        audience: audience
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        period: 1
        token_num_uses: 2
        max_ttl: 0
        token_explicit_max_ttl: 5
        policies:
        - policies
        - policies
        token_period: 7
        num_uses: 6
        token_max_ttl: 5
        alias_name_source: serviceaccount_uid
        token_type: default-service
        ttl: 3
        bound_service_account_namespaces:
        - bound_service_account_namespaces
        - bound_service_account_namespaces
        token_no_default_policy: true
        token_ttl: 9
        bound_service_account_names:
        - bound_service_account_names
        - bound_service_account_names
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
      properties:
        alias_name_source:
          default: serviceaccount_uid
          description: 'Source to use when deriving the Alias name. valid choices:
            "serviceaccount_uid" : <token.uid> e.g. 474b11b5-0f20-4f9d-8ca5-65715ab325e0
            (most secure choice) "serviceaccount_name" : <namespace>/<serviceaccount>
            e.g. vault/vault-agent default: "serviceaccount_uid"'
          type: string
        audience:
          description: Optional Audience claim to verify in the jwt.
          type: string
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        bound_service_account_names:
          description: List of service account names able to access this role. If
            set to "*" all names are allowed.
          items:
            type: string
          type: array
        bound_service_account_namespaces:
          description: List of namespaces allowed to access this role. If set to "*"
            all namespaces are allowed.
          items:
            type: string
          type: array
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        num_uses:
          deprecated: true
          description: Use "token_num_uses" instead. If this and "token_num_uses"
            are both specified, only "token_num_uses" will be used.
          type: integer
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    KubernetesRolesRequest:
      example:
        service_account_name: service_account_name
        allowed_kubernetes_namespaces:
        - allowed_kubernetes_namespaces
        - allowed_kubernetes_namespaces
        extra_labels: '{}'
        allowed_kubernetes_namespace_selector: allowed_kubernetes_namespace_selector
        extra_annotations: '{}'
        name_template: name_template
        token_default_ttl: 0
        token_max_ttl: 6
        generated_role_rules: generated_role_rules
        kubernetes_role_type: Role
        kubernetes_role_name: kubernetes_role_name
      properties:
        allowed_kubernetes_namespace_selector:
          description: A label selector for Kubernetes namespaces in which credentials
            can be generated. Accepts either a JSON or YAML object. If set with allowed_kubernetes_namespaces,
            the conditions are conjuncted.
          type: string
        allowed_kubernetes_namespaces:
          description: A list of the Kubernetes namespaces in which credentials can
            be generated. If set to "*" all namespaces are allowed.
          items:
            type: string
          type: array
        extra_annotations:
          description: Additional annotations to apply to all generated Kubernetes
            objects.
          format: kvpairs
          type: object
        extra_labels:
          description: Additional labels to apply to all generated Kubernetes objects.
          format: kvpairs
          type: object
        generated_role_rules:
          description: The Role or ClusterRole rules to use when generating a role.
            Accepts either a JSON or YAML object. If set, the entire chain of Kubernetes
            objects will be generated.
          type: string
        kubernetes_role_name:
          description: The pre-existing Role or ClusterRole to bind a generated service
            account to. If set, Kubernetes token, service account, and role binding
            objects will be created.
          type: string
        kubernetes_role_type:
          default: Role
          description: Specifies whether the Kubernetes role is a Role or ClusterRole.
          type: string
        name_template:
          description: The name template to use when generating service accounts,
            roles and role bindings. If unset, a default template is used.
          type: string
        service_account_name:
          description: The pre-existing service account to generate tokens for. Mutually
            exclusive with all role parameters. If set, only a Kubernetes service
            account token will be created.
          type: string
        token_default_ttl:
          description: The default ttl for generated Kubernetes service account tokens.
            If not set or set to 0, will use system default.
          format: seconds
          type: integer
        token_max_ttl:
          description: The maximum ttl for generated Kubernetes service account tokens.
            If not set or set to 0, will use system default.
          format: seconds
          type: integer
      type: object
    KvConfigRequest:
      example:
        cas_required: true
        delete_version_after: 0
        max_versions: 6
      properties:
        cas_required:
          description: If true, the backend will require the cas parameter to be set
            for each write
          type: boolean
        delete_version_after:
          description: If set, the length of time before a version is deleted. A negative
            duration disables the use of delete_version_after on all keys. A zero
            duration clears the current setting. Accepts a Go duration format string.
          format: seconds
          type: integer
        max_versions:
          description: The number of versions to keep for each key. Defaults to 10
          type: integer
      type: object
    KvDataRequest:
      example:
        data: '{}'
        options: '{}'
        version: 0
      properties:
        data:
          description: The contents of the data map will be stored and returned on
            read.
          format: map
          type: object
        options:
          description: Options for writing a KV entry. Set the "cas" value to use
            a Check-And-Set operation. If not set the write will be allowed. If set
            to 0 a write will only be allowed if the key doesn’t exist. If the index
            is non-zero the write will only be allowed if the key’s current version
            matches the version specified in the cas parameter.
          format: map
          type: object
        version:
          description: If provided during a read, the value at the version number
            will be returned
          type: integer
      type: object
    KvDeleteRequest:
      example:
        versions:
        - 0
        - 0
      properties:
        versions:
          description: The versions to be archived. The versioned data will not be
            deleted, but it will no longer be returned in normal get requests.
          items:
            type: integer
          type: array
      type: object
    KvDestroyRequest:
      example:
        versions:
        - 0
        - 0
      properties:
        versions:
          description: The versions to destroy. Their data will be permanently deleted.
          items:
            type: integer
          type: array
      type: object
    KvMetadataRequest:
      example:
        cas_required: true
        delete_version_after: 0
        max_versions: 6
        custom_metadata: '{}'
      properties:
        cas_required:
          description: If true the key will require the cas parameter to be set on
            all write requests. If false, the backend’s configuration will be used.
          type: boolean
        custom_metadata:
          description: User-provided key-value pairs that are used to describe arbitrary
            and version-agnostic information about a secret.
          format: map
          type: object
        delete_version_after:
          description: The length of time before a version is deleted. If not set,
            the backend's configured delete_version_after is used. Cannot be greater
            than the backend's delete_version_after. A zero duration clears the current
            setting. A negative duration will cause an error.
          format: seconds
          type: integer
        max_versions:
          description: The number of versions to keep. If not set, the backend’s configured
            max version is used.
          type: integer
      type: object
    KvUndeleteRequest:
      example:
        versions:
        - 0
        - 0
      properties:
        versions:
          description: The versions to unarchive. The versions will be restored and
            their data will be returned on normal get requests.
          items:
            type: integer
          type: array
      type: object
    LdapConfigRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        bindpass: bindpass
        token_num_uses: 5
        client_tls_key: client_tls_key
        request_timeout: 0
        token_explicit_max_ttl: 6
        certificate: certificate
        use_pre111_group_cn_behavior: true
        token_max_ttl: 1
        token_type: default-service
        case_sensitive_names: true
        anonymous_group_search: false
        groupattr: cn
        token_ttl: 2
        tls_min_version: tls12
        client_tls_cert: client_tls_cert
        upndomain: upndomain
        userattr: cn
        starttls: true
        groupfilter: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
        token_period: 5
        insecure_tls: true
        deny_null_bind: true
        tls_max_version: tls12
        url: ldap://127.0.0.1
        token_no_default_policy: true
        binddn: binddn
        username_as_alias: false
        groupdn: groupdn
        use_token_groups: false
        userfilter: ({{.UserAttr}}={{.Username}})
        discoverdn: true
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        userdn: userdn
      properties:
        anonymous_group_search:
          default: false
          description: Use anonymous binds when performing LDAP group searches (if
            true the initial credentials will still be used for the initial connection
            test).
          type: boolean
          x-vault-displayAttrs:
            name: Anonymous group search
        binddn:
          description: LDAP DN for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            name: Name of Object to bind (binddn)
        bindpass:
          description: LDAP password for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            sensitive: true
        case_sensitive_names:
          description: If true, case sensitivity will be used when comparing usernames
            and groups for matching policies.
          type: boolean
        certificate:
          description: CA certificate to use when verifying LDAP server certificate,
            must be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: CA certificate
            editType: file
        client_tls_cert:
          description: Client certificate to provide to the LDAP server, must be x509
            PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client certificate
            editType: file
        client_tls_key:
          description: Client certificate key to provide to the LDAP server, must
            be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client key
            editType: file
        deny_null_bind:
          default: true
          description: Denies an unauthenticated LDAP bind request if the user's password
            is empty; defaults to true
          type: boolean
        discoverdn:
          description: Use anonymous bind to discover the bind DN of a user (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Discover DN
        groupattr:
          default: cn
          description: 'LDAP attribute to follow on objects returned by <groupfilter>
            in order to enumerate user group membership. Examples: "cn" or "memberOf",
            etc. Default: cn'
          type: string
          x-vault-displayAttrs:
            name: Group Attribute
            value: cn
        groupdn:
          description: 'LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: Group DN
        groupfilter:
          default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
          description: 'Go template for querying group membership of user (optional)
            The template can access the following context variables: UserDN, Username
            Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))
            Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))'
          type: string
          x-vault-displayAttrs:
            name: Group Filter
        insecure_tls:
          description: Skip LDAP server SSL Certificate verification - VERY insecure
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Insecure TLS
        request_timeout:
          description: Timeout, in seconds, for the connection when making requests
            against the server before returning back an error.
          format: seconds
          type: integer
        starttls:
          description: Issue a StartTLS command after establishing unencrypted connection
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Issue StartTLS
        tls_max_version:
          default: tls12
          description: Maximum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Maximum TLS Version
        tls_min_version:
          default: tls12
          description: Minimum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Minimum TLS Version
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies. This will apply to all tokens
            generated by this auth method, in addition to any configured for specific
            users/groups.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        upndomain:
          description: Enables userPrincipalDomain login with [username]@UPNDomain
            (optional)
          type: string
          x-vault-displayAttrs:
            name: User Principal (UPN) Domain
        url:
          default: ldap://127.0.0.1
          description: 'LDAP URL to connect to (default: ldap://127.0.0.1). Multiple
            URLs can be specified by concatenating them with commas; they will be
            tried in-order.'
          type: string
          x-vault-displayAttrs:
            name: URL
        use_pre111_group_cn_behavior:
          description: In Vault 1.1.1 a fix for handling group CN values of different
            cases unfortunately introduced a regression that could cause previously
            defined groups to not be found due to a change in the resulting name.
            If set true, the pre-1.1.1 behavior for matching group CNs will be used.
            This is only needed in some upgrade scenarios for backwards compatibility.
            It is enabled by default if the config is upgraded but disabled by default
            on new configurations.
          type: boolean
        use_token_groups:
          default: false
          description: If true, use the Active Directory tokenGroups constructed attribute
            of the user to find the group memberships. This will find all security
            groups including nested ones.
          type: boolean
        userattr:
          default: cn
          description: 'Attribute used for users (default: cn)'
          type: string
          x-vault-displayAttrs:
            name: User Attribute
            value: cn
        userdn:
          description: 'LDAP domain to use for users (eg: ou=People,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: User DN
        userfilter:
          default: ({{.UserAttr}}={{.Username}})
          description: 'Go template for LDAP user search filer (optional) The template
            can access the following context variables: UserAttr, Username Default:
            ({{.UserAttr}}={{.Username}})'
          type: string
          x-vault-displayAttrs:
            name: User Search Filter
        username_as_alias:
          default: false
          description: If true, sets the alias name to the username
          type: boolean
      type: object
    LdapGroupsRequest:
      example:
        policies:
        - policies
        - policies
      properties:
        policies:
          description: Comma-separated list of policies associated to the group.
          items:
            type: string
          type: array
      type: object
    LdapLibraryCheckInRequest:
      example:
        service_account_names:
        - service_account_names
        - service_account_names
      properties:
        service_account_names:
          description: The username/logon name for the service accounts to check in.
          items:
            type: string
          type: array
      type: object
    LdapLibraryCheckOutRequest:
      example:
        ttl: 0
      properties:
        ttl:
          description: The length of time before the check-out will expire, in seconds.
          format: seconds
          type: integer
      type: object
    LdapLibraryManageCheckInRequest:
      example:
        service_account_names:
        - service_account_names
        - service_account_names
      properties:
        service_account_names:
          description: The username/logon name for the service accounts to check in.
          items:
            type: string
          type: array
      type: object
    LdapLibraryRequest:
      example:
        max_ttl: 0
        service_account_names:
        - service_account_names
        - service_account_names
        disable_check_in_enforcement: false
        ttl: 6
      properties:
        disable_check_in_enforcement:
          default: false
          description: Disable the default behavior of requiring that check-ins are
            performed by the entity that checked them out.
          type: boolean
        max_ttl:
          default: 86400
          description: In seconds, the max amount of time a check-out's renewals should
            last. Defaults to 24 hours.
          format: seconds
          type: integer
        service_account_names:
          description: The username/logon name for the service accounts with which
            this set will be associated.
          items:
            type: string
          type: array
        ttl:
          default: 86400
          description: In seconds, the amount of time a check-out should last. Defaults
            to 24 hours.
          format: seconds
          type: integer
      type: object
    LdapLoginRequest:
      example:
        password: password
      properties:
        password:
          description: Password for this user.
          type: string
      type: object
    LdapRoleRequest:
      example:
        max_ttl: 6
        default_ttl: 0
        username_template: username_template
        rollback_ldif: rollback_ldif
        deletion_ldif: deletion_ldif
        creation_ldif: creation_ldif
      properties:
        creation_ldif:
          description: LDIF string used to create new entities within the LDAP system.
            This LDIF can be templated.
          type: string
        default_ttl:
          description: Default TTL for dynamic credentials
          format: seconds
          type: integer
        deletion_ldif:
          description: LDIF string used to delete entities created within the LDAP
            system. This LDIF can be templated.
          type: string
        max_ttl:
          description: Max TTL a dynamic credential can be extended to
          format: seconds
          type: integer
        rollback_ldif:
          description: LDIF string used to rollback changes in the event of a failure
            to create credentials. This LDIF can be templated.
          type: string
        username_template:
          description: The template used to create a username
          type: string
      required:
      - creation_ldif
      - deletion_ldif
      type: object
    LdapStaticRoleRequest:
      example:
        dn: dn
        rotation_period: 0
        username: username
      properties:
        dn:
          description: The distinguished name of the entry to manage.
          type: string
        rotation_period:
          description: Period for automatic credential rotation of the given entry.
          format: seconds
          type: integer
        username:
          description: The username/logon name for the entry with which this role
            will be associated.
          type: string
      type: object
    LdapUsersRequest:
      example:
        policies:
        - policies
        - policies
        groups:
        - groups
        - groups
      properties:
        groups:
          description: Comma-separated list of additional groups associated with the
            user.
          items:
            type: string
          type: array
        policies:
          description: Comma-separated list of policies associated with the user.
          items:
            type: string
          type: array
      type: object
    MongodbatlasConfigRequest:
      example:
        public_key: public_key
        private_key: private_key
      properties:
        private_key:
          description: MongoDB Atlas Programmatic Private Key
          type: string
          x-vault-displayAttrs:
            sensitive: true
        public_key:
          description: MongoDB Atlas Programmatic Public Key
          type: string
      required:
      - private_key
      - public_key
      type: object
    MongodbatlasRolesRequest:
      example:
        cidr_blocks:
        - cidr_blocks
        - cidr_blocks
        max_ttl: 0
        project_id: project_id
        ip_addresses:
        - ip_addresses
        - ip_addresses
        organization_id: organization_id
        roles:
        - roles
        - roles
        project_roles:
        - project_roles
        - project_roles
        ttl: 6
      properties:
        cidr_blocks:
          description: Access list entry in CIDR notation to be added for the API
            key. Optional for organization and project keys.
          items:
            type: string
          type: array
        ip_addresses:
          description: IP address to be added to the access list for the API key.
            Optional for organization and project keys.
          items:
            type: string
          type: array
        max_ttl:
          description: The maximum allowed lifetime of credentials issued using this
            role.
          format: seconds
          type: integer
        organization_id:
          description: Organization ID required for an organization API key
          type: string
        project_id:
          description: Project ID the project API key belongs to.
          type: string
        project_roles:
          description: Roles assigned when an organization API Key is assigned to
            a project API key
          items:
            type: string
          type: array
        roles:
          description: List of roles that the API Key should be granted. A minimum
            of one role must be provided. Any roles provided must be valid for the
            assigned Project, required for organization and project keys.
          items:
            type: string
          type: array
        ttl:
          description: Duration in seconds after which the issued credential should
            expire. Defaults to 0, in which case the value will fallback to the system/mount
            defaults.
          format: seconds
          type: integer
      required:
      - roles
      type: object
    NomadConfigAccessRequest:
      example:
        client_key: client_key
        max_token_name_length: 0
        address: address
        client_cert: client_cert
        ca_cert: ca_cert
        token: token
      properties:
        address:
          description: Nomad server address
          type: string
        ca_cert:
          description: CA certificate to use when verifying Nomad server certificate,
            must be x509 PEM encoded.
          type: string
        client_cert:
          description: Client certificate used for Nomad's TLS communication, must
            be x509 PEM encoded and if this is set you need to also set client_key.
          type: string
        client_key:
          description: Client key used for Nomad's TLS communication, must be x509
            PEM encoded and if this is set you need to also set client_cert.
          type: string
        max_token_name_length:
          description: Max length for name of generated Nomad tokens
          type: integer
        token:
          description: Token for API calls
          type: string
      type: object
    NomadConfigLeaseRequest:
      example:
        max_ttl: 0
        ttl: 6
      properties:
        max_ttl:
          description: Duration after which the issued token should not be allowed
            to be renewed
          format: seconds
          type: integer
        ttl:
          description: Duration before which the issued token needs renewal
          format: seconds
          type: integer
      type: object
    NomadRoleRequest:
      example:
        policies:
        - policies
        - policies
        global: true
        type: client
      properties:
        global:
          description: Boolean value describing if the token should be global or not.
            Defaults to false.
          type: boolean
        policies:
          description: Comma-separated string or list of policies as previously created
            in Nomad. Required for 'client' token.
          items:
            type: string
          type: array
        type:
          default: client
          description: 'Which type of token to create: ''client'' or ''management''.
            If a ''management'' token, the "policies" parameter is not required. Defaults
            to ''client''.'
          type: string
      type: object
    OciConfigRequest:
      example:
        home_tenancy_id: home_tenancy_id
      properties:
        home_tenancy_id:
          description: The tenancy id of the account.
          type: string
      type: object
    OciLoginRequest:
      example:
        request_headers: request_headers
      properties:
        request_headers:
          description: The signed headers of the client
          type: string
      type: object
    OciRoleRequest:
      example:
        token_no_default_policy: true
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 1
        token_ttl: 5
        token_explicit_max_ttl: 0
        token_period: 5
        token_max_ttl: 6
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        token_type: default-service
        ocid_list:
        - ocid_list
        - ocid_list
      properties:
        ocid_list:
          description: A comma separated list of Group or Dynamic Group OCIDs that
            are allowed to take this role.
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
      type: object
    OidcConfigRequest:
      example:
        oidc_response_mode: oidc_response_mode
        namespace_in_state: true
        default_role: default_role
        jwt_supported_algs:
        - jwt_supported_algs
        - jwt_supported_algs
        oidc_client_id: oidc_client_id
        jwt_validation_pubkeys:
        - jwt_validation_pubkeys
        - jwt_validation_pubkeys
        oidc_response_types:
        - oidc_response_types
        - oidc_response_types
        oidc_client_secret: oidc_client_secret
        oidc_discovery_url: oidc_discovery_url
        provider_config: '{}'
        bound_issuer: bound_issuer
        jwks_ca_pem: jwks_ca_pem
        oidc_discovery_ca_pem: oidc_discovery_ca_pem
        jwks_url: jwks_url
      properties:
        bound_issuer:
          description: The value against which to match the 'iss' claim in a JWT.
            Optional.
          type: string
        default_role:
          description: The default role to use if none is provided during login. If
            not set, a role is required during login.
          format: lowercase
          type: string
        jwks_ca_pem:
          description: The CA certificate or chain of certificates, in PEM format,
            to use to validate connections to the JWKS URL. If not set, system certificates
            are used.
          type: string
        jwks_url:
          description: JWKS URL to use to authenticate signatures. Cannot be used
            with "oidc_discovery_url" or "jwt_validation_pubkeys".
          type: string
        jwt_supported_algs:
          description: A list of supported signing algorithms. Defaults to RS256.
          items:
            type: string
          type: array
        jwt_validation_pubkeys:
          description: A list of PEM-encoded public keys to use to authenticate signatures
            locally. Cannot be used with "jwks_url" or "oidc_discovery_url".
          items:
            type: string
          type: array
        namespace_in_state:
          description: Pass namespace in the OIDC state parameter instead of as a
            separate query parameter. With this setting, the allowed redirect URL(s)
            in Vault and on the provider side should not contain a namespace query
            parameter. This means only one redirect URL entry needs to be maintained
            on the provider side for all vault namespaces that will be authenticating
            against it. Defaults to true for new configs.
          type: boolean
          x-vault-displayAttrs:
            name: Namespace in OIDC state
            value: true
        oidc_client_id:
          description: The OAuth Client ID configured with your OIDC provider.
          type: string
        oidc_client_secret:
          description: The OAuth Client Secret configured with your OIDC provider.
          type: string
          x-vault-displayAttrs:
            sensitive: true
        oidc_discovery_ca_pem:
          description: The CA certificate or chain of certificates, in PEM format,
            to use to validate connections to the OIDC Discovery URL. If not set,
            system certificates are used.
          type: string
        oidc_discovery_url:
          description: OIDC Discovery URL, without any .well-known component (base
            path). Cannot be used with "jwks_url" or "jwt_validation_pubkeys".
          type: string
        oidc_response_mode:
          description: The response mode to be used in the OAuth2 request. Allowed
            values are 'query' and 'form_post'.
          type: string
        oidc_response_types:
          description: The response types to request. Allowed values are 'code' and
            'id_token'. Defaults to 'code'.
          items:
            type: string
          type: array
        provider_config:
          description: Provider-specific configuration. Optional.
          format: map
          type: object
          x-vault-displayAttrs:
            name: Provider Config
      type: object
    OidcLoginRequest:
      example:
        role: role
        jwt: jwt
      properties:
        jwt:
          description: The signed JWT to validate.
          type: string
        role:
          description: The role to log in against.
          format: lowercase
          type: string
      type: object
    OidcOidcAuthUrlRequest:
      example:
        role: role
        client_nonce: client_nonce
        redirect_uri: redirect_uri
      properties:
        client_nonce:
          description: Optional client-provided nonce that must match during callback,
            if present.
          type: string
        redirect_uri:
          description: The OAuth redirect_uri to use in the authorization URL.
          type: string
        role:
          description: The role to issue an OIDC authorization URL against.
          format: lowercase
          type: string
      type: object
    OidcOidcCallbackRequest:
      example:
        code: code
        id_token: id_token
        client_nonce: client_nonce
        state: state
      properties:
        client_nonce:
          type: string
        code:
          type: string
        id_token:
          type: string
        state:
          type: string
      type: object
    OidcRoleRequest:
      example:
        bound_claims: '{}'
        not_before_leeway: 5
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 2
        bound_audiences:
        - bound_audiences
        - bound_audiences
        max_ttl: 5
        token_explicit_max_ttl: 9
        policies:
        - policies
        - policies
        num_uses: 2
        token_max_ttl: 3
        token_type: default-service
        token_ttl: 7
        bound_subject: bound_subject
        expiration_leeway: 6
        bound_claims_type: string
        clock_skew_leeway: 0
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        claim_mappings: '{}'
        period: 7
        role_type: role_type
        user_claim: user_claim
        verbose_oidc_logging: true
        oidc_scopes:
        - oidc_scopes
        - oidc_scopes
        token_period: 4
        ttl: 1
        max_age: 1
        token_no_default_policy: true
        groups_claim: groups_claim
        allowed_redirect_uris:
        - allowed_redirect_uris
        - allowed_redirect_uris
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        user_claim_json_pointer: true
      properties:
        allowed_redirect_uris:
          description: Comma-separated list of allowed values for redirect_uri
          items:
            type: string
          type: array
        bound_audiences:
          description: Comma-separated list of 'aud' claims that are valid for login;
            any match is sufficient
          items:
            type: string
          type: array
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        bound_claims:
          description: Map of claims/values which must match for login
          format: map
          type: object
        bound_claims_type:
          default: string
          description: 'How to interpret values in the map of claims/values (which
            must match for login): allowed values are ''string'' or ''glob'''
          type: string
        bound_subject:
          description: The 'sub' claim that is valid for login. Optional.
          type: string
        claim_mappings:
          description: Mappings of claims (key) that will be copied to a metadata
            field (value)
          format: kvpairs
          type: object
        clock_skew_leeway:
          description: Duration in seconds of leeway when validating all claims to
            account for clock skew. Defaults to 60 (1 minute) if set to 0 and can
            be disabled if set to -1.
          format: seconds
          type: integer
        expiration_leeway:
          default: 150
          description: Duration in seconds of leeway when validating expiration of
            a token to account for clock skew. Defaults to 150 (2.5 minutes) if set
            to 0 and can be disabled if set to -1.
          format: seconds
          type: integer
        groups_claim:
          description: The claim to use for the Identity group alias names
          type: string
        max_age:
          description: Specifies the allowable elapsed time in seconds since the last
            time the user was actively authenticated.
          format: seconds
          type: integer
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        not_before_leeway:
          default: 150
          description: Duration in seconds of leeway when validating not before values
            of a token to account for clock skew. Defaults to 150 (2.5 minutes) if
            set to 0 and can be disabled if set to -1.
          format: seconds
          type: integer
        num_uses:
          deprecated: true
          description: Use "token_num_uses" instead. If this and "token_num_uses"
            are both specified, only "token_num_uses" will be used.
          type: integer
        oidc_scopes:
          description: Comma-separated list of OIDC scopes
          items:
            type: string
          type: array
        period:
          deprecated: true
          description: Use "token_period" instead. If this and "token_period" are
            both specified, only "token_period" will be used.
          format: seconds
          type: integer
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        role_type:
          description: Type of the role, either 'jwt' or 'oidc'.
          type: string
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
        user_claim:
          description: The claim to use for the Identity entity alias name
          type: string
        user_claim_json_pointer:
          description: If true, the user_claim value will use JSON pointer syntax
            for referencing claims.
          type: boolean
        verbose_oidc_logging:
          description: Log received OIDC tokens and claims when debug-level logging
            is active. Not recommended in production since sensitive information may
            be present in OIDC responses.
          type: boolean
      type: object
    OktaConfigRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 5
        max_ttl: 0
        production: true
        token_explicit_max_ttl: 6
        api_token: api_token
        base_url: base_url
        token_period: 5
        token_max_ttl: 1
        token_type: default-service
        ttl: 7
        bypass_okta_mfa: true
        token: token
        token_no_default_policy: true
        token_ttl: 2
        organization: organization
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        org_name: org_name
      properties:
        api_token:
          description: Okta API key.
          type: string
          x-vault-displayAttrs:
            name: API Token
        base_url:
          description: The base domain to use for the Okta API. When not specified
            in the configuration, "okta.com" is used.
          type: string
          x-vault-displayAttrs:
            name: Base URL
        bypass_okta_mfa:
          description: When set true, requests by Okta for a MFA check will be bypassed.
            This also disallows certain status checks on the account, such as whether
            the password is expired.
          type: boolean
          x-vault-displayAttrs:
            name: Bypass Okta MFA
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        org_name:
          description: Name of the organization to be used in the Okta API.
          type: string
          x-vault-displayAttrs:
            name: Organization Name
        organization:
          deprecated: true
          description: Use org_name instead.
          type: string
        production:
          deprecated: true
          description: Use base_url instead.
          type: boolean
        token:
          deprecated: true
          description: Use api_token instead.
          type: string
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies. This will apply to all tokens
            generated by this auth method, in addition to any configured for specific
            users/groups.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
    OktaGroupsRequest:
      example:
        policies:
        - policies
        - policies
      properties:
        policies:
          description: Comma-separated list of policies associated to the group.
          items:
            type: string
          type: array
      type: object
    OktaLoginRequest:
      example:
        totp: totp
        password: password
        provider: provider
        nonce: nonce
      properties:
        nonce:
          description: Nonce provided if performing login that requires number verification
            challenge. Logins through the vault login CLI command will automatically
            generate a nonce.
          type: string
        password:
          description: Password for this user.
          type: string
        provider:
          description: Preferred factor provider.
          type: string
        totp:
          description: TOTP passcode.
          type: string
      type: object
    OktaUsersRequest:
      example:
        policies:
        - policies
        - policies
        groups:
        - groups
        - groups
      properties:
        groups:
          description: List of groups associated with the user.
          items:
            type: string
          type: array
        policies:
          description: List of policies associated with the user.
          items:
            type: string
          type: array
      type: object
    OpenldapConfigRequest:
      example:
        schema: openldap
        bindpass: bindpass
        client_tls_key: client_tls_key
        max_ttl: 6
        request_timeout: 1
        certificate: certificate
        use_pre111_group_cn_behavior: true
        case_sensitive_names: true
        anonymous_group_search: false
        groupattr: cn
        tls_min_version: tls12
        client_tls_cert: client_tls_cert
        upndomain: upndomain
        userattr: cn
        starttls: true
        groupfilter: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
        length: 0
        insecure_tls: true
        deny_null_bind: true
        tls_max_version: tls12
        ttl: 5
        url: ldap://127.0.0.1
        binddn: binddn
        username_as_alias: false
        password_policy: password_policy
        groupdn: groupdn
        use_token_groups: false
        userfilter: ({{.UserAttr}}={{.Username}})
        discoverdn: true
        userdn: userdn
      properties:
        anonymous_group_search:
          default: false
          description: Use anonymous binds when performing LDAP group searches (if
            true the initial credentials will still be used for the initial connection
            test).
          type: boolean
          x-vault-displayAttrs:
            name: Anonymous group search
        binddn:
          description: LDAP DN for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            name: Name of Object to bind (binddn)
        bindpass:
          description: LDAP password for searching for the user DN (optional)
          type: string
          x-vault-displayAttrs:
            sensitive: true
        case_sensitive_names:
          description: If true, case sensitivity will be used when comparing usernames
            and groups for matching policies.
          type: boolean
        certificate:
          description: CA certificate to use when verifying LDAP server certificate,
            must be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: CA certificate
            editType: file
        client_tls_cert:
          description: Client certificate to provide to the LDAP server, must be x509
            PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client certificate
            editType: file
        client_tls_key:
          description: Client certificate key to provide to the LDAP server, must
            be x509 PEM encoded (optional)
          type: string
          x-vault-displayAttrs:
            name: Client key
            editType: file
        deny_null_bind:
          default: true
          description: Denies an unauthenticated LDAP bind request if the user's password
            is empty; defaults to true
          type: boolean
        discoverdn:
          description: Use anonymous bind to discover the bind DN of a user (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Discover DN
        groupattr:
          default: cn
          description: 'LDAP attribute to follow on objects returned by <groupfilter>
            in order to enumerate user group membership. Examples: "cn" or "memberOf",
            etc. Default: cn'
          type: string
          x-vault-displayAttrs:
            name: Group Attribute
            value: cn
        groupdn:
          description: 'LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: Group DN
        groupfilter:
          default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
          description: 'Go template for querying group membership of user (optional)
            The template can access the following context variables: UserDN, Username
            Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))
            Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))'
          type: string
          x-vault-displayAttrs:
            name: Group Filter
        insecure_tls:
          description: Skip LDAP server SSL Certificate verification - VERY insecure
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Insecure TLS
        length:
          deprecated: true
          description: The desired length of passwords that Vault generates.
          type: integer
        max_ttl:
          description: The maximum password time-to-live.
          format: seconds
          type: integer
        password_policy:
          description: Password policy to use to generate passwords
          type: string
        request_timeout:
          description: Timeout, in seconds, for the connection when making requests
            against the server before returning back an error.
          format: seconds
          type: integer
        schema:
          default: openldap
          description: The desired LDAP schema used when modifying user account passwords.
          type: string
        starttls:
          description: Issue a StartTLS command after establishing unencrypted connection
            (optional)
          type: boolean
          x-vault-displayAttrs:
            name: Issue StartTLS
        tls_max_version:
          default: tls12
          description: Maximum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Maximum TLS Version
        tls_min_version:
          default: tls12
          description: Minimum TLS version to use. Accepted values are 'tls10', 'tls11',
            'tls12' or 'tls13'. Defaults to 'tls12'
          enum:
          - tls10
          - tls11
          - tls12
          - tls13
          type: string
          x-vault-displayAttrs:
            name: Minimum TLS Version
        ttl:
          description: The default password time-to-live.
          format: seconds
          type: integer
        upndomain:
          description: Enables userPrincipalDomain login with [username]@UPNDomain
            (optional)
          type: string
          x-vault-displayAttrs:
            name: User Principal (UPN) Domain
        url:
          default: ldap://127.0.0.1
          description: 'LDAP URL to connect to (default: ldap://127.0.0.1). Multiple
            URLs can be specified by concatenating them with commas; they will be
            tried in-order.'
          type: string
          x-vault-displayAttrs:
            name: URL
        use_pre111_group_cn_behavior:
          description: In Vault 1.1.1 a fix for handling group CN values of different
            cases unfortunately introduced a regression that could cause previously
            defined groups to not be found due to a change in the resulting name.
            If set true, the pre-1.1.1 behavior for matching group CNs will be used.
            This is only needed in some upgrade scenarios for backwards compatibility.
            It is enabled by default if the config is upgraded but disabled by default
            on new configurations.
          type: boolean
        use_token_groups:
          default: false
          description: If true, use the Active Directory tokenGroups constructed attribute
            of the user to find the group memberships. This will find all security
            groups including nested ones.
          type: boolean
        userattr:
          default: cn
          description: 'Attribute used for users (default: cn)'
          type: string
          x-vault-displayAttrs:
            name: User Attribute
            value: cn
        userdn:
          description: 'LDAP domain to use for users (eg: ou=People,dc=example,dc=org)'
          type: string
          x-vault-displayAttrs:
            name: User DN
        userfilter:
          default: ({{.UserAttr}}={{.Username}})
          description: 'Go template for LDAP user search filer (optional) The template
            can access the following context variables: UserAttr, Username Default:
            ({{.UserAttr}}={{.Username}})'
          type: string
          x-vault-displayAttrs:
            name: User Search Filter
        username_as_alias:
          default: false
          description: If true, sets the alias name to the username
          type: boolean
      type: object
    OpenldapLibraryCheckInRequest:
      example:
        service_account_names:
        - service_account_names
        - service_account_names
      properties:
        service_account_names:
          description: The username/logon name for the service accounts to check in.
          items:
            type: string
          type: array
      type: object
    OpenldapLibraryCheckOutRequest:
      example:
        ttl: 0
      properties:
        ttl:
          description: The length of time before the check-out will expire, in seconds.
          format: seconds
          type: integer
      type: object
    OpenldapLibraryManageCheckInRequest:
      example:
        service_account_names:
        - service_account_names
        - service_account_names
      properties:
        service_account_names:
          description: The username/logon name for the service accounts to check in.
          items:
            type: string
          type: array
      type: object
    OpenldapLibraryRequest:
      example:
        max_ttl: 0
        service_account_names:
        - service_account_names
        - service_account_names
        disable_check_in_enforcement: false
        ttl: 6
      properties:
        disable_check_in_enforcement:
          default: false
          description: Disable the default behavior of requiring that check-ins are
            performed by the entity that checked them out.
          type: boolean
        max_ttl:
          default: 86400
          description: In seconds, the max amount of time a check-out's renewals should
            last. Defaults to 24 hours.
          format: seconds
          type: integer
        service_account_names:
          description: The username/logon name for the service accounts with which
            this set will be associated.
          items:
            type: string
          type: array
        ttl:
          default: 86400
          description: In seconds, the amount of time a check-out should last. Defaults
            to 24 hours.
          format: seconds
          type: integer
      type: object
    OpenldapRoleRequest:
      example:
        max_ttl: 6
        default_ttl: 0
        username_template: username_template
        rollback_ldif: rollback_ldif
        deletion_ldif: deletion_ldif
        creation_ldif: creation_ldif
      properties:
        creation_ldif:
          description: LDIF string used to create new entities within the LDAP system.
            This LDIF can be templated.
          type: string
        default_ttl:
          description: Default TTL for dynamic credentials
          format: seconds
          type: integer
        deletion_ldif:
          description: LDIF string used to delete entities created within the LDAP
            system. This LDIF can be templated.
          type: string
        max_ttl:
          description: Max TTL a dynamic credential can be extended to
          format: seconds
          type: integer
        rollback_ldif:
          description: LDIF string used to rollback changes in the event of a failure
            to create credentials. This LDIF can be templated.
          type: string
        username_template:
          description: The template used to create a username
          type: string
      required:
      - creation_ldif
      - deletion_ldif
      type: object
    OpenldapStaticRoleRequest:
      example:
        dn: dn
        rotation_period: 0
        username: username
      properties:
        dn:
          description: The distinguished name of the entry to manage.
          type: string
        rotation_period:
          description: Period for automatic credential rotation of the given entry.
          format: seconds
          type: integer
        username:
          description: The username/logon name for the entry with which this role
            will be associated.
          type: string
      type: object
    PkiBundleRequest:
      example:
        pem_bundle: pem_bundle
      properties:
        pem_bundle:
          description: PEM-format, concatenated unencrypted secret-key (optional)
            and certificates.
          type: string
      type: object
    PkiCertRequest:
      example:
        pem_bundle: pem_bundle
      properties:
        pem_bundle:
          description: PEM-format, concatenated unencrypted secret-key (optional)
            and certificates.
          type: string
      type: object
    PkiConfigAutoTidyRequest:
      example:
        interval_duration: 0
        pause_duration: 0s
        tidy_revoked_cert_issuer_associations: true
        tidy_revocation_list: true
        tidy_cert_store: true
        tidy_revoked_certs: true
        safety_buffer: 6
        enabled: true
      properties:
        enabled:
          description: Set to true to enable automatic tidy operations.
          type: boolean
        interval_duration:
          default: 43200
          description: Interval at which to run an auto-tidy operation. This is the
            time between tidy invocations (after one finishes to the start of the
            next). Running a manual tidy will reset this duration.
          format: seconds
          type: integer
        pause_duration:
          default: 0s
          description: The amount of time to wait between processing certificates.
            This allows operators to change the execution profile of tidy to take
            consume less resources by slowing down how long it takes to run. Note
            that the entire list of certificates will be stored in memory during the
            entire tidy operation, but resources to read/process/update existing entries
            will be spread out over a greater period of time. By default this is zero
            seconds.
          type: string
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond certificate
            expiration before it is removed from the backend storage and/or revocation
            list. Defaults to 72 hours.
          format: seconds
          type: integer
        tidy_cert_store:
          description: Set to true to enable tidying up the certificate store
          type: boolean
        tidy_revocation_list:
          description: Deprecated; synonym for 'tidy_revoked_certs
          type: boolean
        tidy_revoked_cert_issuer_associations:
          description: Set to true to validate issuer associations on revocation entries.
            This helps increase the performance of CRL building and OCSP responses.
          type: boolean
        tidy_revoked_certs:
          description: Set to true to expire all revoked and expired certificates,
            removing them both from the CRL and from storage. The CRL will be rotated
            if this causes any values to be removed.
          type: boolean
      type: object
    PkiConfigCaRequest:
      example:
        pem_bundle: pem_bundle
      properties:
        pem_bundle:
          description: PEM-format, concatenated unencrypted secret key and certificate.
          type: string
      type: object
    PkiConfigCrlRequest:
      example:
        auto_rebuild_grace_period: 12h
        disable: true
        ocsp_disable: true
        expiry: 72h
        ocsp_expiry: 1h
        delta_rebuild_interval: 15m
        enable_delta: true
        auto_rebuild: true
      properties:
        auto_rebuild:
          description: If set to true, enables automatic rebuilding of the CRL
          type: boolean
        auto_rebuild_grace_period:
          default: 12h
          description: The time before the CRL expires to automatically rebuild it,
            when enabled. Must be shorter than the CRL expiry. Defaults to 12h.
          type: string
        delta_rebuild_interval:
          default: 15m
          description: The time between delta CRL rebuilds if a new revocation has
            occurred. Must be shorter than the CRL expiry. Defaults to 15m.
          type: string
        disable:
          description: If set to true, disables generating the CRL entirely.
          type: boolean
        enable_delta:
          description: Whether to enable delta CRLs between authoritative CRL rebuilds
          type: boolean
        expiry:
          default: 72h
          description: The amount of time the generated CRL should be valid; defaults
            to 72 hours
          type: string
        ocsp_disable:
          description: If set to true, ocsp unauthorized responses will be returned.
          type: boolean
        ocsp_expiry:
          default: 1h
          description: The amount of time an OCSP response will be valid (controls
            the NextUpdate field); defaults to 12 hours
          type: string
      type: object
    PkiConfigIssuersRequest:
      example:
        default: default
      properties:
        default:
          description: Reference (name or identifier) to the default issuer.
          type: string
      type: object
    PkiConfigKeysRequest:
      example:
        default: default
      properties:
        default:
          description: Reference (name or identifier) of the default key.
          type: string
      type: object
    PkiConfigUrlsRequest:
      example:
        crl_distribution_points:
        - crl_distribution_points
        - crl_distribution_points
        issuing_certificates:
        - issuing_certificates
        - issuing_certificates
        ocsp_servers:
        - ocsp_servers
        - ocsp_servers
      properties:
        crl_distribution_points:
          description: Comma-separated list of URLs to be used for the CRL distribution
            points attribute. See also RFC 5280 Section 4.2.1.13.
          items:
            type: string
          type: array
        issuing_certificates:
          description: Comma-separated list of URLs to be used for the issuing certificate
            attribute. See also RFC 5280 Section 4.2.2.1.
          items:
            type: string
          type: array
        ocsp_servers:
          description: Comma-separated list of URLs to be used for the OCSP servers
            attribute. See also RFC 5280 Section 4.2.2.1.
          items:
            type: string
          type: array
      type: object
    PkiIntermediateCrossSignRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        add_basic_constraints: true
        key_type: rsa
        signature_bits: 1
        uri_sans:
        - uri_sans
        - uri_sans
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        key_ref: default
        common_name: common_name
        managed_key_name: managed_key_name
        exported: internal
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 6
        key_bits: 0
        key_name: key_name
        not_after: not_after
        organization:
        - organization
        - organization
        managed_key_id: managed_key_id
        postal_code:
        - postal_code
        - postal_code
      properties:
        add_basic_constraints:
          description: 'Whether to add a Basic Constraints extension with CA: true.
            Only needed as a workaround in some compatibility scenarios with Active
            Directory Certificate Services.'
          type: boolean
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        exported:
          description: Must be "internal", "exported" or "kms". If set to "exported",
            the generated private key will be returned. This is your *only* chance
            to retrieve the private key!
          enum:
          - internal
          - external
          - kms
          type: string
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
          x-vault-displayAttrs:
            value: 0
        key_name:
          description: Provide a name to the generated or existing key, the name must
            be unique across all keys and not be the reserved value 'default'
          type: string
        key_ref:
          default: default
          description: Reference to a existing key; either "default" for the configured
            default key, an identifier or the name assigned to the key.
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiIntermediateGenerateRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        add_basic_constraints: true
        key_type: rsa
        signature_bits: 1
        uri_sans:
        - uri_sans
        - uri_sans
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        key_ref: default
        common_name: common_name
        managed_key_name: managed_key_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 6
        key_bits: 0
        key_name: key_name
        not_after: not_after
        organization:
        - organization
        - organization
        managed_key_id: managed_key_id
        postal_code:
        - postal_code
        - postal_code
      properties:
        add_basic_constraints:
          description: 'Whether to add a Basic Constraints extension with CA: true.
            Only needed as a workaround in some compatibility scenarios with Active
            Directory Certificate Services.'
          type: boolean
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
          x-vault-displayAttrs:
            value: 0
        key_name:
          description: Provide a name to the generated or existing key, the name must
            be unique across all keys and not be the reserved value 'default'
          type: string
        key_ref:
          default: default
          description: Reference to a existing key; either "default" for the configured
            default key, an identifier or the name assigned to the key.
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiIntermediateSetSignedRequest:
      example:
        certificate: certificate
      properties:
        certificate:
          description: PEM-format certificate. This must be a CA certificate with
            a public key matching the previously-generated key from the generation
            endpoint. Additional parent CAs may be optionally appended to the bundle.
          type: string
      type: object
    PkiIssueRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        issuer_ref: default
        format: pem
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        uri_sans:
        - uri_sans
        - uri_sans
        remove_roots_from_chain: false
        ttl: 0
        not_after: not_after
        ip_sans:
        - ip_sans
        - ip_sans
        common_name: common_name
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. If email protection is enabled for the role, this may contain email
            addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If email protection is enabled
            in the role, this may be an email address.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_ref:
          default: default
          description: Reference to a existing issuer; either "default" for the configured
            default issuer, an identifier or the name assigned to the issuer.
          type: string
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        remove_roots_from_chain:
          default: false
          description: Whether or not to remove self-signed CA certificates in the
            output of the ca_chain field.
          type: boolean
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        ttl:
          description: The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the role max TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiIssuerIssueRequest:
      example:
        not_after: not_after
        other_sans:
        - other_sans
        - other_sans
        ip_sans:
        - ip_sans
        - ip_sans
        format: pem
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        uri_sans:
        - uri_sans
        - uri_sans
        common_name: common_name
        remove_roots_from_chain: false
        ttl: 0
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. If email protection is enabled for the role, this may contain email
            addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If email protection is enabled
            in the role, this may be an email address.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        remove_roots_from_chain:
          default: false
          description: Whether or not to remove self-signed CA certificates in the
            output of the ca_chain field.
          type: boolean
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        ttl:
          description: The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the role max TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiIssuerSignIntermediateRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        csr: csr
        skid: skid
        signature_bits: 1
        uri_sans:
        - uri_sans
        - uri_sans
        max_path_length: 0
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        use_csr_values: false
        common_name: common_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 6
        issuer_name: issuer_name
        not_after: not_after
        permitted_dns_domains:
        - permitted_dns_domains
        - permitted_dns_domains
        organization:
        - organization
        - organization
        postal_code:
        - postal_code
        - postal_code
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        csr:
          default: ""
          description: PEM-format CSR to be signed.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_name:
          description: Provide a name to the generated or existing issuer, the name
            must be unique across all issuers and not be the reserved value 'default'
          type: string
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        max_path_length:
          default: -1
          description: The maximum allowable path length
          type: integer
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        permitted_dns_domains:
          description: Domains for which this certificate is allowed to sign or issue
            child certificates. If set, all DNS names (subject and alt) on child certs
            must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Permitted DNS Domains
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        skid:
          default: ""
          description: Value for the Subject Key Identifier field (RFC 5280 Section
            4.2.1.2). This value should ONLY be used when cross-signing to mimic the
            existing certificate's SKID value; this is necessary to allow certain
            TLS implementations (such as OpenSSL) which use SKID/AKID matches in chain
            building to restrict possible valid chains. Specified as a string in hex
            format. Default is empty, allowing Vault to automatically calculate the
            SKID according to method one in the above RFC section.
          type: string
          x-vault-displayAttrs:
            value: ""
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_csr_values:
          default: false
          description: 'If true, then: 1) Subject information, including names and
            alternate names, will be preserved from the CSR rather than using values
            provided in the other parameters to this path; 2) Any key usages requested
            in the CSR will be added to the basic set of key usages used for CA certs
            signed by this path; for instance, the non-repudiation flag; 3) Extensions
            requested in the CSR will be copied into the issued certificate.'
          type: boolean
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiIssuerSignRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        csr: csr
        format: pem
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        uri_sans:
        - uri_sans
        - uri_sans
        remove_roots_from_chain: false
        ttl: 0
        not_after: not_after
        ip_sans:
        - ip_sans
        - ip_sans
        common_name: common_name
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. If email protection is enabled for the role, this may contain email
            addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If email protection is enabled
            in the role, this may be an email address.
          type: string
        csr:
          default: ""
          description: PEM-format CSR to be signed.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        remove_roots_from_chain:
          default: false
          description: Whether or not to remove self-signed CA certificates in the
            output of the ca_chain field.
          type: boolean
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        ttl:
          description: The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the role max TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiIssuerSignSelfIssuedRequest:
      example:
        certificate: certificate
        require_matching_certificate_algorithms: false
      properties:
        certificate:
          description: PEM-format self-issued certificate to be signed.
          type: string
        require_matching_certificate_algorithms:
          default: false
          description: If true, require the public key algorithm of the signer to
            match that of the self issued certificate.
          type: boolean
      type: object
    PkiIssuerSignVerbatimRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        csr: csr
        role: role
        key_usage:
        - key_usage
        - key_usage
        format: pem
        private_key_format: der
        signature_bits: 0
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        uri_sans:
        - uri_sans
        - uri_sans
        remove_roots_from_chain: false
        ttl: 6
        not_after: not_after
        ip_sans:
        - ip_sans
        - ip_sans
        common_name: common_name
        ext_key_usage:
        - ext_key_usage
        - ext_key_usage
        ext_key_usage_oids:
        - ext_key_usage_oids
        - ext_key_usage_oids
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. If email protection is enabled for the role, this may contain email
            addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If email protection is enabled
            in the role, this may be an email address.
          type: string
        csr:
          default: ""
          description: PEM-format CSR to be signed. Values will be taken verbatim
            from the CSR, except for basic constraints.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        ext_key_usage:
          default: []
          description: A comma-separated string or list of extended key usages. Valid
            values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage
            -- simply drop the "ExtKeyUsage" part of the name. To remove all key usages
            from being set, set this value to an empty list.
          items:
            type: string
          type: array
        ext_key_usage_oids:
          description: A comma-separated string or list of extended key usage oids.
          items:
            type: string
          type: array
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        key_usage:
          default:
          - DigitalSignature
          - KeyAgreement
          - KeyEncipherment
          description: A comma-separated string or list of key usages (not extended
            key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage
            -- simply drop the "KeyUsage" part of the name. To remove all key usages
            from being set, set this value to an empty list.
          items:
            type: string
          type: array
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        remove_roots_from_chain:
          default: false
          description: Whether or not to remove self-signed CA certificates in the
            output of the ca_chain field.
          type: boolean
        role:
          description: The desired role with configuration for this request
          type: string
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        ttl:
          description: The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the role max TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiIssuersGenerateIntermediateRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        add_basic_constraints: true
        key_type: rsa
        signature_bits: 1
        uri_sans:
        - uri_sans
        - uri_sans
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        key_ref: default
        common_name: common_name
        managed_key_name: managed_key_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 6
        key_bits: 0
        key_name: key_name
        not_after: not_after
        organization:
        - organization
        - organization
        managed_key_id: managed_key_id
        postal_code:
        - postal_code
        - postal_code
      properties:
        add_basic_constraints:
          description: 'Whether to add a Basic Constraints extension with CA: true.
            Only needed as a workaround in some compatibility scenarios with Active
            Directory Certificate Services.'
          type: boolean
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
          x-vault-displayAttrs:
            value: 0
        key_name:
          description: Provide a name to the generated or existing key, the name must
            be unique across all keys and not be the reserved value 'default'
          type: string
        key_ref:
          default: default
          description: Reference to a existing key; either "default" for the configured
            default key, an identifier or the name assigned to the key.
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiIssuersGenerateRootRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        key_type: rsa
        signature_bits: 5
        uri_sans:
        - uri_sans
        - uri_sans
        max_path_length: 6
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        key_ref: default
        common_name: common_name
        managed_key_name: managed_key_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 1
        issuer_name: issuer_name
        key_bits: 0
        key_name: key_name
        not_after: not_after
        permitted_dns_domains:
        - permitted_dns_domains
        - permitted_dns_domains
        organization:
        - organization
        - organization
        managed_key_id: managed_key_id
        postal_code:
        - postal_code
        - postal_code
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_name:
          description: Provide a name to the generated or existing issuer, the name
            must be unique across all issuers and not be the reserved value 'default'
          type: string
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
          x-vault-displayAttrs:
            value: 0
        key_name:
          description: Provide a name to the generated or existing key, the name must
            be unique across all keys and not be the reserved value 'default'
          type: string
        key_ref:
          default: default
          description: Reference to a existing key; either "default" for the configured
            default key, an identifier or the name assigned to the key.
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
        max_path_length:
          default: -1
          description: The maximum allowable path length
          type: integer
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        permitted_dns_domains:
          description: Domains for which this certificate is allowed to sign or issue
            child certificates. If set, all DNS names (subject and alt) on child certs
            must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Permitted DNS Domains
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiJsonRequest:
      example:
        crl_distribution_points:
        - crl_distribution_points
        - crl_distribution_points
        issuing_certificates:
        - issuing_certificates
        - issuing_certificates
        revocation_signature_algorithm: revocation_signature_algorithm
        issuer_ref: default
        leaf_not_after_behavior: err
        usage:
        - usage
        - usage
        manual_chain:
        - manual_chain
        - manual_chain
        ocsp_servers:
        - ocsp_servers
        - ocsp_servers
        issuer_name: issuer_name
      properties:
        crl_distribution_points:
          description: Comma-separated list of URLs to be used for the CRL distribution
            points attribute. See also RFC 5280 Section 4.2.1.13.
          items:
            type: string
          type: array
        issuer_name:
          description: Provide a name to the generated or existing issuer, the name
            must be unique across all issuers and not be the reserved value 'default'
          type: string
        issuer_ref:
          default: default
          description: Reference to a existing issuer; either "default" for the configured
            default issuer, an identifier or the name assigned to the issuer.
          type: string
        issuing_certificates:
          description: Comma-separated list of URLs to be used for the issuing certificate
            attribute. See also RFC 5280 Section 4.2.2.1.
          items:
            type: string
          type: array
        leaf_not_after_behavior:
          default: err
          description: 'Behavior of leaf''s NotAfter fields: "err" to error if the
            computed NotAfter date exceeds that of this issuer; "truncate" to silently
            truncate to that of this issuer; or "permit" to allow this issuance to
            succeed (with NotAfter exceeding that of an issuer). Note that not all
            values will results in certificates that can be validated through the
            entire validity period. It is suggested to use "truncate" for intermediate
            CAs and "permit" only for root CAs.'
          type: string
        manual_chain:
          description: Chain of issuer references to use to build this issuer's computed
            CAChain field, when non-empty.
          items:
            type: string
          type: array
        ocsp_servers:
          description: Comma-separated list of URLs to be used for the OCSP servers
            attribute. See also RFC 5280 Section 4.2.2.1.
          items:
            type: string
          type: array
        revocation_signature_algorithm:
          default: ""
          description: Which x509.SignatureAlgorithm name to use for signing CRLs.
            This parameter allows differentiation between PKCS#1v1.5 and PSS keys
            and choice of signature hash algorithm. The default (empty string) value
            is for Go to select the signature algorithm. This can fail if the underlying
            key does not support the requested signature algorithm, which may not
            be known at modification time (such as with PKCS#11 managed RSA keys).
          type: string
        usage:
          default:
          - read-only
          - issuing-certificates
          - crl-signing
          - ocsp-signing
          description: Comma-separated list (or string slice) of usages for this issuer;
            valid values are "read-only", "issuing-certificates", "crl-signing", and
            "ocsp-signing". Multiple values may be specified. Read-only is implicit
            and always set.
          items:
            type: string
          type: array
      type: object
    PkiKeyRequest:
      example:
        key_name: key_name
      properties:
        key_name:
          description: Human-readable name for this key.
          type: string
      type: object
    PkiKeysImportRequest:
      example:
        key_name: key_name
        pem_bundle: pem_bundle
      properties:
        key_name:
          description: Optional name to be used for this key
          type: string
        pem_bundle:
          description: PEM-format, unencrypted secret key
          type: string
      type: object
    PkiKmsRequest:
      example:
        key_bits: 0
        key_name: key_name
        key_type: rsa
        managed_key_id: managed_key_id
        managed_key_name: managed_key_name
      properties:
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
        key_name:
          description: Optional name to be used for this key
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
      type: object
    PkiRevokeRequest:
      example:
        certificate: certificate
        serial_number: serial_number
      properties:
        certificate:
          description: Certificate to revoke in PEM format; must be signed by an issuer
            in this mount.
          type: string
        serial_number:
          description: Certificate serial number, in colon- or hyphen-separated octal
          type: string
      type: object
    PkiRevokeWithKeyRequest:
      example:
        certificate: certificate
        private_key: private_key
        serial_number: serial_number
      properties:
        certificate:
          description: Certificate to revoke in PEM format; must be signed by an issuer
            in this mount.
          type: string
        private_key:
          description: Key to use to verify revocation permission; must be in PEM
            format.
          type: string
        serial_number:
          description: Certificate serial number, in colon- or hyphen-separated octal
          type: string
      type: object
    PkiRolesRequest:
      example:
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        allow_subdomains: true
        allowed_domains:
        - allowed_domains
        - allowed_domains
        key_type: rsa
        key_usage:
        - key_usage
        - key_usage
        max_ttl: 6
        issuer_ref: default
        allowed_uri_sans_template: false
        signature_bits: 5
        allow_bare_domains: true
        allowed_other_sans:
        - allowed_other_sans
        - allowed_other_sans
        province:
        - province
        - province
        allow_localhost: true
        enforce_hostnames: true
        allowed_uri_sans:
        - allowed_uri_sans
        - allowed_uri_sans
        backend: backend
        email_protection_flag: true
        no_store: true
        allowed_serial_numbers:
        - allowed_serial_numbers
        - allowed_serial_numbers
        ou:
        - ou
        - ou
        allow_any_name: true
        locality:
        - locality
        - locality
        allowed_domains_template: false
        basic_constraints_valid_for_non_ca: true
        server_flag: true
        use_pss: false
        generate_lease: true
        ttl: 5
        use_csr_sans: true
        not_before_duration: 1
        key_bits: 0
        not_after: not_after
        require_cn: true
        allow_ip_sans: true
        code_signing_flag: true
        policy_identifiers:
        - policy_identifiers
        - policy_identifiers
        allow_glob_domains: true
        organization:
        - organization
        - organization
        cn_validations:
        - cn_validations
        - cn_validations
        allow_wildcard_certificates: true
        use_csr_common_name: true
        ext_key_usage:
        - ext_key_usage
        - ext_key_usage
        postal_code:
        - postal_code
        - postal_code
        ext_key_usage_oids:
        - ext_key_usage_oids
        - ext_key_usage_oids
        client_flag: true
      properties:
        allow_any_name:
          description: If set, clients can request certificates for any domain, regardless
            of allowed_domains restrictions. See the documentation for more information.
          type: boolean
        allow_bare_domains:
          description: If set, clients can request certificates for the base domains
            themselves, e.g. "example.com" of domains listed in allowed_domains. This
            is a separate option as in some cases this can be considered a security
            threat. See the documentation for more information.
          type: boolean
        allow_glob_domains:
          description: If set, domains specified in allowed_domains can include shell-style
            glob patterns, e.g. "ftp*.example.com". See the documentation for more
            information.
          type: boolean
        allow_ip_sans:
          default: true
          description: If set, IP Subject Alternative Names are allowed. Any valid
            IP is accepted and No authorization checking is performed.
          type: boolean
          x-vault-displayAttrs:
            name: Allow IP Subject Alternative Names
            value: true
        allow_localhost:
          default: true
          description: Whether to allow "localhost" and "localdomain" as a valid common
            name in a request, independent of allowed_domains value.
          type: boolean
          x-vault-displayAttrs:
            value: true
        allow_subdomains:
          description: If set, clients can request certificates for subdomains of
            domains listed in allowed_domains, including wildcard subdomains. See
            the documentation for more information.
          type: boolean
        allow_wildcard_certificates:
          default: true
          description: If set, allows certificates with wildcards in the common name
            to be issued, conforming to RFC 6125's Section 6.4.3; e.g., "*.example.net"
            or "b*z.example.net". See the documentation for more information.
          type: boolean
        allowed_domains:
          description: Specifies the domains this role is allowed to issue certificates
            for. This is used with the allow_bare_domains, allow_subdomains, and allow_glob_domains
            to determine matches for the common name, DNS-typed SAN entries, and Email-typed
            SAN entries of certificates. See the documentation for more information.
            This parameter accepts a comma-separated string or list of domains.
          items:
            type: string
          type: array
        allowed_domains_template:
          default: false
          description: If set, Allowed domains can be specified using identity template
            policies. Non-templated domains are also permitted.
          type: boolean
        allowed_other_sans:
          description: If set, an array of allowed other names to put in SANs. These
            values support globbing and must be in the format <oid>;<type>:<value>.
            Currently only "utf8" is a valid type. All values, including globbing
            values, must use this syntax, with the exception being a single "*" which
            allows any OID and any value (but type must still be utf8).
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Allowed Other Subject Alternative Names
        allowed_serial_numbers:
          description: If set, an array of allowed serial numbers to put in Subject.
            These values support globbing.
          items:
            type: string
          type: array
        allowed_uri_sans:
          description: If set, an array of allowed URIs for URI Subject Alternative
            Names. Any valid URI is accepted, these values support globbing.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Allowed URI Subject Alternative Names
        allowed_uri_sans_template:
          default: false
          description: If set, Allowed URI SANs can be specified using identity template
            policies. Non-templated URI SANs are also permitted.
          type: boolean
        backend:
          description: Backend Type
          type: string
        basic_constraints_valid_for_non_ca:
          description: Mark Basic Constraints valid when issuing non-CA certificates.
          type: boolean
          x-vault-displayAttrs:
            name: Basic Constraints Valid for Non-CA
        client_flag:
          default: true
          description: If set, certificates are flagged for client auth use. Defaults
            to true. See also RFC 5280 Section 4.2.1.12.
          type: boolean
          x-vault-displayAttrs:
            value: true
        cn_validations:
          default:
          - email
          - hostname
          description: List of allowed validations to run against the Common Name
            field. Values can include 'email' to validate the CN is a email address,
            'hostname' to validate the CN is a valid hostname (potentially including
            wildcards). When multiple validations are specified, these take OR semantics
            (either email OR hostname are allowed). The special value 'disabled' allows
            disabling all CN name validations, allowing for arbitrary non-Hostname,
            non-Email address CNs.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Common Name Validations
        code_signing_flag:
          description: If set, certificates are flagged for code signing use. Defaults
            to false. See also RFC 5280 Section 4.2.1.12.
          type: boolean
        country:
          description: If set, Country will be set to this value in certificates issued
            by this role.
          items:
            type: string
          type: array
        email_protection_flag:
          description: If set, certificates are flagged for email protection use.
            Defaults to false. See also RFC 5280 Section 4.2.1.12.
          type: boolean
        enforce_hostnames:
          default: true
          description: If set, only valid host names are allowed for CN and DNS SANs,
            and the host part of email addresses. Defaults to true.
          type: boolean
          x-vault-displayAttrs:
            value: true
        ext_key_usage:
          default: []
          description: A comma-separated string or list of extended key usages. Valid
            values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage
            -- simply drop the "ExtKeyUsage" part of the name. To remove all key usages
            from being set, set this value to an empty list. See also RFC 5280 Section
            4.2.1.12.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Extended Key Usage
        ext_key_usage_oids:
          description: A comma-separated string or list of extended key usage oids.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Extended Key Usage OIDs
        generate_lease:
          description: If set, certificates issued/signed against this role will have
            Vault leases attached to them. Defaults to "false". Certificates can be
            added to the CRL by "vault revoke <lease_id>" when certificates are associated
            with leases. It can also be done using the "pki/revoke" endpoint. However,
            when lease generation is disabled, invoking "pki/revoke" would be the
            only way to add the certificates to the CRL. When large number of certificates
            are generated with long lifetimes, it is recommended that lease generation
            be disabled, as large amount of leases adversely affect the startup time
            of Vault.
          type: boolean
        issuer_ref:
          default: default
          description: Reference to the issuer used to sign requests serviced by this
            role.
          type: string
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec", "ed25519"
            and "any" are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          - any
          type: string
        key_usage:
          default:
          - DigitalSignature
          - KeyAgreement
          - KeyEncipherment
          description: A comma-separated string or list of key usages (not extended
            key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage
            -- simply drop the "KeyUsage" part of the name. To remove all key usages
            from being set, set this value to an empty list. See also RFC 5280 Section
            4.2.1.3.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            value: DigitalSignature,KeyAgreement,KeyEncipherment
        locality:
          description: If set, Locality will be set to this value in certificates
            issued by this role.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        max_ttl:
          description: The maximum allowed lease duration. If not set, defaults to
            the system maximum lease TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Max TTL
        no_store:
          description: If set, certificates issued/signed against this role will not
            be stored in the storage backend. This can improve performance when issuing
            large numbers of certificates. However, certificates issued in this way
            cannot be enumerated or revoked, so this option is recommended only for
            certificates that are non-sensitive, or extremely short-lived. This option
            implies a value of "false" for "generate_lease".
          type: boolean
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ.
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value in certificates
            issued by this role.
          items:
            type: string
          type: array
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value in
            certificates issued by this role.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Organizational Unit
        policy_identifiers:
          description: A comma-separated string or list of policy OIDs, or a JSON
            list of qualified policy information, which must include an oid, and may
            include a notice and/or cps url, using the form [{"oid"="1.3.6.1.4.1.7.8","notice"="I
            am a user Notice"}, {"oid"="1.3.6.1.4.1.44947.1.2.4 ","cps"="https://example.com"}].
          items:
            type: string
          type: array
        postal_code:
          description: If set, Postal Code will be set to this value in certificates
            issued by this role.
          items:
            type: string
          type: array
        province:
          description: If set, Province will be set to this value in certificates
            issued by this role.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        require_cn:
          default: true
          description: If set to false, makes the 'common_name' field optional while
            generating a certificate.
          type: boolean
          x-vault-displayAttrs:
            name: Require Common Name
        server_flag:
          default: true
          description: If set, certificates are flagged for server auth use. Defaults
            to true. See also RFC 5280 Section 4.2.1.12.
          type: boolean
          x-vault-displayAttrs:
            value: true
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
        street_address:
          description: If set, Street Address will be set to this value in certificates
            issued by this role.
          items:
            type: string
          type: array
        ttl:
          description: The lease duration (validity period of the certificate) if
            no specific lease duration is requested. The lease duration controls the
            expiration of certificates issued by this backend. Defaults to the system
            default value or the value of max_ttl, whichever is shorter.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        use_csr_common_name:
          default: true
          description: If set, when used with a signing profile, the common name in
            the CSR will be used. This does *not* include any requested Subject Alternative
            Names; use use_csr_sans for that. Defaults to true.
          type: boolean
          x-vault-displayAttrs:
            name: Use CSR Common Name
            value: true
        use_csr_sans:
          default: true
          description: If set, when used with a signing profile, the SANs in the CSR
            will be used. This does *not* include the Common Name (cn); use use_csr_common_name
            for that. Defaults to true.
          type: boolean
          x-vault-displayAttrs:
            name: Use CSR Subject Alternative Names
            value: true
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiRootGenerateRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        key_type: rsa
        signature_bits: 5
        uri_sans:
        - uri_sans
        - uri_sans
        max_path_length: 6
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        key_ref: default
        common_name: common_name
        managed_key_name: managed_key_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 1
        issuer_name: issuer_name
        key_bits: 0
        key_name: key_name
        not_after: not_after
        permitted_dns_domains:
        - permitted_dns_domains
        - permitted_dns_domains
        organization:
        - organization
        - organization
        managed_key_id: managed_key_id
        postal_code:
        - postal_code
        - postal_code
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_name:
          description: Provide a name to the generated or existing issuer, the name
            must be unique across all issuers and not be the reserved value 'default'
          type: string
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
          x-vault-displayAttrs:
            value: 0
        key_name:
          description: Provide a name to the generated or existing key, the name must
            be unique across all keys and not be the reserved value 'default'
          type: string
        key_ref:
          default: default
          description: Reference to a existing key; either "default" for the configured
            default key, an identifier or the name assigned to the key.
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
        max_path_length:
          default: -1
          description: The maximum allowable path length
          type: integer
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        permitted_dns_domains:
          description: Domains for which this certificate is allowed to sign or issue
            child certificates. If set, all DNS names (subject and alt) on child certs
            must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Permitted DNS Domains
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiRootReplaceRequest:
      example:
        default: next
      properties:
        default:
          default: next
          description: Reference (name or identifier) to the default issuer.
          type: string
      type: object
    PkiRootRotateRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        key_type: rsa
        signature_bits: 5
        uri_sans:
        - uri_sans
        - uri_sans
        max_path_length: 6
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        key_ref: default
        common_name: common_name
        managed_key_name: managed_key_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 1
        issuer_name: issuer_name
        key_bits: 0
        key_name: key_name
        not_after: not_after
        permitted_dns_domains:
        - permitted_dns_domains
        - permitted_dns_domains
        organization:
        - organization
        - organization
        managed_key_id: managed_key_id
        postal_code:
        - postal_code
        - postal_code
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_name:
          description: Provide a name to the generated or existing issuer, the name
            must be unique across all issuers and not be the reserved value 'default'
          type: string
        key_bits:
          default: 0
          description: 'The number of bits to use. Allowed values are 0 (universal
            default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type:
            224, 256 (default), 384, or 521; ignored with ed25519.'
          type: integer
          x-vault-displayAttrs:
            value: 0
        key_name:
          description: Provide a name to the generated or existing key, the name must
            be unique across all keys and not be the reserved value 'default'
          type: string
        key_ref:
          default: default
          description: Reference to a existing key; either "default" for the configured
            default key, an identifier or the name assigned to the key.
          type: string
        key_type:
          default: rsa
          description: The type of key to use; defaults to RSA. "rsa" "ec" and "ed25519"
            are the only valid values.
          enum:
          - rsa
          - ec
          - ed25519
          type: string
          x-vault-displayAttrs:
            value: rsa
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        managed_key_id:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_name is
            required. Ignored for other types.
          type: string
        managed_key_name:
          description: The name of the managed key to use when the exported type is
            kms. When kms type is the key type, this field or managed_key_id is required.
            Ignored for other types.
          type: string
        max_path_length:
          default: -1
          description: The maximum allowable path length
          type: integer
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        permitted_dns_domains:
          description: Domains for which this certificate is allowed to sign or issue
            child certificates. If set, all DNS names (subject and alt) on child certs
            must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Permitted DNS Domains
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiRootSignIntermediateRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        country:
        - country
        - country
        street_address:
        - street_address
        - street_address
        csr: csr
        skid: skid
        issuer_ref: default
        signature_bits: 1
        uri_sans:
        - uri_sans
        - uri_sans
        max_path_length: 0
        province:
        - province
        - province
        ip_sans:
        - ip_sans
        - ip_sans
        use_csr_values: false
        common_name: common_name
        ou:
        - ou
        - ou
        format: pem
        locality:
        - locality
        - locality
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        ttl: 5
        not_before_duration: 6
        issuer_name: issuer_name
        not_after: not_after
        permitted_dns_domains:
        - permitted_dns_domains
        - permitted_dns_domains
        organization:
        - organization
        - organization
        postal_code:
        - postal_code
        - postal_code
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. May contain both DNS names and email addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If not specified when signing,
            the common name will be taken from the CSR; other names must still be
            specified in alt_names or ip_sans.
          type: string
        country:
          description: If set, Country will be set to this value.
          items:
            type: string
          type: array
        csr:
          default: ""
          description: PEM-format CSR to be signed.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_name:
          description: Provide a name to the generated or existing issuer, the name
            must be unique across all issuers and not be the reserved value 'default'
          type: string
        issuer_ref:
          default: default
          description: Reference to a existing issuer; either "default" for the configured
            default issuer, an identifier or the name assigned to the issuer.
          type: string
        locality:
          description: If set, Locality will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Locality/City
        max_path_length:
          default: -1
          description: The maximum allowable path length
          type: integer
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        not_before_duration:
          default: 30
          description: The duration before now which the certificate needs to be backdated
            by.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 30
        organization:
          description: If set, O (Organization) will be set to this value.
          items:
            type: string
          type: array
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        ou:
          description: If set, OU (OrganizationalUnit) will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: OU (Organizational Unit)
        permitted_dns_domains:
          description: Domains for which this certificate is allowed to sign or issue
            child certificates. If set, all DNS names (subject and alt) on child certs
            must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Permitted DNS Domains
        postal_code:
          description: If set, Postal Code will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Postal Code
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        province:
          description: If set, Province will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Province/State
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        skid:
          default: ""
          description: Value for the Subject Key Identifier field (RFC 5280 Section
            4.2.1.2). This value should ONLY be used when cross-signing to mimic the
            existing certificate's SKID value; this is necessary to allow certain
            TLS implementations (such as OpenSSL) which use SKID/AKID matches in chain
            building to restrict possible valid chains. Specified as a string in hex
            format. Default is empty, allowing Vault to automatically calculate the
            SKID according to method one in the above RFC section.
          type: string
          x-vault-displayAttrs:
            value: ""
        street_address:
          description: If set, Street Address will be set to this value.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Street Address
        ttl:
          description: 'The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the mount max TTL. Note:
            this only has an effect when generating a CA cert or signing a CA cert,
            not when generating a CSR for an intermediate CA.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_csr_values:
          default: false
          description: 'If true, then: 1) Subject information, including names and
            alternate names, will be preserved from the CSR rather than using values
            provided in the other parameters to this path; 2) Any key usages requested
            in the CSR will be added to the basic set of key usages used for CA certs
            signed by this path; for instance, the non-repudiation flag; 3) Extensions
            requested in the CSR will be copied into the issued certificate.'
          type: boolean
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiRootSignSelfIssuedRequest:
      example:
        issuer_ref: default
        certificate: certificate
        require_matching_certificate_algorithms: false
      properties:
        certificate:
          description: PEM-format self-issued certificate to be signed.
          type: string
        issuer_ref:
          default: default
          description: Reference to a existing issuer; either "default" for the configured
            default issuer, an identifier or the name assigned to the issuer.
          type: string
        require_matching_certificate_algorithms:
          default: false
          description: If true, require the public key algorithm of the signer to
            match that of the self issued certificate.
          type: boolean
      type: object
    PkiSignRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        csr: csr
        issuer_ref: default
        format: pem
        private_key_format: der
        alt_names: alt_names
        serial_number: serial_number
        exclude_cn_from_sans: false
        uri_sans:
        - uri_sans
        - uri_sans
        remove_roots_from_chain: false
        ttl: 0
        not_after: not_after
        ip_sans:
        - ip_sans
        - ip_sans
        common_name: common_name
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. If email protection is enabled for the role, this may contain email
            addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If email protection is enabled
            in the role, this may be an email address.
          type: string
        csr:
          default: ""
          description: PEM-format CSR to be signed.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_ref:
          default: default
          description: Reference to a existing issuer; either "default" for the configured
            default issuer, an identifier or the name assigned to the issuer.
          type: string
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        remove_roots_from_chain:
          default: false
          description: Whether or not to remove self-signed CA certificates in the
            output of the ca_chain field.
          type: boolean
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        ttl:
          description: The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the role max TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
      type: object
    PkiSignVerbatimRequest:
      example:
        other_sans:
        - other_sans
        - other_sans
        csr: csr
        role: role
        key_usage:
        - key_usage
        - key_usage
        issuer_ref: default
        format: pem
        private_key_format: der
        signature_bits: 0
        alt_names: alt_names
        serial_number: serial_number
        use_pss: false
        exclude_cn_from_sans: false
        uri_sans:
        - uri_sans
        - uri_sans
        remove_roots_from_chain: false
        ttl: 6
        not_after: not_after
        ip_sans:
        - ip_sans
        - ip_sans
        common_name: common_name
        ext_key_usage:
        - ext_key_usage
        - ext_key_usage
        ext_key_usage_oids:
        - ext_key_usage_oids
        - ext_key_usage_oids
      properties:
        alt_names:
          description: The requested Subject Alternative Names, if any, in a comma-delimited
            list. If email protection is enabled for the role, this may contain email
            addresses.
          type: string
          x-vault-displayAttrs:
            name: DNS/Email Subject Alternative Names (SANs)
        common_name:
          description: The requested common name; if you want more than one, specify
            the alternative names in the alt_names map. If email protection is enabled
            in the role, this may be an email address.
          type: string
        csr:
          default: ""
          description: PEM-format CSR to be signed. Values will be taken verbatim
            from the CSR, except for basic constraints.
          type: string
        exclude_cn_from_sans:
          default: false
          description: If true, the Common Name will not be included in DNS or Email
            Subject Alternate Names. Defaults to false (CN is included).
          type: boolean
          x-vault-displayAttrs:
            name: Exclude Common Name from Subject Alternative Names (SANs)
        ext_key_usage:
          default: []
          description: A comma-separated string or list of extended key usages. Valid
            values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage
            -- simply drop the "ExtKeyUsage" part of the name. To remove all key usages
            from being set, set this value to an empty list.
          items:
            type: string
          type: array
        ext_key_usage_oids:
          description: A comma-separated string or list of extended key usage oids.
          items:
            type: string
          type: array
        format:
          default: pem
          description: Format for returned data. Can be "pem", "der", or "pem_bundle".
            If "pem_bundle", any private key and issuing cert will be appended to
            the certificate pem. If "der", the value will be base64 encoded. Defaults
            to "pem".
          enum:
          - pem
          - der
          - pem_bundle
          type: string
          x-vault-displayAttrs:
            value: pem
        ip_sans:
          description: The requested IP SANs, if any, in a comma-delimited list
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: IP Subject Alternative Names (SANs)
        issuer_ref:
          default: default
          description: Reference to a existing issuer; either "default" for the configured
            default issuer, an identifier or the name assigned to the issuer.
          type: string
        key_usage:
          default:
          - DigitalSignature
          - KeyAgreement
          - KeyEncipherment
          description: A comma-separated string or list of key usages (not extended
            key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage
            -- simply drop the "KeyUsage" part of the name. To remove all key usages
            from being set, set this value to an empty list.
          items:
            type: string
          type: array
        not_after:
          description: Set the not after field of the certificate with specified date
            value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ
          type: string
        other_sans:
          description: Requested other SANs, in an array with the format <oid>;UTF8:<utf8
            string value> for each entry.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Other SANs
        private_key_format:
          default: der
          description: Format for the returned private key. Generally the default
            will be controlled by the "format" parameter as either base64-encoded
            DER or PEM-encoded DER. However, this can be set to "pkcs8" to have the
            returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8
            instead. Defaults to "der".
          enum:
          - ""
          - der
          - pem
          - pkcs8
          type: string
          x-vault-displayAttrs:
            value: der
        remove_roots_from_chain:
          default: false
          description: Whether or not to remove self-signed CA certificates in the
            output of the ca_chain field.
          type: boolean
        role:
          description: The desired role with configuration for this request
          type: string
        serial_number:
          description: The Subject's requested serial number, if any. See RFC 4519
            Section 2.31 'serialNumber' for a description of this field. If you want
            more than one, specify alternative names in the alt_names map using OID
            2.5.4.5. This has no impact on the final certificate's Serial Number field.
          type: string
        signature_bits:
          default: 0
          description: The number of bits to use in the signature algorithm; accepts
            256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults
            to 0 to automatically detect based on key length (SHA-2-256 for RSA keys,
            and matching the curve size for NIST P-Curves).
          type: integer
          x-vault-displayAttrs:
            value: 0
        ttl:
          description: The requested Time To Live for the certificate; sets the expiration
            date. If not specified the role default, backend default, or system default
            TTL is used, in that order. Cannot be larger than the role max TTL.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
        uri_sans:
          description: The requested URI SANs, if any, in a comma-delimited list.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: URI Subject Alternative Names (SANs)
        use_pss:
          default: false
          description: Whether or not to use PSS signatures when using a RSA key-type
            issuer. Defaults to false.
          type: boolean
      type: object
    PkiTidyRequest:
      example:
        pause_duration: 0s
        tidy_revoked_cert_issuer_associations: true
        tidy_revocation_list: true
        tidy_cert_store: true
        tidy_revoked_certs: true
        safety_buffer: 0
      properties:
        pause_duration:
          default: 0s
          description: The amount of time to wait between processing certificates.
            This allows operators to change the execution profile of tidy to take
            consume less resources by slowing down how long it takes to run. Note
            that the entire list of certificates will be stored in memory during the
            entire tidy operation, but resources to read/process/update existing entries
            will be spread out over a greater period of time. By default this is zero
            seconds.
          type: string
        safety_buffer:
          default: 259200
          description: The amount of extra time that must have passed beyond certificate
            expiration before it is removed from the backend storage and/or revocation
            list. Defaults to 72 hours.
          format: seconds
          type: integer
        tidy_cert_store:
          description: Set to true to enable tidying up the certificate store
          type: boolean
        tidy_revocation_list:
          description: Deprecated; synonym for 'tidy_revoked_certs
          type: boolean
        tidy_revoked_cert_issuer_associations:
          description: Set to true to validate issuer associations on revocation entries.
            This helps increase the performance of CRL building and OCSP responses.
          type: boolean
        tidy_revoked_certs:
          description: Set to true to expire all revoked and expired certificates,
            removing them both from the CRL and from storage. The CRL will be rotated
            if this causes any values to be removed.
          type: boolean
      type: object
    RabbitmqConfigConnectionRequest:
      example:
        verify_connection: true
        connection_uri: connection_uri
        password: password
        password_policy: password_policy
        username_template: username_template
        username: username
      properties:
        connection_uri:
          description: RabbitMQ Management URI
          type: string
        password:
          description: Password of the provided RabbitMQ management user
          type: string
        password_policy:
          description: Name of the password policy to use to generate passwords for
            dynamic credentials.
          type: string
        username:
          description: Username of a RabbitMQ management administrator
          type: string
        username_template:
          description: Template describing how dynamic usernames are generated.
          type: string
        verify_connection:
          default: true
          description: If set, connection_uri is verified by actually connecting to
            the RabbitMQ management API
          type: boolean
      type: object
    RabbitmqConfigLeaseRequest:
      example:
        max_ttl: 0
        ttl: 6
      properties:
        max_ttl:
          default: 0
          description: Duration after which the issued credentials should not be allowed
            to be renewed
          format: seconds
          type: integer
        ttl:
          default: 0
          description: Duration before which the issued credentials needs renewal
          format: seconds
          type: integer
      type: object
    RabbitmqRolesRequest:
      example:
        vhosts: vhosts
        vhost_topics: vhost_topics
        tags: tags
      properties:
        tags:
          description: Comma-separated list of tags for this role.
          type: string
        vhost_topics:
          description: A nested map of virtual hosts and exchanges to topic permissions.
          type: string
        vhosts:
          description: A map of virtual hosts to permissions.
          type: string
      type: object
    RadiusConfigRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        token_num_uses: 7
        token_explicit_max_ttl: 5
        token_period: 9
        unregistered_user_policies: unregistered_user_policies
        token_max_ttl: 2
        nas_port: 6
        secret: secret
        token_type: default-service
        nas_identifier: nas_identifier
        token_no_default_policy: true
        dial_timeout: 0
        token_ttl: 3
        port: 1
        host: host
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
        read_timeout: 5
      properties:
        dial_timeout:
          default: 10
          description: 'Number of seconds before connect times out (default: 10)'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 10
        host:
          description: RADIUS server host
          type: string
          x-vault-displayAttrs:
            name: Host
        nas_identifier:
          default: ""
          description: RADIUS NAS Identifier field (optional)
          type: string
          x-vault-displayAttrs:
            name: NAS Identifier
        nas_port:
          default: 10
          description: 'RADIUS NAS port field (default: 10)'
          type: integer
          x-vault-displayAttrs:
            name: NAS Port
            value: 10
        port:
          default: 1812
          description: 'RADIUS server port (default: 1812)'
          type: integer
          x-vault-displayAttrs:
            value: 1812
        read_timeout:
          default: 10
          description: 'Number of seconds before response times out (default: 10)'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            value: 10
        secret:
          description: Secret shared with the RADIUS server
          type: string
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies. This will apply to all tokens
            generated by this auth method, in addition to any configured for specific
            users.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        unregistered_user_policies:
          default: ""
          description: 'Comma-separated list of policies to grant upon successful
            RADIUS authentication of an unregisted user (default: empty)'
          type: string
          x-vault-displayAttrs:
            name: Policies for unregistered users
      type: object
    RadiusLoginRequest:
      example:
        password: password
        urlusername: urlusername
        username: username
      properties:
        password:
          description: Password for this user.
          type: string
        urlusername:
          description: Username to be used for login. (URL parameter)
          type: string
        username:
          description: Username to be used for login. (POST request body)
          type: string
      type: object
    RadiusUsersRequest:
      example:
        policies:
        - policies
        - policies
      properties:
        policies:
          description: Comma-separated list of policies associated to the user.
          items:
            type: string
          type: array
      type: object
    SshConfigCaRequest:
      example:
        key_bits: 0
        public_key: public_key
        key_type: ssh-rsa
        private_key: private_key
        generate_signing_key: true
      properties:
        generate_signing_key:
          default: true
          description: Generate SSH key pair internally rather than use the private_key
            and public_key fields.
          type: boolean
        key_bits:
          default: 0
          description: Specifies the desired key bits when generating variable-length
            keys (such as when key_type="ssh-rsa") or which NIST P-curve to use when
            key_type="ec" (256, 384, or 521).
          type: integer
        key_type:
          default: ssh-rsa
          description: Specifies the desired key type when generating; could be a
            OpenSSH key type identifier (ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384,
            ecdsa-sha2-nistp521, or ssh-ed25519) or an algorithm (rsa, ec, ed25519).
          type: string
        private_key:
          description: Private half of the SSH key that will be used to sign certificates.
          type: string
        public_key:
          description: Public half of the SSH key that will be used to sign certificates.
          type: string
      type: object
    SshConfigZeroaddressRequest:
      example:
        roles:
        - roles
        - roles
      properties:
        roles:
          description: '[Required] Comma separated list of role names which allows
            credentials to be requested for any IP address. CIDR blocks previously
            registered under these roles will be ignored.'
          items:
            type: string
          type: array
      type: object
    SshCredsRequest:
      example:
        ip: ip
        username: username
      properties:
        ip:
          description: '[Required] IP of the remote host'
          type: string
        username:
          description: '[Optional] Username in remote host'
          type: string
      type: object
    SshIssueRequest:
      example:
        key_bits: 0
        cert_type: user
        extensions: '{}'
        key_type: rsa
        critical_options: '{}'
        key_id: key_id
        valid_principals: valid_principals
        ttl: 6
      properties:
        cert_type:
          default: user
          description: Type of certificate to be created; either "user" or "host".
          type: string
        critical_options:
          description: Critical options that the certificate should be signed for.
          format: map
          type: object
        extensions:
          description: Extensions that the certificate should be signed for.
          format: map
          type: object
        key_bits:
          default: 0
          description: Specifies the number of bits to use for the generated keys.
          type: integer
        key_id:
          description: Key id that the created certificate should have. If not specified,
            the display name of the token will be used.
          type: string
        key_type:
          default: rsa
          description: Specifies the desired key type; must be `rsa`, `ed25519` or
            `ec`
          type: string
        ttl:
          description: The requested Time To Live for the SSH certificate; sets the
            expiration date. If not specified the role default, backend default, or
            system default TTL is used, in that order. Cannot be later than the role
            max TTL.
          format: seconds
          type: integer
        valid_principals:
          description: Valid principals, either usernames or hostnames, that the certificate
            should be signed for.
          type: string
      type: object
    SshKeysRequest:
      example:
        key: key
      properties:
        key:
          description: '[Required] SSH private key with super user privileges in host'
          type: string
      type: object
    SshLookupRequest:
      example:
        ip: ip
      properties:
        ip:
          description: '[Required] IP address of remote host'
          type: string
      type: object
    SshRolesRequest:
      example:
        allow_subdomains: true
        allow_host_certificates: false
        allowed_domains: allowed_domains
        key_type: otp
        max_ttl: 6
        default_critical_options: '{}'
        allow_bare_domains: true
        allowed_users_template: false
        install_script: install_script
        default_user_template: false
        allowed_extensions: allowed_extensions
        allowed_user_key_lengths: '{}'
        algorithm_signer: algorithm_signer
        key: key
        allow_user_certificates: false
        default_extensions_template: false
        allowed_domains_template: false
        exclude_cidr_list: exclude_cidr_list
        ttl: 5
        not_before_duration: 1
        allowed_critical_options: allowed_critical_options
        key_bits: 0
        key_id_format: key_id_format
        key_option_specs: key_option_specs
        allowed_users: allowed_users
        allow_user_key_ids: true
        port: 5
        default_user: default_user
        default_extensions: '{}'
        cidr_list: cidr_list
        admin_user: admin_user
      properties:
        admin_user:
          description: '[Required for Dynamic type] [Not applicable for OTP type]
            [Not applicable for CA type] Admin user at remote host. The shared key
            being registered should be for this user and should have root privileges.
            Everytime a dynamic credential is being generated for other users, Vault
            uses this admin username to login to remote host and install the generated
            credential for the other user.'
          type: string
          x-vault-displayAttrs:
            name: Admin Username
        algorithm_signer:
          description: 'When supplied, this value specifies a signing algorithm for
            the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512, default,
            or the empty string.'
          type: string
          x-vault-displayAttrs:
            name: Signing Algorithm
        allow_bare_domains:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, host certificates that are requested
            are allowed to use the base domains listed in "allowed_domains", e.g.
            "example.com". This is a separate option as in some cases this can be
            considered a security threat.'
          type: boolean
        allow_host_certificates:
          default: false
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, certificates are allowed to be signed
            for use as a ''host''.'
          type: boolean
        allow_subdomains:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, host certificates that are requested
            are allowed to use subdomains of those listed in "allowed_domains".'
          type: boolean
        allow_user_certificates:
          default: false
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, certificates are allowed to be signed
            for use as a ''user''.'
          type: boolean
        allow_user_key_ids:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If true, users can override the key ID for
            a signed certificate with the "key_id" field. When false, the key ID will
            always be the token display name. The key ID is logged by the SSH server
            and can be useful for auditing.'
          type: boolean
          x-vault-displayAttrs:
            name: Allow User Key IDs
        allowed_critical_options:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] A comma-separated list of critical options
            that certificates can have when signed. To allow any critical options,
            set this to an empty string.'
          type: string
        allowed_domains:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If this option is not specified, client can
            request for a signed certificate for any valid host. If only certain domains
            are allowed, then this list enforces it.'
          type: string
        allowed_domains_template:
          default: false
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, Allowed domains can be specified
            using identity template policies. Non-templated domains are also permitted.'
          type: boolean
        allowed_extensions:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] A comma-separated list of extensions that
            certificates can have when signed. An empty list means that no extension
            overrides are allowed by an end-user; explicitly specify ''*'' to allow
            any extensions to be set.'
          type: string
        allowed_user_key_lengths:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, allows the enforcement of key types
            and minimum key sizes to be signed.'
          format: map
          type: object
        allowed_users:
          description: '[Optional for all types] [Works differently for CA type] If
            this option is not specified, or is ''*'', client can request a credential
            for any valid user at the remote host, including the admin user. If only
            certain usernames are to be allowed, then this list enforces it. If this
            field is set, then credentials can only be created for default_user and
            usernames present in this list. Setting this option will enable all the
            users with access to this role to fetch credentials for all other usernames
            in this list. Use with caution. N.B.: with the CA type, an empty list
            means that no users are allowed; explicitly specify ''*'' to allow any
            user.'
          type: string
        allowed_users_template:
          default: false
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, Allowed users can be specified using
            identity template policies. Non-templated users are also permitted.'
          type: boolean
        cidr_list:
          description: '[Optional for Dynamic type] [Optional for OTP type] [Not applicable
            for CA type] Comma separated list of CIDR blocks for which the role is
            applicable for. CIDR blocks can belong to more than one role.'
          type: string
          x-vault-displayAttrs:
            name: CIDR List
        default_critical_options:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] Critical options certificates should have
            if none are provided when signing. This field takes in key value pairs
            in JSON format. Note that these are not restricted by "allowed_critical_options".
            Defaults to none.'
          format: map
          type: object
        default_extensions:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] Extensions certificates should have if none
            are provided when signing. This field takes in key value pairs in JSON
            format. Note that these are not restricted by "allowed_extensions". Defaults
            to none.'
          format: map
          type: object
        default_extensions_template:
          default: false
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, Default extension values can be specified
            using identity template policies. Non-templated extension values are also
            permitted.'
          type: boolean
        default_user:
          description: '[Required for Dynamic type] [Required for OTP type] [Optional
            for CA type] Default username for which a credential will be generated.
            When the endpoint ''creds/'' is used without a username, this value will
            be used as default username.'
          type: string
          x-vault-displayAttrs:
            name: Default Username
        default_user_template:
          default: false
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] If set, Default user can be specified using
            identity template policies. Non-templated users are also permitted.'
          type: boolean
        exclude_cidr_list:
          description: '[Optional for Dynamic type] [Optional for OTP type] [Not applicable
            for CA type] Comma separated list of CIDR blocks. IP addresses belonging
            to these blocks are not accepted by the role. This is particularly useful
            when big CIDR blocks are being used by the role and certain parts of it
            needs to be kept out.'
          type: string
          x-vault-displayAttrs:
            name: Exclude CIDR List
        install_script:
          description: '[Optional for Dynamic type] [Not-applicable for OTP type]
            [Not applicable for CA type] Script used to install and uninstall public
            keys in the target machine. The inbuilt default install script will be
            for Linux hosts. For sample script, refer the project documentation website.'
          type: string
        key:
          description: '[Required for Dynamic type] [Not applicable for OTP type]
            [Not applicable for CA type] Name of the registered key in Vault. Before
            creating the role, use the ''keys/'' endpoint to create a named key.'
          type: string
        key_bits:
          description: '[Optional for Dynamic type] [Not applicable for OTP type]
            [Not applicable for CA type] Length of the RSA dynamic key in bits. It
            is 1024 by default or it can be 2048.'
          type: integer
        key_id_format:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] When supplied, this value specifies a custom
            format for the key id of a signed certificate. The following variables
            are available for use: ''{{token_display_name}}'' - The display name of
            the token used to make the request. ''{{role_name}}'' - The name of the
            role signing the request. ''{{public_key_hash}}'' - A SHA256 checksum
            of the public key that is being signed.'
          type: string
          x-vault-displayAttrs:
            name: Key ID Format
        key_option_specs:
          description: '[Optional for Dynamic type] [Not applicable for OTP type]
            [Not applicable for CA type] Comma separated option specifications which
            will be prefixed to RSA key in authorized_keys file. Options should be
            valid and comply with authorized_keys file format and should not contain
            spaces.'
          type: string
        key_type:
          description: '[Required for all types] Type of key used to login to hosts.
            It can be either ''otp'', ''dynamic'' or ''ca''. ''otp'' type requires
            agent to be installed in remote hosts.'
          enum:
          - otp
          - dynamic
          - ca
          type: string
          x-vault-displayAttrs:
            value: ca
        max_ttl:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] The maximum allowed lease duration'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Max TTL
        not_before_duration:
          default: 30
          description: The duration that the SSH certificate should be backdated by
            at issuance.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Not before duration
            value: 30
        port:
          description: '[Optional for Dynamic type] [Optional for OTP type] [Not applicable
            for CA type] Port number for SSH connection. Default is ''22''. Port number
            does not play any role in creation of OTP. For ''otp'' type, this is just
            a way to inform client about the port number to use. Port number will
            be returned to client by Vault server along with OTP.'
          type: integer
          x-vault-displayAttrs:
            value: 22
        ttl:
          description: '[Not applicable for Dynamic type] [Not applicable for OTP
            type] [Optional for CA type] The lease duration if no specific lease duration
            is requested. The lease duration controls the expiration of certificates
            issued by this backend. Defaults to the value of max_ttl.'
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: TTL
      type: object
    SshSignRequest:
      example:
        public_key: public_key
        cert_type: user
        extensions: '{}'
        critical_options: '{}'
        key_id: key_id
        valid_principals: valid_principals
        ttl: 0
      properties:
        cert_type:
          default: user
          description: Type of certificate to be created; either "user" or "host".
          type: string
        critical_options:
          description: Critical options that the certificate should be signed for.
          format: map
          type: object
        extensions:
          description: Extensions that the certificate should be signed for.
          format: map
          type: object
        key_id:
          description: Key id that the created certificate should have. If not specified,
            the display name of the token will be used.
          type: string
        public_key:
          description: SSH public key that should be signed.
          type: string
        ttl:
          description: The requested Time To Live for the SSH certificate; sets the
            expiration date. If not specified the role default, backend default, or
            system default TTL is used, in that order. Cannot be later than the role
            max TTL.
          format: seconds
          type: integer
        valid_principals:
          description: Valid principals, either usernames or hostnames, that the certificate
            should be signed for.
          type: string
      type: object
    SshVerifyRequest:
      example:
        otp: otp
      properties:
        otp:
          description: '[Required] One-Time-Key that needs to be validated'
          type: string
      type: object
    SystemAuditHashRequest:
      example:
        input: input
      properties:
        input:
          type: string
      type: object
    SystemAuditRequest:
      example:
        options: '{}'
        description: description
        type: type
        local: false
      properties:
        description:
          description: User-friendly description for this audit backend.
          type: string
        local:
          default: false
          description: Mark the mount as a local mount, which is not replicated and
            is unaffected by replication.
          type: boolean
        options:
          description: Configuration options for the audit backend.
          format: kvpairs
          type: object
        type:
          description: 'The type of the backend. Example: "mysql"'
          type: string
      type: object
    SystemAuthRequest:
      example:
        seal_wrap: false
        plugin_version: plugin_version
        options: '{}'
        description: description
        external_entropy_access: false
        plugin_name: plugin_name
        type: type
        config: '{}'
        local: false
      properties:
        config:
          description: Configuration for this mount, such as plugin_name.
          format: map
          type: object
        description:
          description: User-friendly description for this credential backend.
          type: string
        external_entropy_access:
          default: false
          description: Whether to give the mount access to Vault's external entropy.
          type: boolean
        local:
          default: false
          description: Mark the mount as a local mount, which is not replicated and
            is unaffected by replication.
          type: boolean
        options:
          description: The options to pass into the backend. Should be a json object
            with string keys and values.
          format: kvpairs
          type: object
        plugin_name:
          description: Name of the auth plugin to use based from the name in the plugin
            catalog.
          type: string
        plugin_version:
          description: The semantic version of the plugin to use.
          type: string
        seal_wrap:
          default: false
          description: Whether to turn on seal wrapping for the mount.
          type: boolean
        type:
          description: 'The type of the backend. Example: "userpass"'
          type: string
      type: object
    SystemAuthTuneRequest:
      example:
        listing_visibility: listing_visibility
        plugin_version: plugin_version
        audit_non_hmac_request_keys:
        - audit_non_hmac_request_keys
        - audit_non_hmac_request_keys
        max_lease_ttl: max_lease_ttl
        passthrough_request_headers:
        - passthrough_request_headers
        - passthrough_request_headers
        default_lease_ttl: default_lease_ttl
        options: '{}'
        description: description
        allowed_response_headers:
        - allowed_response_headers
        - allowed_response_headers
        token_type: token_type
        audit_non_hmac_response_keys:
        - audit_non_hmac_response_keys
        - audit_non_hmac_response_keys
      properties:
        allowed_response_headers:
          description: A list of headers to whitelist and allow a plugin to set on
            responses.
          items:
            type: string
          type: array
        audit_non_hmac_request_keys:
          description: The list of keys in the request data object that will not be
            HMAC'ed by audit devices.
          items:
            type: string
          type: array
        audit_non_hmac_response_keys:
          description: The list of keys in the response data object that will not
            be HMAC'ed by audit devices.
          items:
            type: string
          type: array
        default_lease_ttl:
          description: The default lease TTL for this mount.
          type: string
        description:
          description: User-friendly description for this credential backend.
          type: string
        listing_visibility:
          description: Determines the visibility of the mount in the UI-specific listing
            endpoint. Accepted value are 'unauth' and 'hidden', with the empty default
            ('') behaving like 'hidden'.
          type: string
        max_lease_ttl:
          description: The max lease TTL for this mount.
          type: string
        options:
          description: The options to pass into the backend. Should be a json object
            with string keys and values.
          format: kvpairs
          type: object
        passthrough_request_headers:
          description: A list of headers to whitelist and pass from the request to
            the plugin.
          items:
            type: string
          type: array
        plugin_version:
          description: The semantic version of the plugin to use.
          type: string
        token_type:
          description: The type of token to issue (service or batch).
          type: string
      type: object
    SystemCapabilitiesAccessorRequest:
      example:
        path:
        - path
        - path
        paths:
        - paths
        - paths
        accessor: accessor
      properties:
        accessor:
          description: Accessor of the token for which capabilities are being queried.
          type: string
        path:
          deprecated: true
          description: Use 'paths' instead.
          items:
            type: string
          type: array
        paths:
          description: Paths on which capabilities are being queried.
          items:
            type: string
          type: array
      type: object
    SystemCapabilitiesRequest:
      example:
        path:
        - path
        - path
        paths:
        - paths
        - paths
        token: token
      properties:
        path:
          deprecated: true
          description: Use 'paths' instead.
          items:
            type: string
          type: array
        paths:
          description: Paths on which capabilities are being queried.
          items:
            type: string
          type: array
        token:
          description: Token for which capabilities are being queried.
          type: string
      type: object
    SystemCapabilitiesSelfRequest:
      example:
        path:
        - path
        - path
        paths:
        - paths
        - paths
        token: token
      properties:
        path:
          deprecated: true
          description: Use 'paths' instead.
          items:
            type: string
          type: array
        paths:
          description: Paths on which capabilities are being queried.
          items:
            type: string
          type: array
        token:
          description: Token for which capabilities are being queried.
          type: string
      type: object
    SystemConfigAuditingRequestHeadersRequest:
      example:
        hmac: true
      properties:
        hmac:
          type: boolean
      type: object
    SystemConfigCorsRequest:
      example:
        allowed_headers:
        - allowed_headers
        - allowed_headers
        enable: true
        allowed_origins:
        - allowed_origins
        - allowed_origins
      properties:
        allowed_headers:
          description: A comma-separated string or array of strings indicating headers
            that are allowed on cross-origin requests.
          items:
            type: string
          type: array
        allowed_origins:
          description: A comma-separated string or array of strings indicating origins
            that may make cross-origin requests.
          items:
            type: string
          type: array
        enable:
          description: Enables or disables CORS headers on requests.
          type: boolean
      type: object
    SystemConfigUiHeadersRequest:
      example:
        values:
        - values
        - values
        multivalue: true
      properties:
        multivalue:
          description: Returns multiple values if true
          type: boolean
        values:
          description: The values to set the header.
          items:
            type: string
          type: array
      type: object
    SystemGenerateRootAttemptRequest:
      example:
        pgp_key: pgp_key
      properties:
        pgp_key:
          description: Specifies a base64-encoded PGP public key.
          type: string
      type: object
    SystemGenerateRootRequest:
      example:
        pgp_key: pgp_key
      properties:
        pgp_key:
          description: Specifies a base64-encoded PGP public key.
          type: string
      type: object
    SystemGenerateRootUpdateRequest:
      example:
        nonce: nonce
        key: key
      properties:
        key:
          description: Specifies a single unseal key share.
          type: string
        nonce:
          description: Specifies the nonce of the attempt.
          type: string
      type: object
    SystemInitRequest:
      example:
        recovery_pgp_keys:
        - recovery_pgp_keys
        - recovery_pgp_keys
        stored_shares: 5
        secret_threshold: 5
        recovery_shares: 0
        secret_shares: 1
        pgp_keys:
        - pgp_keys
        - pgp_keys
        recovery_threshold: 6
        root_token_pgp_key: root_token_pgp_key
      properties:
        pgp_keys:
          description: Specifies an array of PGP public keys used to encrypt the output
            unseal keys. Ordering is preserved. The keys must be base64-encoded from
            their original binary representation. The size of this array must be the
            same as `secret_shares`.
          items:
            type: string
          type: array
        recovery_pgp_keys:
          description: Specifies an array of PGP public keys used to encrypt the output
            recovery keys. Ordering is preserved. The keys must be base64-encoded
            from their original binary representation. The size of this array must
            be the same as `recovery_shares`.
          items:
            type: string
          type: array
        recovery_shares:
          description: Specifies the number of shares to split the recovery key into.
          type: integer
        recovery_threshold:
          description: Specifies the number of shares required to reconstruct the
            recovery key. This must be less than or equal to `recovery_shares`.
          type: integer
        root_token_pgp_key:
          description: Specifies a PGP public key used to encrypt the initial root
            token. The key must be base64-encoded from its original binary representation.
          type: string
        secret_shares:
          description: Specifies the number of shares to split the unseal key into.
          type: integer
        secret_threshold:
          description: Specifies the number of shares required to reconstruct the
            unseal key. This must be less than or equal secret_shares. If using Vault
            HSM with auto-unsealing, this value must be the same as `secret_shares`.
          type: integer
        stored_shares:
          description: Specifies the number of shares that should be encrypted by
            the HSM and stored for auto-unsealing. Currently must be the same as `secret_shares`.
          type: integer
      type: object
    SystemInternalCountersConfigRequest:
      example:
        default_report_months: 0
        retention_months: 6
        enabled: default
      properties:
        default_report_months:
          default: 12
          description: Number of months to report if no start date specified.
          type: integer
        enabled:
          default: default
          description: 'Enable or disable collection of client count: enable, disable,
            or default.'
          type: string
        retention_months:
          default: 24
          description: Number of months of client data to retain. Setting to 0 will
            clear all existing data.
          type: integer
      type: object
    SystemInternalSpecsOpenapiRequest:
      properties:
        context:
          description: Context string appended to every operationId
          type: string
      type: object
    SystemLeasesLookupRequest:
      example:
        lease_id: lease_id
      properties:
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemLeasesRenewLeaseRequest:
      example:
        increment: 0
        lease_id: lease_id
      properties:
        increment:
          description: The desired increment in seconds to the lease
          format: seconds
          type: integer
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemLeasesRenewRequest:
      example:
        url_lease_id: url_lease_id
        increment: 0
        lease_id: lease_id
      properties:
        increment:
          description: The desired increment in seconds to the lease
          format: seconds
          type: integer
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
        url_lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemLeasesRevokeLeaseRequest:
      example:
        sync: true
        lease_id: lease_id
      properties:
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
        sync:
          default: true
          description: Whether or not to perform the revocation synchronously
          type: boolean
      type: object
    SystemLeasesRevokePrefixRequest:
      example:
        sync: true
      properties:
        sync:
          default: true
          description: Whether or not to perform the revocation synchronously
          type: boolean
      type: object
    SystemLeasesRevokeRequest:
      example:
        url_lease_id: url_lease_id
        sync: true
        lease_id: lease_id
      properties:
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
        sync:
          default: true
          description: Whether or not to perform the revocation synchronously
          type: boolean
        url_lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemLoggersRequest:
      example:
        level: level
      properties:
        level:
          description: Log verbosity level. Supported values (in order of detail)
            are "trace", "debug", "info", "warn", and "error".
          type: string
      type: object
    SystemMfaValidateRequest:
      example:
        mfa_request_id: mfa_request_id
        mfa_payload: '{}'
      properties:
        mfa_payload:
          description: A map from MFA method ID to a slice of passcodes or an empty
            slice if the method does not use passcodes
          format: map
          type: object
        mfa_request_id:
          description: ID for this MFA request
          type: string
      required:
      - mfa_payload
      - mfa_request_id
      type: object
    SystemMountsRequest:
      example:
        seal_wrap: false
        plugin_version: plugin_version
        options: '{}'
        description: description
        external_entropy_access: false
        plugin_name: plugin_name
        type: type
        config: '{}'
        local: false
      properties:
        config:
          description: Configuration for this mount, such as default_lease_ttl and
            max_lease_ttl.
          format: map
          type: object
        description:
          description: User-friendly description for this mount.
          type: string
        external_entropy_access:
          default: false
          description: Whether to give the mount access to Vault's external entropy.
          type: boolean
        local:
          default: false
          description: Mark the mount as a local mount, which is not replicated and
            is unaffected by replication.
          type: boolean
        options:
          description: The options to pass into the backend. Should be a json object
            with string keys and values.
          format: kvpairs
          type: object
        plugin_name:
          description: Name of the plugin to mount based from the name registered
            in the plugin catalog.
          type: string
        plugin_version:
          description: The semantic version of the plugin to use.
          type: string
        seal_wrap:
          default: false
          description: Whether to turn on seal wrapping for the mount.
          type: boolean
        type:
          description: 'The type of the backend. Example: "passthrough"'
          type: string
      type: object
    SystemMountsTuneRequest:
      example:
        listing_visibility: listing_visibility
        plugin_version: plugin_version
        allowed_managed_keys:
        - allowed_managed_keys
        - allowed_managed_keys
        audit_non_hmac_request_keys:
        - audit_non_hmac_request_keys
        - audit_non_hmac_request_keys
        max_lease_ttl: max_lease_ttl
        passthrough_request_headers:
        - passthrough_request_headers
        - passthrough_request_headers
        default_lease_ttl: default_lease_ttl
        options: '{}'
        description: description
        allowed_response_headers:
        - allowed_response_headers
        - allowed_response_headers
        token_type: token_type
        audit_non_hmac_response_keys:
        - audit_non_hmac_response_keys
        - audit_non_hmac_response_keys
      properties:
        allowed_managed_keys:
          items:
            type: string
          type: array
        allowed_response_headers:
          description: A list of headers to whitelist and allow a plugin to set on
            responses.
          items:
            type: string
          type: array
        audit_non_hmac_request_keys:
          description: The list of keys in the request data object that will not be
            HMAC'ed by audit devices.
          items:
            type: string
          type: array
        audit_non_hmac_response_keys:
          description: The list of keys in the response data object that will not
            be HMAC'ed by audit devices.
          items:
            type: string
          type: array
        default_lease_ttl:
          description: The default lease TTL for this mount.
          type: string
        description:
          description: User-friendly description for this credential backend.
          type: string
        listing_visibility:
          description: Determines the visibility of the mount in the UI-specific listing
            endpoint. Accepted value are 'unauth' and 'hidden', with the empty default
            ('') behaving like 'hidden'.
          type: string
        max_lease_ttl:
          description: The max lease TTL for this mount.
          type: string
        options:
          description: The options to pass into the backend. Should be a json object
            with string keys and values.
          format: kvpairs
          type: object
        passthrough_request_headers:
          description: A list of headers to whitelist and pass from the request to
            the plugin.
          items:
            type: string
          type: array
        plugin_version:
          description: The semantic version of the plugin to use.
          type: string
        token_type:
          description: The type of token to issue (service or batch).
          type: string
      type: object
    SystemPluginsCatalogRequest:
      example:
        args:
        - args
        - args
        sha256: sha256
        env:
        - env
        - env
        type: type
        version: version
        command: command
      properties:
        args:
          description: The args passed to plugin command.
          items:
            type: string
          type: array
        command:
          description: The command used to start the plugin. The executable defined
            in this command must exist in vault's plugin directory.
          type: string
        env:
          description: The environment variables passed to plugin command. Each entry
            is of the form "key=value".
          items:
            type: string
          type: array
        sha256:
          description: The SHA256 sum of the executable used in the command field.
            This should be HEX encoded.
          type: string
        type:
          description: The type of the plugin, may be auth, secret, or database
          type: string
        version:
          description: The semantic version of the plugin to use.
          type: string
      type: object
    SystemPluginsReloadBackendRequest:
      example:
        plugin: plugin
        scope: scope
        mounts:
        - mounts
        - mounts
      properties:
        mounts:
          description: The mount paths of the plugin backends to reload.
          items:
            type: string
          type: array
        plugin:
          description: The name of the plugin to reload, as registered in the plugin
            catalog.
          type: string
        scope:
          type: string
      type: object
    SystemPoliciesAclRequest:
      example:
        policy: policy
      properties:
        policy:
          description: The rules of the policy.
          type: string
      type: object
    SystemPoliciesPasswordRequest:
      example:
        policy: policy
      properties:
        policy:
          description: The password policy
          type: string
      type: object
    SystemPolicyRequest:
      example:
        rules: rules
        policy: policy
      properties:
        policy:
          description: The rules of the policy.
          type: string
        rules:
          deprecated: true
          description: The rules of the policy.
          type: string
      type: object
    SystemQuotasConfigRequest:
      example:
        enable_rate_limit_response_headers: true
        rate_limit_exempt_paths:
        - rate_limit_exempt_paths
        - rate_limit_exempt_paths
        enable_rate_limit_audit_logging: true
      properties:
        enable_rate_limit_audit_logging:
          description: If set, starts audit logging of requests that get rejected
            due to rate limit quota rule violations.
          type: boolean
        enable_rate_limit_response_headers:
          description: If set, additional rate limit quota HTTP headers will be added
            to responses.
          type: boolean
        rate_limit_exempt_paths:
          description: Specifies the list of exempt paths from all rate limit quotas.
            If empty no paths will be exempt.
          items:
            type: string
          type: array
      type: object
    SystemQuotasRateLimitRequest:
      example:
        path: path
        role: role
        rate: 1.4658129
        block_interval: 0
        interval: 6
        type: type
      properties:
        block_interval:
          description: If set, when a client reaches a rate limit threshold, the client
            will be prohibited from any further requests until after the 'block_interval'
            has elapsed.
          format: seconds
          type: integer
        interval:
          description: The duration to enforce rate limiting for (default '1s').
          format: seconds
          type: integer
        path:
          description: Path of the mount or namespace to apply the quota. A blank
            path configures a global quota. For example namespace1/ adds a quota to
            a full namespace, namespace1/auth/userpass adds a quota to userpass in
            namespace1.
          type: string
        rate:
          description: The maximum number of requests in a given interval to be allowed
            by the quota rule. The 'rate' must be positive.
          format: float
          type: number
        role:
          description: Login role to apply this quota to. Note that when set, path
            must be configured to a valid auth method with a concept of roles.
          type: string
        type:
          description: Type of the quota rule.
          type: string
      type: object
    SystemRawRequest:
      example:
        compression_type: compression_type
        compressed: true
        encoding: encoding
        value: value
      properties:
        compressed:
          type: boolean
        compression_type:
          type: string
        encoding:
          type: string
        value:
          type: string
      type: object
    SystemRekeyInitRequest:
      example:
        backup: true
        secret_threshold: 6
        require_verification: true
        secret_shares: 0
        pgp_keys:
        - pgp_keys
        - pgp_keys
      properties:
        backup:
          description: Specifies if using PGP-encrypted keys, whether Vault should
            also store a plaintext backup of the PGP-encrypted keys.
          type: boolean
        pgp_keys:
          description: Specifies an array of PGP public keys used to encrypt the output
            unseal keys. Ordering is preserved. The keys must be base64-encoded from
            their original binary representation. The size of this array must be the
            same as secret_shares.
          items:
            type: string
          type: array
        require_verification:
          description: Turns on verification functionality
          type: boolean
        secret_shares:
          description: Specifies the number of shares to split the unseal key into.
          type: integer
        secret_threshold:
          description: Specifies the number of shares required to reconstruct the
            unseal key. This must be less than or equal secret_shares. If using Vault
            HSM with auto-unsealing, this value must be the same as secret_shares.
          type: integer
      type: object
    SystemRekeyUpdateRequest:
      example:
        nonce: nonce
        key: key
      properties:
        key:
          description: Specifies a single unseal key share.
          type: string
        nonce:
          description: Specifies the nonce of the rekey attempt.
          type: string
      type: object
    SystemRekeyVerifyRequest:
      example:
        nonce: nonce
        key: key
      properties:
        key:
          description: Specifies a single unseal share key from the new set of shares.
          type: string
        nonce:
          description: Specifies the nonce of the rekey verification operation.
          type: string
      type: object
    SystemRemountRequest:
      example:
        from: from
        to: to
      properties:
        from:
          description: The previous mount point.
          type: string
        to:
          description: The new mount point.
          type: string
      type: object
    SystemRenewLeaseRequest:
      example:
        increment: 0
        lease_id: lease_id
      properties:
        increment:
          description: The desired increment in seconds to the lease
          format: seconds
          type: integer
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemRenewRequest:
      example:
        url_lease_id: url_lease_id
        increment: 0
        lease_id: lease_id
      properties:
        increment:
          description: The desired increment in seconds to the lease
          format: seconds
          type: integer
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
        url_lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemRevokeLeaseRequest:
      example:
        sync: true
        lease_id: lease_id
      properties:
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
        sync:
          default: true
          description: Whether or not to perform the revocation synchronously
          type: boolean
      type: object
    SystemRevokePrefixRequest:
      example:
        sync: true
      properties:
        sync:
          default: true
          description: Whether or not to perform the revocation synchronously
          type: boolean
      type: object
    SystemRevokeRequest:
      example:
        url_lease_id: url_lease_id
        sync: true
        lease_id: lease_id
      properties:
        lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
        sync:
          default: true
          description: Whether or not to perform the revocation synchronously
          type: boolean
        url_lease_id:
          description: The lease identifier to renew. This is included with a lease.
          type: string
      type: object
    SystemRotateConfigRequest:
      example:
        interval: 0
        enabled: true
        max_operations: 6
      properties:
        enabled:
          description: Whether automatic rotation is enabled.
          type: boolean
        interval:
          description: How long after installation of an active key term that the
            key will be automatically rotated.
          format: seconds
          type: integer
        max_operations:
          description: The number of encryption operations performed before the barrier
            key is automatically rotated.
          format: int64
          type: integer
      type: object
    SystemToolsHashRequest:
      example:
        input: input
        urlalgorithm: urlalgorithm
        format: hex
        algorithm: sha2-256
      properties:
        algorithm:
          default: sha2-256
          description: 'Algorithm to use (POST body parameter). Valid values are:
            * sha2-224 * sha2-256 * sha2-384 * sha2-512 Defaults to "sha2-256".'
          type: string
        format:
          default: hex
          description: Encoding format to use. Can be "hex" or "base64". Defaults
            to "hex".
          type: string
        input:
          description: The base64-encoded input data
          type: string
        urlalgorithm:
          description: Algorithm to use (POST URL parameter)
          type: string
      type: object
    SystemToolsRandomRequest:
      example:
        urlbytes: urlbytes
        bytes: 0
        format: base64
        source: platform
      properties:
        bytes:
          default: 32
          description: The number of bytes to generate (POST body parameter). Defaults
            to 32 (256 bits).
          type: integer
        format:
          default: base64
          description: Encoding format to use. Can be "hex" or "base64". Defaults
            to "base64".
          type: string
        source:
          default: platform
          description: Which system to source random data from, ether "platform",
            "seal", or "all".
          type: string
        urlbytes:
          description: The number of bytes to generate (POST URL parameter)
          type: string
      type: object
    SystemUnsealRequest:
      example:
        reset: true
        key: key
      properties:
        key:
          description: Specifies a single unseal key share. This is required unless
            reset is true.
          type: string
        reset:
          description: Specifies if previously-provided unseal keys are discarded
            and the unseal process is reset.
          type: boolean
      type: object
    SystemWrappingLookupRequest:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    SystemWrappingRewrapRequest:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    SystemWrappingUnwrapRequest:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    TerraformConfigRequest:
      example:
        address: https://app.terraform.io
        base_path: /api/v2/
        token: token
      properties:
        address:
          default: https://app.terraform.io
          description: The address to access Terraform Cloud or Enterprise. Default
            is "https://app.terraform.io".
          type: string
        base_path:
          default: /api/v2/
          description: The base path for the Terraform Cloud or Enterprise API. Default
            is "/api/v2/".
          type: string
        token:
          description: The token to access Terraform Cloud
          type: string
          x-vault-displayAttrs:
            name: Token
            sensitive: true
      required:
      - token
      type: object
    TerraformRoleRequest:
      example:
        max_ttl: 0
        user_id: user_id
        organization: organization
        team_id: team_id
        ttl: 6
      properties:
        max_ttl:
          description: Maximum time for role. If not set or set to 0, will use system
            default.
          format: seconds
          type: integer
        organization:
          description: Name of the Terraform Cloud or Enterprise organization
          type: string
        team_id:
          description: ID of the Terraform Cloud or Enterprise team under organization
            (e.g., settings/teams/team-xxxxxxxxxxxxx)
          type: string
        ttl:
          description: Default lease for generated credentials. If not set or set
            to 0, will use system default.
          format: seconds
          type: integer
        user_id:
          description: ID of the Terraform Cloud or Enterprise user (e.g., user-xxxxxxxxxxxxxxxx)
          type: string
      type: object
    TokenCreateOrphanRequest:
      example:
        entity_alias: entity_alias
        metadata: '{}'
        period: period
        policies:
        - policies
        - policies
        num_uses: 0
        display_name: display_name
        no_default_policy: true
        type: type
        no_parent: true
        ttl: ttl
        explicit_max_ttl: explicit_max_ttl
        role_name: role_name
        renewable: true
        id: id
      properties:
        display_name:
          description: Name to associate with this token
          type: string
        entity_alias:
          description: Name of the entity alias to associate with this token
          type: string
        explicit_max_ttl:
          description: Explicit Max TTL of this token
          type: string
        id:
          description: Value for the token
          type: string
        metadata:
          description: Arbitrary key=value metadata to associate with the token
          format: map
          type: object
        no_default_policy:
          description: Do not include default policy for this token
          type: boolean
        no_parent:
          description: Create the token with no parent
          type: boolean
        num_uses:
          description: Max number of uses for this token
          type: integer
        period:
          description: Renew period
          type: string
        policies:
          description: List of policies for the token
          items:
            type: string
          type: array
        renewable:
          description: Allow token to be renewed past its initial TTL up to system/mount
            maximum TTL
          type: boolean
        role_name:
          description: Name of the role
          type: string
        ttl:
          description: Time to live for this token
          type: string
        type:
          description: Token type
          type: string
      type: object
    TokenCreateRequest:
      example:
        entity_alias: entity_alias
        metadata: '{}'
        period: period
        policies:
        - policies
        - policies
        num_uses: 0
        display_name: display_name
        no_default_policy: true
        type: type
        no_parent: true
        ttl: ttl
        explicit_max_ttl: explicit_max_ttl
        renewable: true
        id: id
      properties:
        display_name:
          description: Name to associate with this token
          type: string
        entity_alias:
          description: Name of the entity alias to associate with this token
          type: string
        explicit_max_ttl:
          description: Explicit Max TTL of this token
          type: string
        id:
          description: Value for the token
          type: string
        metadata:
          description: Arbitrary key=value metadata to associate with the token
          format: map
          type: object
        no_default_policy:
          description: Do not include default policy for this token
          type: boolean
        no_parent:
          description: Create the token with no parent
          type: boolean
        num_uses:
          description: Max number of uses for this token
          type: integer
        period:
          description: Renew period
          type: string
        policies:
          description: List of policies for the token
          items:
            type: string
          type: array
        renewable:
          description: Allow token to be renewed past its initial TTL up to system/mount
            maximum TTL
          type: boolean
        ttl:
          description: Time to live for this token
          type: string
        type:
          description: Token type
          type: string
      type: object
    TokenLookupAccessorRequest:
      example:
        accessor: accessor
      properties:
        accessor:
          description: Accessor of the token to look up (request body)
          type: string
      type: object
    TokenLookupRequest:
      example:
        token: token
      properties:
        token:
          description: Token to lookup (POST request body)
          type: string
      type: object
    TokenLookupSelfRequest:
      example:
        token: token
      properties:
        token:
          description: Token to look up (unused, does not need to be set)
          type: string
      type: object
    TokenRenewAccessorRequest:
      example:
        accessor: accessor
        increment: 0
      properties:
        accessor:
          description: Accessor of the token to renew (request body)
          type: string
        increment:
          default: 0
          description: The desired increment in seconds to the token expiration
          format: seconds
          type: integer
      type: object
    TokenRenewRequest:
      example:
        increment: 0
        token: token
      properties:
        increment:
          default: 0
          description: The desired increment in seconds to the token expiration
          format: seconds
          type: integer
        token:
          description: Token to renew (request body)
          type: string
      type: object
    TokenRenewSelfRequest:
      example:
        increment: 0
        token: token
      properties:
        increment:
          default: 0
          description: The desired increment in seconds to the token expiration
          format: seconds
          type: integer
        token:
          description: Token to renew (unused, does not need to be set)
          type: string
      type: object
    TokenRevokeAccessorRequest:
      example:
        accessor: accessor
      properties:
        accessor:
          description: Accessor of the token (request body)
          type: string
      type: object
    TokenRevokeOrphanRequest:
      example:
        token: token
      properties:
        token:
          description: Token to revoke (request body)
          type: string
      type: object
    TokenRevokeRequest:
      example:
        token: token
      properties:
        token:
          description: Token to revoke (request body)
          type: string
      type: object
    TokenRolesRequest:
      example:
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        period: 6
        token_num_uses: 5
        allowed_entity_aliases:
        - allowed_entity_aliases
        - allowed_entity_aliases
        token_explicit_max_ttl: 1
        path_suffix: path_suffix
        token_period: 5
        disallowed_policies_glob:
        - disallowed_policies_glob
        - disallowed_policies_glob
        orphan: true
        token_type: default-service
        explicit_max_ttl: 0
        token_no_default_policy: true
        disallowed_policies:
        - disallowed_policies
        - disallowed_policies
        allowed_policies:
        - allowed_policies
        - allowed_policies
        renewable: true
        allowed_policies_glob:
        - allowed_policies_glob
        - allowed_policies_glob
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
      properties:
        allowed_entity_aliases:
          description: String or JSON list of allowed entity aliases. If set, specifies
            the entity aliases which are allowed to be used during token generation.
            This field supports globbing.
          items:
            type: string
          type: array
        allowed_policies:
          description: If set, tokens can be created with any subset of the policies
            in this list, rather than the normal semantics of tokens being a subset
            of the calling token's policies. The parameter is a comma-delimited string
            of policy names.
          items:
            type: string
          type: array
        allowed_policies_glob:
          description: If set, tokens can be created with any subset of glob matched
            policies in this list, rather than the normal semantics of tokens being
            a subset of the calling token's policies. The parameter is a comma-delimited
            string of policy name globs.
          items:
            type: string
          type: array
        bound_cidrs:
          deprecated: true
          description: Use 'token_bound_cidrs' instead.
          items:
            type: string
          type: array
        disallowed_policies:
          description: If set, successful token creation via this role will require
            that no policies in the given list are requested. The parameter is a comma-delimited
            string of policy names.
          items:
            type: string
          type: array
        disallowed_policies_glob:
          description: If set, successful token creation via this role will require
            that no requested policies glob match any of policies in this list. The
            parameter is a comma-delimited string of policy name globs.
          items:
            type: string
          type: array
        explicit_max_ttl:
          deprecated: true
          description: Use 'token_explicit_max_ttl' instead.
          format: seconds
          type: integer
        orphan:
          description: If true, tokens created via this role will be orphan tokens
            (have no parent)
          type: boolean
        path_suffix:
          description: If set, tokens created via this role will contain the given
            suffix as a part of their path. This can be used to assist use of the
            'revoke-prefix' endpoint later on. The given suffix must match the regular
            expression.\w[\w-.]+\w
          type: string
        period:
          deprecated: true
          description: Use 'token_period' instead.
          format: seconds
          type: integer
        renewable:
          default: true
          description: Tokens created via this role will be renewable or not according
            to this value. Defaults to "true".
          type: boolean
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
      type: object
    TotpCodeRequest:
      example:
        code: code
      properties:
        code:
          description: TOTP code to be validated.
          type: string
      type: object
    TotpKeysRequest:
      example:
        exported: true
        period: 1
        qr_size: 5
        account_name: account_name
        digits: 0
        generate: false
        issuer: issuer
        key: key
        url: url
        algorithm: SHA1
        key_size: 6
        skew: 5
      properties:
        account_name:
          description: The name of the account associated with the key. Required if
            generate is true.
          type: string
        algorithm:
          default: SHA1
          description: The hashing algorithm used to generate the TOTP token. Options
            include SHA1, SHA256 and SHA512.
          type: string
        digits:
          default: 6
          description: The number of digits in the generated TOTP token. This value
            can either be 6 or 8.
          type: integer
        exported:
          default: true
          description: Determines if a QR code and url are returned upon generating
            a key. Only used if generate is true.
          type: boolean
        generate:
          default: false
          description: Determines if a key should be generated by Vault or if a key
            is being passed from another service.
          type: boolean
        issuer:
          description: The name of the key's issuing organization. Required if generate
            is true.
          type: string
        key:
          description: The shared master key used to generate a TOTP token. Only used
            if generate is false.
          type: string
        key_size:
          default: 20
          description: Determines the size in bytes of the generated key. Only used
            if generate is true.
          type: integer
        period:
          default: 30
          description: The length of time used to generate a counter for the TOTP
            token calculation.
          format: seconds
          type: integer
        qr_size:
          default: 200
          description: The pixel size of the generated square QR code. Only used if
            generate is true and exported is true. If this value is 0, a QR code will
            not be returned.
          type: integer
        skew:
          default: 1
          description: The number of delay periods that are allowed when validating
            a TOTP token. This value can either be 0 or 1. Only used if generate is
            true.
          type: integer
        url:
          description: A TOTP url string containing all of the parameters for key
            setup. Only used if generate is false.
          type: string
      type: object
    TransitCacheConfigRequest:
      example:
        size: 0
      properties:
        size:
          default: 0
          description: Size of cache, use 0 for an unlimited cache size, defaults
            to 0
          type: integer
      type: object
    TransitDatakeyRequest:
      example:
        key_version: 6
        bits: 0
        context: context
        nonce: nonce
      properties:
        bits:
          default: 256
          description: Number of bits for the key; currently 128, 256, and 512 bits
            are supported. Defaults to 256.
          type: integer
        context:
          description: Context for key derivation. Required for derived keys.
          type: string
        key_version:
          description: The version of the Vault key to use for encryption of the data
            key. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version
            configured on the key.
          type: integer
        nonce:
          description: Nonce for when convergent encryption v1 is used (only in Vault
            0.6.1)
          type: string
      type: object
    TransitDecryptRequest:
      example:
        ciphertext: ciphertext
        partial_failure_response_code: 0
        context: context
        nonce: nonce
      properties:
        ciphertext:
          description: The ciphertext to decrypt, provided as returned by encrypt.
          type: string
        context:
          description: Base64 encoded context for key derivation. Required if key
            derivation is enabled.
          type: string
        nonce:
          description: Base64 encoded nonce value used during encryption. Must be
            provided if convergent encryption is enabled for this key and the key
            was generated with Vault 0.6.1. Not required for keys created in 0.6.2+.
          type: string
        partial_failure_response_code:
          description: Ordinarily, if a batch item fails to decrypt due to a bad input,
            but other batch items succeed, the HTTP response code is 400 (Bad Request).
            Some applications may want to treat partial failures differently. Providing
            the parameter returns the given response code integer instead of a 400
            in this case. If all values fail HTTP 400 is still returned.
          type: integer
      type: object
    TransitEncryptRequest:
      example:
        convergent_encryption: true
        key_version: 0
        partial_failure_response_code: 6
        context: context
        plaintext: plaintext
        type: aes256-gcm96
        nonce: nonce
      properties:
        context:
          description: Base64 encoded context for key derivation. Required if key
            derivation is enabled
          type: string
        convergent_encryption:
          description: This parameter will only be used when a key is expected to
            be created. Whether to support convergent encryption. This is only supported
            when using a key with key derivation enabled and will require all requests
            to carry both a context and 96-bit (12-byte) nonce. The given nonce will
            be used in place of a randomly generated nonce. As a result, when the
            same context and nonce are supplied, the same ciphertext is generated.
            It is *very important* when using this mode that you ensure that all nonces
            are unique for a given context. Failing to do so will severely impact
            the ciphertext's security.
          type: boolean
        key_version:
          description: The version of the key to use for encryption. Must be 0 (for
            latest) or a value greater than or equal to the min_encryption_version
            configured on the key.
          type: integer
        nonce:
          description: Base64 encoded nonce value. Must be provided if convergent
            encryption is enabled for this key and the key was generated with Vault
            0.6.1. Not required for keys created in 0.6.2+. The value must be exactly
            96 bits (12 bytes) long and the user must ensure that for any given context
            (and thus, any given encryption key) this nonce value is **never reused**.
          type: string
        partial_failure_response_code:
          description: Ordinarily, if a batch item fails to encrypt due to a bad input,
            but other batch items succeed, the HTTP response code is 400 (Bad Request).
            Some applications may want to treat partial failures differently. Providing
            the parameter returns the given response code integer instead of a 400
            in this case. If all values fail HTTP 400 is still returned.
          type: integer
        plaintext:
          description: Base64 encoded plaintext value to be encrypted
          type: string
        type:
          default: aes256-gcm96
          description: This parameter is required when encryption key is expected
            to be created. When performing an upsert operation, the type of key to
            create. Currently, "aes128-gcm96" (symmetric) and "aes256-gcm96" (symmetric)
            are the only types supported. Defaults to "aes256-gcm96".
          type: string
      type: object
    TransitHashRequest:
      example:
        input: input
        urlalgorithm: urlalgorithm
        format: hex
        algorithm: sha2-256
      properties:
        algorithm:
          default: sha2-256
          description: 'Algorithm to use (POST body parameter). Valid values are:
            * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384
            * sha3-512 Defaults to "sha2-256".'
          type: string
        format:
          default: hex
          description: Encoding format to use. Can be "hex" or "base64". Defaults
            to "hex".
          type: string
        input:
          description: The base64-encoded input data
          type: string
        urlalgorithm:
          description: Algorithm to use (POST URL parameter)
          type: string
      type: object
    TransitHmacRequest:
      example:
        input: input
        urlalgorithm: urlalgorithm
        key_version: 0
        algorithm: sha2-256
      properties:
        algorithm:
          default: sha2-256
          description: 'Algorithm to use (POST body parameter). Valid values are:
            * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384
            * sha3-512 Defaults to "sha2-256".'
          type: string
        input:
          description: The base64-encoded input data
          type: string
        key_version:
          description: The version of the key to use for generating the HMAC. Must
            be 0 (for latest) or a value greater than or equal to the min_encryption_version
            configured on the key.
          type: integer
        urlalgorithm:
          description: Algorithm to use (POST URL parameter)
          type: string
      type: object
    TransitKeysConfigRequest:
      example:
        deletion_allowed: true
        exportable: true
        auto_rotate_period: 0
        allow_plaintext_backup: true
        min_decryption_version: 6
        min_encryption_version: 1
      properties:
        allow_plaintext_backup:
          description: Enables taking a backup of the named key in plaintext format.
            Once set, this cannot be disabled.
          type: boolean
        auto_rotate_period:
          description: Amount of time the key should live before being automatically
            rotated. A value of 0 disables automatic rotation for the key.
          format: seconds
          type: integer
        deletion_allowed:
          description: Whether to allow deletion of the key
          type: boolean
        exportable:
          description: Enables export of the key. Once set, this cannot be disabled.
          type: boolean
        min_decryption_version:
          description: If set, the minimum version of the key allowed to be decrypted.
            For signing keys, the minimum version allowed to be used for verification.
          type: integer
        min_encryption_version:
          description: If set, the minimum version of the key allowed to be used for
            encryption; or for signing keys, to be used for signing. If set to zero,
            only the latest version of the key is allowed.
          type: integer
      type: object
    TransitKeysImportRequest:
      example:
        ciphertext: ciphertext
        exportable: true
        auto_rotate_period: 0
        context: context
        hash_function: SHA256
        allow_plaintext_backup: true
        allow_rotation: true
        type: aes256-gcm96
        derived: true
      properties:
        allow_plaintext_backup:
          description: Enables taking a backup of the named key in plaintext format.
            Once set, this cannot be disabled.
          type: boolean
        allow_rotation:
          description: True if the imported key may be rotated within Vault; false
            otherwise.
          type: boolean
        auto_rotate_period:
          default: 0
          description: Amount of time the key should live before being automatically
            rotated. A value of 0 (default) disables automatic rotation for the key.
          format: seconds
          type: integer
        ciphertext:
          description: The base64-encoded ciphertext of the keys. The AES key should
            be encrypted using OAEP with the wrapping key and then concatenated with
            the import key, wrapped by the AES key.
          type: string
        context:
          description: Base64 encoded context for key derivation. When reading a key
            with key derivation enabled, if the key type supports public keys, this
            will return the public key for the given context.
          type: string
        derived:
          description: Enables key derivation mode. This allows for per-transaction
            unique keys for encryption operations.
          type: boolean
        exportable:
          description: Enables keys to be exportable. This allows for all the valid
            keys in the key ring to be exported.
          type: boolean
        hash_function:
          default: SHA256
          description: The hash function used as a random oracle in the OAEP wrapping
            of the user-generated, ephemeral AES key. Can be one of "SHA1", "SHA224",
            "SHA256" (default), "SHA384", or "SHA512"
          type: string
        type:
          default: aes256-gcm96
          description: The type of key being imported. Currently, "aes128-gcm96" (symmetric),
            "aes256-gcm96" (symmetric), "ecdsa-p256" (asymmetric), "ecdsa-p384" (asymmetric),
            "ecdsa-p521" (asymmetric), "ed25519" (asymmetric), "rsa-2048" (asymmetric),
            "rsa-3072" (asymmetric), "rsa-4096" (asymmetric) are supported. Defaults
            to "aes256-gcm96".
          type: string
      type: object
    TransitKeysImportVersionRequest:
      example:
        ciphertext: ciphertext
        hash_function: SHA256
      properties:
        ciphertext:
          description: The base64-encoded ciphertext of the keys. The AES key should
            be encrypted using OAEP with the wrapping key and then concatenated with
            the import key, wrapped by the AES key.
          type: string
        hash_function:
          default: SHA256
          description: The hash function used as a random oracle in the OAEP wrapping
            of the user-generated, ephemeral AES key. Can be one of "SHA1", "SHA224",
            "SHA256" (default), "SHA384", or "SHA512"
          type: string
      type: object
    TransitKeysRequest:
      example:
        exportable: true
        convergent_encryption: true
        auto_rotate_period: 0
        context: context
        allow_plaintext_backup: true
        type: aes256-gcm96
        derived: true
        key_size: 6
      properties:
        allow_plaintext_backup:
          description: Enables taking a backup of the named key in plaintext format.
            Once set, this cannot be disabled.
          type: boolean
        auto_rotate_period:
          default: 0
          description: Amount of time the key should live before being automatically
            rotated. A value of 0 (default) disables automatic rotation for the key.
          format: seconds
          type: integer
        context:
          description: Base64 encoded context for key derivation. When reading a key
            with key derivation enabled, if the key type supports public keys, this
            will return the public key for the given context.
          type: string
        convergent_encryption:
          description: Whether to support convergent encryption. This is only supported
            when using a key with key derivation enabled and will require all requests
            to carry both a context and 96-bit (12-byte) nonce. The given nonce will
            be used in place of a randomly generated nonce. As a result, when the
            same context and nonce are supplied, the same ciphertext is generated.
            It is *very important* when using this mode that you ensure that all nonces
            are unique for a given context. Failing to do so will severely impact
            the ciphertext's security.
          type: boolean
        derived:
          description: Enables key derivation mode. This allows for per-transaction
            unique keys for encryption operations.
          type: boolean
        exportable:
          description: Enables keys to be exportable. This allows for all the valid
            keys in the key ring to be exported.
          type: boolean
        key_size:
          default: 0
          description: The key size in bytes for the algorithm. Only applies to HMAC
            and must be no fewer than 32 bytes and no more than 512
          type: integer
        type:
          default: aes256-gcm96
          description: The type of key to create. Currently, "aes128-gcm96" (symmetric),
            "aes256-gcm96" (symmetric), "ecdsa-p256" (asymmetric), "ecdsa-p384" (asymmetric),
            "ecdsa-p521" (asymmetric), "ed25519" (asymmetric), "rsa-2048" (asymmetric),
            "rsa-3072" (asymmetric), "rsa-4096" (asymmetric) are supported. Defaults
            to "aes256-gcm96".
          type: string
      type: object
    TransitKeysTrimRequest:
      example:
        min_available_version: 0
      properties:
        min_available_version:
          description: The minimum available version for the key ring. All versions
            before this version will be permanently deleted. This value can at most
            be equal to the lesser of 'min_decryption_version' and 'min_encryption_version'.
            This is not allowed to be set when either 'min_encryption_version' or
            'min_decryption_version' is set to zero.
          type: integer
      type: object
    TransitRandomRequest:
      example:
        urlbytes: urlbytes
        bytes: 0
        format: base64
        source: platform
      properties:
        bytes:
          default: 32
          description: The number of bytes to generate (POST body parameter). Defaults
            to 32 (256 bits).
          type: integer
        format:
          default: base64
          description: Encoding format to use. Can be "hex" or "base64". Defaults
            to "base64".
          type: string
        source:
          default: platform
          description: Which system to source random data from, ether "platform",
            "seal", or "all".
          type: string
        urlbytes:
          description: The number of bytes to generate (POST URL parameter)
          type: string
      type: object
    TransitRestoreRequest:
      example:
        backup: backup
        name: name
        force: false
      properties:
        backup:
          description: Backed up key data to be restored. This should be the output
            from the 'backup/' endpoint.
          type: string
        force:
          default: false
          description: If set and a key by the given name exists, force the restore
            operation and override the key.
          type: boolean
        name:
          description: If set, this will be the name of the restored key.
          type: string
      type: object
    TransitRewrapRequest:
      example:
        ciphertext: ciphertext
        key_version: 0
        context: context
        nonce: nonce
      properties:
        ciphertext:
          description: Ciphertext value to rewrap
          type: string
        context:
          description: Base64 encoded context for key derivation. Required for derived
            keys.
          type: string
        key_version:
          description: The version of the key to use for encryption. Must be 0 (for
            latest) or a value greater than or equal to the min_encryption_version
            configured on the key.
          type: integer
        nonce:
          description: Nonce for when convergent encryption is used
          type: string
      type: object
    TransitSignRequest:
      example:
        prehashed: true
        input: input
        urlalgorithm: urlalgorithm
        key_version: 0
        context: context
        hash_algorithm: sha2-256
        signature_algorithm: signature_algorithm
        salt_length: auto
        algorithm: sha2-256
        marshaling_algorithm: asn1
      properties:
        algorithm:
          default: sha2-256
          description: 'Deprecated: use "hash_algorithm" instead.'
          type: string
        context:
          description: Base64 encoded context for key derivation. Required if key
            derivation is enabled; currently only available with ed25519 keys.
          type: string
        hash_algorithm:
          default: sha2-256
          description: 'Hash algorithm to use (POST body parameter). Valid values
            are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256
            * sha3-384 * sha3-512 Defaults to "sha2-256". Not valid for all key types,
            including ed25519.'
          type: string
        input:
          description: The base64-encoded input data
          type: string
        key_version:
          description: The version of the key to use for signing. Must be 0 (for latest)
            or a value greater than or equal to the min_encryption_version configured
            on the key.
          type: integer
        marshaling_algorithm:
          default: asn1
          description: The method by which to marshal the signature. The default is
            'asn1' which is used by openssl and X.509. It can also be set to 'jws'
            which is used for JWT signatures; setting it to this will also cause the
            encoding of the signature to be url-safe base64 instead of using standard
            base64 encoding. Currently only valid for ECDSA P-256 key types".
          type: string
        prehashed:
          description: Set to 'true' when the input is already hashed. If the key
            type is 'rsa-2048', 'rsa-3072' or 'rsa-4096', then the algorithm used
            to hash the input should be indicated by the 'algorithm' parameter.
          type: boolean
        salt_length:
          default: auto
          description: The salt length used to sign. Currently only applies to the
            RSA PSS signature scheme. Options are 'auto' (the default used by Golang,
            causing the salt to be as large as possible when signing), 'hash' (causes
            the salt length to equal the length of the hash used in the signature),
            or an integer between the minimum and the maximum permissible salt lengths
            for the given RSA key size. Defaults to 'auto'.
          type: string
        signature_algorithm:
          description: The signature algorithm to use for signing. Currently only
            applies to RSA key types. Options are 'pss' or 'pkcs1v15'. Defaults to
            'pss'
          type: string
        urlalgorithm:
          description: Hash algorithm to use (POST URL parameter)
          type: string
      type: object
    TransitVerifyRequest:
      example:
        prehashed: true
        input: input
        urlalgorithm: urlalgorithm
        signature: signature
        hmac: hmac
        context: context
        hash_algorithm: sha2-256
        signature_algorithm: signature_algorithm
        salt_length: auto
        algorithm: sha2-256
        marshaling_algorithm: asn1
      properties:
        algorithm:
          default: sha2-256
          description: 'Deprecated: use "hash_algorithm" instead.'
          type: string
        context:
          description: Base64 encoded context for key derivation. Required if key
            derivation is enabled; currently only available with ed25519 keys.
          type: string
        hash_algorithm:
          default: sha2-256
          description: 'Hash algorithm to use (POST body parameter). Valid values
            are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256
            * sha3-384 * sha3-512 Defaults to "sha2-256". Not valid for all key types.'
          type: string
        hmac:
          description: The HMAC, including vault header/key version
          type: string
        input:
          description: The base64-encoded input data to verify
          type: string
        marshaling_algorithm:
          default: asn1
          description: The method by which to unmarshal the signature when verifying.
            The default is 'asn1' which is used by openssl and X.509; can also be
            set to 'jws' which is used for JWT signatures in which case the signature
            is also expected to be url-safe base64 encoding instead of standard base64
            encoding. Currently only valid for ECDSA P-256 key types".
          type: string
        prehashed:
          description: Set to 'true' when the input is already hashed. If the key
            type is 'rsa-2048', 'rsa-3072' or 'rsa-4096', then the algorithm used
            to hash the input should be indicated by the 'algorithm' parameter.
          type: boolean
        salt_length:
          default: auto
          description: The salt length used to sign. Currently only applies to the
            RSA PSS signature scheme. Options are 'auto' (the default used by Golang,
            causing the salt to be as large as possible when signing), 'hash' (causes
            the salt length to equal the length of the hash used in the signature),
            or an integer between the minimum and the maximum permissible salt lengths
            for the given RSA key size. Defaults to 'auto'.
          type: string
        signature:
          description: The signature, including vault header/key version
          type: string
        signature_algorithm:
          description: The signature algorithm to use for signature verification.
            Currently only applies to RSA key types. Options are 'pss' or 'pkcs1v15'.
            Defaults to 'pss'
          type: string
        urlalgorithm:
          description: Hash algorithm to use (POST URL parameter)
          type: string
      type: object
    UserpassLoginRequest:
      example:
        password: password
      properties:
        password:
          description: Password for this user.
          type: string
      type: object
    UserpassUsersPasswordRequest:
      example:
        password: password
      properties:
        password:
          description: Password for this user.
          type: string
      type: object
    UserpassUsersPoliciesRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        policies:
        - policies
        - policies
      properties:
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
      type: object
    UserpassUsersRequest:
      example:
        token_policies:
        - token_policies
        - token_policies
        bound_cidrs:
        - bound_cidrs
        - bound_cidrs
        token_num_uses: 5
        max_ttl: 0
        token_explicit_max_ttl: 6
        policies:
        - policies
        - policies
        token_period: 5
        token_max_ttl: 1
        token_type: default-service
        ttl: 7
        token_no_default_policy: true
        password: password
        token_ttl: 2
        token_bound_cidrs:
        - token_bound_cidrs
        - token_bound_cidrs
      properties:
        bound_cidrs:
          deprecated: true
          description: Use "token_bound_cidrs" instead. If this and "token_bound_cidrs"
            are both specified, only "token_bound_cidrs" will be used.
          items:
            type: string
          type: array
        max_ttl:
          deprecated: true
          description: Use "token_max_ttl" instead. If this and "token_max_ttl" are
            both specified, only "token_max_ttl" will be used.
          format: seconds
          type: integer
        password:
          description: Password for this user.
          type: string
          x-vault-displayAttrs:
            sensitive: true
        policies:
          deprecated: true
          description: Use "token_policies" instead. If this and "token_policies"
            are both specified, only "token_policies" will be used.
          items:
            type: string
          type: array
        token_bound_cidrs:
          description: Comma separated string or JSON list of CIDR blocks. If set,
            specifies the blocks of IP addresses which are allowed to use the generated
            token.
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Bound CIDRs
            group: Tokens
        token_explicit_max_ttl:
          description: If set, tokens created via this role carry an explicit maximum
            TTL. During renewal, the current maximum TTL values of the role and the
            mount are not checked for changes, and any updates to these values will
            have no effect on the token being renewed.
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Explicit Maximum TTL
            group: Tokens
        token_max_ttl:
          description: The maximum lifetime of the generated token
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Maximum TTL
            group: Tokens
        token_no_default_policy:
          description: If true, the 'default' policy will not automatically be added
            to generated tokens
          type: boolean
          x-vault-displayAttrs:
            name: Do Not Attach 'default' Policy To Generated Tokens
            group: Tokens
        token_num_uses:
          description: The maximum number of times a token may be used, a value of
            zero means unlimited
          type: integer
          x-vault-displayAttrs:
            name: Maximum Uses of Generated Tokens
            group: Tokens
        token_period:
          description: If set, tokens created via this role will have no max lifetime;
            instead, their renewal period will be fixed to this value. This takes
            an integer number of seconds, or a string duration (e.g. "24h").
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Period
            group: Tokens
        token_policies:
          description: Comma-separated list of policies
          items:
            type: string
          type: array
          x-vault-displayAttrs:
            name: Generated Token's Policies
            group: Tokens
        token_ttl:
          description: The initial ttl of the token to generate
          format: seconds
          type: integer
          x-vault-displayAttrs:
            name: Generated Token's Initial TTL
            group: Tokens
        token_type:
          default: default-service
          description: The type of token to generate, service or batch
          type: string
          x-vault-displayAttrs:
            name: Generated Token's Type
            group: Tokens
        ttl:
          deprecated: true
          description: Use "token_ttl" instead. If this and "token_ttl" are both specified,
            only "token_ttl" will be used.
          format: seconds
          type: integer
      type: object
