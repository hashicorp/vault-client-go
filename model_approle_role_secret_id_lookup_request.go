/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// ApproleRoleSecretIdLookupRequest struct for ApproleRoleSecretIdLookupRequest
type ApproleRoleSecretIdLookupRequest struct {
	// SecretID attached to the role.
	SecretId *string `json:"secret_id,omitempty"`
}

// NewApproleRoleSecretIdLookupRequest instantiates a new ApproleRoleSecretIdLookupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproleRoleSecretIdLookupRequest() *ApproleRoleSecretIdLookupRequest {
	this := ApproleRoleSecretIdLookupRequest{}
	return &this
}

// NewApproleRoleSecretIdLookupRequestWithDefaults instantiates a new ApproleRoleSecretIdLookupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproleRoleSecretIdLookupRequestWithDefaults() *ApproleRoleSecretIdLookupRequest {
	this := ApproleRoleSecretIdLookupRequest{}
	return &this
}

// GetSecretId returns the SecretId field value if set, zero value otherwise.
func (o *ApproleRoleSecretIdLookupRequest) GetSecretId() string {
	if o == nil || o.SecretId == nil {
		var ret string
		return ret
	}
	return *o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleSecretIdLookupRequest) GetSecretIdOk() (*string, bool) {
	if o == nil || o.SecretId == nil {
		return nil, false
	}
	return o.SecretId, true
}

// HasSecretId returns a boolean if a field has been set.
func (o *ApproleRoleSecretIdLookupRequest) HasSecretId() bool {
	if o != nil && o.SecretId != nil {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given string and assigns it to the SecretId field.
func (o *ApproleRoleSecretIdLookupRequest) SetSecretId(v string) {
	o.SecretId = &v
}

func (o ApproleRoleSecretIdLookupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecretId != nil {
		toSerialize["secret_id"] = o.SecretId
	}
	return json.Marshal(toSerialize)
}

type NullableApproleRoleSecretIdLookupRequest struct {
	value *ApproleRoleSecretIdLookupRequest
	isSet bool
}

func (v NullableApproleRoleSecretIdLookupRequest) Get() *ApproleRoleSecretIdLookupRequest {
	return v.value
}

func (v *NullableApproleRoleSecretIdLookupRequest) Set(val *ApproleRoleSecretIdLookupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproleRoleSecretIdLookupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproleRoleSecretIdLookupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproleRoleSecretIdLookupRequest(val *ApproleRoleSecretIdLookupRequest) *NullableApproleRoleSecretIdLookupRequest {
	return &NullableApproleRoleSecretIdLookupRequest{value: val, isSet: true}
}

func (v NullableApproleRoleSecretIdLookupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproleRoleSecretIdLookupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


