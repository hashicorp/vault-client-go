/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.11.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GithubDuoAccessRequest struct for GithubDuoAccessRequest
type GithubDuoAccessRequest struct {
	// Duo api host
	Host *string `json:"host,omitempty"`
	// Duo integration key
	Ikey *string `json:"ikey,omitempty"`
	// Duo secret key
	Skey *string `json:"skey,omitempty"`
}

// NewGithubDuoAccessRequest instantiates a new GithubDuoAccessRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubDuoAccessRequest() *GithubDuoAccessRequest {
	this := GithubDuoAccessRequest{}
	return &this
}

// NewGithubDuoAccessRequestWithDefaults instantiates a new GithubDuoAccessRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubDuoAccessRequestWithDefaults() *GithubDuoAccessRequest {
	this := GithubDuoAccessRequest{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *GithubDuoAccessRequest) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubDuoAccessRequest) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *GithubDuoAccessRequest) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *GithubDuoAccessRequest) SetHost(v string) {
	o.Host = &v
}

// GetIkey returns the Ikey field value if set, zero value otherwise.
func (o *GithubDuoAccessRequest) GetIkey() string {
	if o == nil || o.Ikey == nil {
		var ret string
		return ret
	}
	return *o.Ikey
}

// GetIkeyOk returns a tuple with the Ikey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubDuoAccessRequest) GetIkeyOk() (*string, bool) {
	if o == nil || o.Ikey == nil {
		return nil, false
	}
	return o.Ikey, true
}

// HasIkey returns a boolean if a field has been set.
func (o *GithubDuoAccessRequest) HasIkey() bool {
	if o != nil && o.Ikey != nil {
		return true
	}

	return false
}

// SetIkey gets a reference to the given string and assigns it to the Ikey field.
func (o *GithubDuoAccessRequest) SetIkey(v string) {
	o.Ikey = &v
}

// GetSkey returns the Skey field value if set, zero value otherwise.
func (o *GithubDuoAccessRequest) GetSkey() string {
	if o == nil || o.Skey == nil {
		var ret string
		return ret
	}
	return *o.Skey
}

// GetSkeyOk returns a tuple with the Skey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubDuoAccessRequest) GetSkeyOk() (*string, bool) {
	if o == nil || o.Skey == nil {
		return nil, false
	}
	return o.Skey, true
}

// HasSkey returns a boolean if a field has been set.
func (o *GithubDuoAccessRequest) HasSkey() bool {
	if o != nil && o.Skey != nil {
		return true
	}

	return false
}

// SetSkey gets a reference to the given string and assigns it to the Skey field.
func (o *GithubDuoAccessRequest) SetSkey(v string) {
	o.Skey = &v
}

func (o GithubDuoAccessRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Ikey != nil {
		toSerialize["ikey"] = o.Ikey
	}
	if o.Skey != nil {
		toSerialize["skey"] = o.Skey
	}
	return json.Marshal(toSerialize)
}

type NullableGithubDuoAccessRequest struct {
	value *GithubDuoAccessRequest
	isSet bool
}

func (v NullableGithubDuoAccessRequest) Get() *GithubDuoAccessRequest {
	return v.value
}

func (v *NullableGithubDuoAccessRequest) Set(val *GithubDuoAccessRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubDuoAccessRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubDuoAccessRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubDuoAccessRequest(val *GithubDuoAccessRequest) *NullableGithubDuoAccessRequest {
	return &NullableGithubDuoAccessRequest{value: val, isSet: true}
}

func (v NullableGithubDuoAccessRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubDuoAccessRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


