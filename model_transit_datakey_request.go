/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// TransitDatakeyRequest struct for TransitDatakeyRequest
type TransitDatakeyRequest struct {
	// Number of bits for the key; currently 128, 256, and 512 bits are supported. Defaults to 256.
	Bits *int32 `json:"bits,omitempty"`
	// Context for key derivation. Required for derived keys.
	Context *string `json:"context,omitempty"`
	// The version of the Vault key to use for encryption of the data key. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version configured on the key.
	KeyVersion *int32 `json:"key_version,omitempty"`
	// Nonce for when convergent encryption v1 is used (only in Vault 0.6.1)
	Nonce *string `json:"nonce,omitempty"`
}

// NewTransitDatakeyRequest instantiates a new TransitDatakeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransitDatakeyRequest() *TransitDatakeyRequest {
	this := TransitDatakeyRequest{}
	var bits int32 = 256
	this.Bits = &bits
	return &this
}

// NewTransitDatakeyRequestWithDefaults instantiates a new TransitDatakeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitDatakeyRequestWithDefaults() *TransitDatakeyRequest {
	this := TransitDatakeyRequest{}
	var bits int32 = 256
	this.Bits = &bits
	return &this
}

// GetBits returns the Bits field value if set, zero value otherwise.
func (o *TransitDatakeyRequest) GetBits() int32 {
	if o == nil || o.Bits == nil {
		var ret int32
		return ret
	}
	return *o.Bits
}

// GetBitsOk returns a tuple with the Bits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDatakeyRequest) GetBitsOk() (*int32, bool) {
	if o == nil || o.Bits == nil {
		return nil, false
	}
	return o.Bits, true
}

// HasBits returns a boolean if a field has been set.
func (o *TransitDatakeyRequest) HasBits() bool {
	if o != nil && o.Bits != nil {
		return true
	}

	return false
}

// SetBits gets a reference to the given int32 and assigns it to the Bits field.
func (o *TransitDatakeyRequest) SetBits(v int32) {
	o.Bits = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TransitDatakeyRequest) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDatakeyRequest) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TransitDatakeyRequest) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *TransitDatakeyRequest) SetContext(v string) {
	o.Context = &v
}

// GetKeyVersion returns the KeyVersion field value if set, zero value otherwise.
func (o *TransitDatakeyRequest) GetKeyVersion() int32 {
	if o == nil || o.KeyVersion == nil {
		var ret int32
		return ret
	}
	return *o.KeyVersion
}

// GetKeyVersionOk returns a tuple with the KeyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDatakeyRequest) GetKeyVersionOk() (*int32, bool) {
	if o == nil || o.KeyVersion == nil {
		return nil, false
	}
	return o.KeyVersion, true
}

// HasKeyVersion returns a boolean if a field has been set.
func (o *TransitDatakeyRequest) HasKeyVersion() bool {
	if o != nil && o.KeyVersion != nil {
		return true
	}

	return false
}

// SetKeyVersion gets a reference to the given int32 and assigns it to the KeyVersion field.
func (o *TransitDatakeyRequest) SetKeyVersion(v int32) {
	o.KeyVersion = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *TransitDatakeyRequest) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDatakeyRequest) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *TransitDatakeyRequest) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *TransitDatakeyRequest) SetNonce(v string) {
	o.Nonce = &v
}

func (o TransitDatakeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bits != nil {
		toSerialize["bits"] = o.Bits
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.KeyVersion != nil {
		toSerialize["key_version"] = o.KeyVersion
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	return json.Marshal(toSerialize)
}

type NullableTransitDatakeyRequest struct {
	value *TransitDatakeyRequest
	isSet bool
}

func (v NullableTransitDatakeyRequest) Get() *TransitDatakeyRequest {
	return v.value
}

func (v *NullableTransitDatakeyRequest) Set(val *TransitDatakeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitDatakeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitDatakeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitDatakeyRequest(val *TransitDatakeyRequest) *NullableTransitDatakeyRequest {
	return &NullableTransitDatakeyRequest{value: val, isSet: true}
}

func (v NullableTransitDatakeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitDatakeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


