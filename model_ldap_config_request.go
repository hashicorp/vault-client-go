/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// LdapConfigRequest struct for LdapConfigRequest
type LdapConfigRequest struct {
	// Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
	AnonymousGroupSearch *bool `json:"anonymous_group_search,omitempty"`
	// LDAP DN for searching for the user DN (optional)
	Binddn *string `json:"binddn,omitempty"`
	// LDAP password for searching for the user DN (optional)
	Bindpass *string `json:"bindpass,omitempty"`
	// If true, case sensitivity will be used when comparing usernames and groups for matching policies.
	CaseSensitiveNames *bool `json:"case_sensitive_names,omitempty"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded (optional)
	Certificate *string `json:"certificate,omitempty"`
	// Client certificate to provide to the LDAP server, must be x509 PEM encoded (optional)
	ClientTlsCert *string `json:"client_tls_cert,omitempty"`
	// Client certificate key to provide to the LDAP server, must be x509 PEM encoded (optional)
	ClientTlsKey *string `json:"client_tls_key,omitempty"`
	// Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
	DenyNullBind *bool `json:"deny_null_bind,omitempty"`
	// Use anonymous bind to discover the bind DN of a user (optional)
	Discoverdn *bool `json:"discoverdn,omitempty"`
	// LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn
	Groupattr *string `json:"groupattr,omitempty"`
	// LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
	Groupdn *string `json:"groupdn,omitempty"`
	// Go template for querying group membership of user (optional) The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
	Groupfilter *string `json:"groupfilter,omitempty"`
	// Skip LDAP server SSL Certificate verification - VERY insecure (optional)
	InsecureTls *bool `json:"insecure_tls,omitempty"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *int32 `json:"request_timeout,omitempty"`
	// Issue a StartTLS command after establishing unencrypted connection (optional)
	Starttls *bool `json:"starttls,omitempty"`
	// Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMaxVersion *string `json:"tls_max_version,omitempty"`
	// Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
	TlsMinVersion *string `json:"tls_min_version,omitempty"`
	// Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.
	TokenBoundCidrs []string `json:"token_bound_cidrs,omitempty"`
	// If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.
	TokenExplicitMaxTtl *int32 `json:"token_explicit_max_ttl,omitempty"`
	// The maximum lifetime of the generated token
	TokenMaxTtl *int32 `json:"token_max_ttl,omitempty"`
	// If true, the 'default' policy will not automatically be added to generated tokens
	TokenNoDefaultPolicy *bool `json:"token_no_default_policy,omitempty"`
	// The maximum number of times a token may be used, a value of zero means unlimited
	TokenNumUses *int32 `json:"token_num_uses,omitempty"`
	// If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").
	TokenPeriod *int32 `json:"token_period,omitempty"`
	// Comma-separated list of policies. This will apply to all tokens generated by this auth method, in addition to any configured for specific users/groups.
	TokenPolicies []string `json:"token_policies,omitempty"`
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
	// The type of token to generate, service or batch
	TokenType *string `json:"token_type,omitempty"`
	// Enables userPrincipalDomain login with [username]@UPNDomain (optional)
	Upndomain *string `json:"upndomain,omitempty"`
	// LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
	Url *string `json:"url,omitempty"`
	// In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
	UsePre111GroupCnBehavior *bool `json:"use_pre111_group_cn_behavior,omitempty"`
	// If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
	UseTokenGroups *bool `json:"use_token_groups,omitempty"`
	// Attribute used for users (default: cn)
	Userattr *string `json:"userattr,omitempty"`
	// LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
	Userdn *string `json:"userdn,omitempty"`
	// Go template for LDAP user search filer (optional) The template can access the following context variables: UserAttr, Username Default: ({{.UserAttr}}={{.Username}})
	Userfilter *string `json:"userfilter,omitempty"`
	// If true, sets the alias name to the username
	UsernameAsAlias *bool `json:"username_as_alias,omitempty"`
}

// NewLdapConfigRequest instantiates a new LdapConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapConfigRequest() *LdapConfigRequest {
	this := LdapConfigRequest{}
	var anonymousGroupSearch bool = false
	this.AnonymousGroupSearch = &anonymousGroupSearch
	var denyNullBind bool = true
	this.DenyNullBind = &denyNullBind
	var groupattr string = "cn"
	this.Groupattr = &groupattr
	var groupfilter string = "(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))"
	this.Groupfilter = &groupfilter
	var tlsMaxVersion string = "tls12"
	this.TlsMaxVersion = &tlsMaxVersion
	var tlsMinVersion string = "tls12"
	this.TlsMinVersion = &tlsMinVersion
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	var url string = "ldap://127.0.0.1"
	this.Url = &url
	var useTokenGroups bool = false
	this.UseTokenGroups = &useTokenGroups
	var userattr string = "cn"
	this.Userattr = &userattr
	var userfilter string = "({{.UserAttr}}={{.Username}})"
	this.Userfilter = &userfilter
	var usernameAsAlias bool = false
	this.UsernameAsAlias = &usernameAsAlias
	return &this
}

// NewLdapConfigRequestWithDefaults instantiates a new LdapConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapConfigRequestWithDefaults() *LdapConfigRequest {
	this := LdapConfigRequest{}
	var anonymousGroupSearch bool = false
	this.AnonymousGroupSearch = &anonymousGroupSearch
	var denyNullBind bool = true
	this.DenyNullBind = &denyNullBind
	var groupattr string = "cn"
	this.Groupattr = &groupattr
	var groupfilter string = "(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))"
	this.Groupfilter = &groupfilter
	var tlsMaxVersion string = "tls12"
	this.TlsMaxVersion = &tlsMaxVersion
	var tlsMinVersion string = "tls12"
	this.TlsMinVersion = &tlsMinVersion
	var tokenType string = "default-service"
	this.TokenType = &tokenType
	var url string = "ldap://127.0.0.1"
	this.Url = &url
	var useTokenGroups bool = false
	this.UseTokenGroups = &useTokenGroups
	var userattr string = "cn"
	this.Userattr = &userattr
	var userfilter string = "({{.UserAttr}}={{.Username}})"
	this.Userfilter = &userfilter
	var usernameAsAlias bool = false
	this.UsernameAsAlias = &usernameAsAlias
	return &this
}

// GetAnonymousGroupSearch returns the AnonymousGroupSearch field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetAnonymousGroupSearch() bool {
	if o == nil || o.AnonymousGroupSearch == nil {
		var ret bool
		return ret
	}
	return *o.AnonymousGroupSearch
}

// GetAnonymousGroupSearchOk returns a tuple with the AnonymousGroupSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetAnonymousGroupSearchOk() (*bool, bool) {
	if o == nil || o.AnonymousGroupSearch == nil {
		return nil, false
	}
	return o.AnonymousGroupSearch, true
}

// HasAnonymousGroupSearch returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasAnonymousGroupSearch() bool {
	if o != nil && o.AnonymousGroupSearch != nil {
		return true
	}

	return false
}

// SetAnonymousGroupSearch gets a reference to the given bool and assigns it to the AnonymousGroupSearch field.
func (o *LdapConfigRequest) SetAnonymousGroupSearch(v bool) {
	o.AnonymousGroupSearch = &v
}

// GetBinddn returns the Binddn field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetBinddn() string {
	if o == nil || o.Binddn == nil {
		var ret string
		return ret
	}
	return *o.Binddn
}

// GetBinddnOk returns a tuple with the Binddn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetBinddnOk() (*string, bool) {
	if o == nil || o.Binddn == nil {
		return nil, false
	}
	return o.Binddn, true
}

// HasBinddn returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasBinddn() bool {
	if o != nil && o.Binddn != nil {
		return true
	}

	return false
}

// SetBinddn gets a reference to the given string and assigns it to the Binddn field.
func (o *LdapConfigRequest) SetBinddn(v string) {
	o.Binddn = &v
}

// GetBindpass returns the Bindpass field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetBindpass() string {
	if o == nil || o.Bindpass == nil {
		var ret string
		return ret
	}
	return *o.Bindpass
}

// GetBindpassOk returns a tuple with the Bindpass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetBindpassOk() (*string, bool) {
	if o == nil || o.Bindpass == nil {
		return nil, false
	}
	return o.Bindpass, true
}

// HasBindpass returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasBindpass() bool {
	if o != nil && o.Bindpass != nil {
		return true
	}

	return false
}

// SetBindpass gets a reference to the given string and assigns it to the Bindpass field.
func (o *LdapConfigRequest) SetBindpass(v string) {
	o.Bindpass = &v
}

// GetCaseSensitiveNames returns the CaseSensitiveNames field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetCaseSensitiveNames() bool {
	if o == nil || o.CaseSensitiveNames == nil {
		var ret bool
		return ret
	}
	return *o.CaseSensitiveNames
}

// GetCaseSensitiveNamesOk returns a tuple with the CaseSensitiveNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetCaseSensitiveNamesOk() (*bool, bool) {
	if o == nil || o.CaseSensitiveNames == nil {
		return nil, false
	}
	return o.CaseSensitiveNames, true
}

// HasCaseSensitiveNames returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasCaseSensitiveNames() bool {
	if o != nil && o.CaseSensitiveNames != nil {
		return true
	}

	return false
}

// SetCaseSensitiveNames gets a reference to the given bool and assigns it to the CaseSensitiveNames field.
func (o *LdapConfigRequest) SetCaseSensitiveNames(v bool) {
	o.CaseSensitiveNames = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *LdapConfigRequest) SetCertificate(v string) {
	o.Certificate = &v
}

// GetClientTlsCert returns the ClientTlsCert field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetClientTlsCert() string {
	if o == nil || o.ClientTlsCert == nil {
		var ret string
		return ret
	}
	return *o.ClientTlsCert
}

// GetClientTlsCertOk returns a tuple with the ClientTlsCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetClientTlsCertOk() (*string, bool) {
	if o == nil || o.ClientTlsCert == nil {
		return nil, false
	}
	return o.ClientTlsCert, true
}

// HasClientTlsCert returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasClientTlsCert() bool {
	if o != nil && o.ClientTlsCert != nil {
		return true
	}

	return false
}

// SetClientTlsCert gets a reference to the given string and assigns it to the ClientTlsCert field.
func (o *LdapConfigRequest) SetClientTlsCert(v string) {
	o.ClientTlsCert = &v
}

// GetClientTlsKey returns the ClientTlsKey field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetClientTlsKey() string {
	if o == nil || o.ClientTlsKey == nil {
		var ret string
		return ret
	}
	return *o.ClientTlsKey
}

// GetClientTlsKeyOk returns a tuple with the ClientTlsKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetClientTlsKeyOk() (*string, bool) {
	if o == nil || o.ClientTlsKey == nil {
		return nil, false
	}
	return o.ClientTlsKey, true
}

// HasClientTlsKey returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasClientTlsKey() bool {
	if o != nil && o.ClientTlsKey != nil {
		return true
	}

	return false
}

// SetClientTlsKey gets a reference to the given string and assigns it to the ClientTlsKey field.
func (o *LdapConfigRequest) SetClientTlsKey(v string) {
	o.ClientTlsKey = &v
}

// GetDenyNullBind returns the DenyNullBind field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetDenyNullBind() bool {
	if o == nil || o.DenyNullBind == nil {
		var ret bool
		return ret
	}
	return *o.DenyNullBind
}

// GetDenyNullBindOk returns a tuple with the DenyNullBind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetDenyNullBindOk() (*bool, bool) {
	if o == nil || o.DenyNullBind == nil {
		return nil, false
	}
	return o.DenyNullBind, true
}

// HasDenyNullBind returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasDenyNullBind() bool {
	if o != nil && o.DenyNullBind != nil {
		return true
	}

	return false
}

// SetDenyNullBind gets a reference to the given bool and assigns it to the DenyNullBind field.
func (o *LdapConfigRequest) SetDenyNullBind(v bool) {
	o.DenyNullBind = &v
}

// GetDiscoverdn returns the Discoverdn field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetDiscoverdn() bool {
	if o == nil || o.Discoverdn == nil {
		var ret bool
		return ret
	}
	return *o.Discoverdn
}

// GetDiscoverdnOk returns a tuple with the Discoverdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetDiscoverdnOk() (*bool, bool) {
	if o == nil || o.Discoverdn == nil {
		return nil, false
	}
	return o.Discoverdn, true
}

// HasDiscoverdn returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasDiscoverdn() bool {
	if o != nil && o.Discoverdn != nil {
		return true
	}

	return false
}

// SetDiscoverdn gets a reference to the given bool and assigns it to the Discoverdn field.
func (o *LdapConfigRequest) SetDiscoverdn(v bool) {
	o.Discoverdn = &v
}

// GetGroupattr returns the Groupattr field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetGroupattr() string {
	if o == nil || o.Groupattr == nil {
		var ret string
		return ret
	}
	return *o.Groupattr
}

// GetGroupattrOk returns a tuple with the Groupattr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetGroupattrOk() (*string, bool) {
	if o == nil || o.Groupattr == nil {
		return nil, false
	}
	return o.Groupattr, true
}

// HasGroupattr returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasGroupattr() bool {
	if o != nil && o.Groupattr != nil {
		return true
	}

	return false
}

// SetGroupattr gets a reference to the given string and assigns it to the Groupattr field.
func (o *LdapConfigRequest) SetGroupattr(v string) {
	o.Groupattr = &v
}

// GetGroupdn returns the Groupdn field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetGroupdn() string {
	if o == nil || o.Groupdn == nil {
		var ret string
		return ret
	}
	return *o.Groupdn
}

// GetGroupdnOk returns a tuple with the Groupdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetGroupdnOk() (*string, bool) {
	if o == nil || o.Groupdn == nil {
		return nil, false
	}
	return o.Groupdn, true
}

// HasGroupdn returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasGroupdn() bool {
	if o != nil && o.Groupdn != nil {
		return true
	}

	return false
}

// SetGroupdn gets a reference to the given string and assigns it to the Groupdn field.
func (o *LdapConfigRequest) SetGroupdn(v string) {
	o.Groupdn = &v
}

// GetGroupfilter returns the Groupfilter field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetGroupfilter() string {
	if o == nil || o.Groupfilter == nil {
		var ret string
		return ret
	}
	return *o.Groupfilter
}

// GetGroupfilterOk returns a tuple with the Groupfilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetGroupfilterOk() (*string, bool) {
	if o == nil || o.Groupfilter == nil {
		return nil, false
	}
	return o.Groupfilter, true
}

// HasGroupfilter returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasGroupfilter() bool {
	if o != nil && o.Groupfilter != nil {
		return true
	}

	return false
}

// SetGroupfilter gets a reference to the given string and assigns it to the Groupfilter field.
func (o *LdapConfigRequest) SetGroupfilter(v string) {
	o.Groupfilter = &v
}

// GetInsecureTls returns the InsecureTls field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetInsecureTls() bool {
	if o == nil || o.InsecureTls == nil {
		var ret bool
		return ret
	}
	return *o.InsecureTls
}

// GetInsecureTlsOk returns a tuple with the InsecureTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetInsecureTlsOk() (*bool, bool) {
	if o == nil || o.InsecureTls == nil {
		return nil, false
	}
	return o.InsecureTls, true
}

// HasInsecureTls returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasInsecureTls() bool {
	if o != nil && o.InsecureTls != nil {
		return true
	}

	return false
}

// SetInsecureTls gets a reference to the given bool and assigns it to the InsecureTls field.
func (o *LdapConfigRequest) SetInsecureTls(v bool) {
	o.InsecureTls = &v
}

// GetRequestTimeout returns the RequestTimeout field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetRequestTimeout() int32 {
	if o == nil || o.RequestTimeout == nil {
		var ret int32
		return ret
	}
	return *o.RequestTimeout
}

// GetRequestTimeoutOk returns a tuple with the RequestTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetRequestTimeoutOk() (*int32, bool) {
	if o == nil || o.RequestTimeout == nil {
		return nil, false
	}
	return o.RequestTimeout, true
}

// HasRequestTimeout returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasRequestTimeout() bool {
	if o != nil && o.RequestTimeout != nil {
		return true
	}

	return false
}

// SetRequestTimeout gets a reference to the given int32 and assigns it to the RequestTimeout field.
func (o *LdapConfigRequest) SetRequestTimeout(v int32) {
	o.RequestTimeout = &v
}

// GetStarttls returns the Starttls field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetStarttls() bool {
	if o == nil || o.Starttls == nil {
		var ret bool
		return ret
	}
	return *o.Starttls
}

// GetStarttlsOk returns a tuple with the Starttls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetStarttlsOk() (*bool, bool) {
	if o == nil || o.Starttls == nil {
		return nil, false
	}
	return o.Starttls, true
}

// HasStarttls returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasStarttls() bool {
	if o != nil && o.Starttls != nil {
		return true
	}

	return false
}

// SetStarttls gets a reference to the given bool and assigns it to the Starttls field.
func (o *LdapConfigRequest) SetStarttls(v bool) {
	o.Starttls = &v
}

// GetTlsMaxVersion returns the TlsMaxVersion field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTlsMaxVersion() string {
	if o == nil || o.TlsMaxVersion == nil {
		var ret string
		return ret
	}
	return *o.TlsMaxVersion
}

// GetTlsMaxVersionOk returns a tuple with the TlsMaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTlsMaxVersionOk() (*string, bool) {
	if o == nil || o.TlsMaxVersion == nil {
		return nil, false
	}
	return o.TlsMaxVersion, true
}

// HasTlsMaxVersion returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTlsMaxVersion() bool {
	if o != nil && o.TlsMaxVersion != nil {
		return true
	}

	return false
}

// SetTlsMaxVersion gets a reference to the given string and assigns it to the TlsMaxVersion field.
func (o *LdapConfigRequest) SetTlsMaxVersion(v string) {
	o.TlsMaxVersion = &v
}

// GetTlsMinVersion returns the TlsMinVersion field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTlsMinVersion() string {
	if o == nil || o.TlsMinVersion == nil {
		var ret string
		return ret
	}
	return *o.TlsMinVersion
}

// GetTlsMinVersionOk returns a tuple with the TlsMinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTlsMinVersionOk() (*string, bool) {
	if o == nil || o.TlsMinVersion == nil {
		return nil, false
	}
	return o.TlsMinVersion, true
}

// HasTlsMinVersion returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTlsMinVersion() bool {
	if o != nil && o.TlsMinVersion != nil {
		return true
	}

	return false
}

// SetTlsMinVersion gets a reference to the given string and assigns it to the TlsMinVersion field.
func (o *LdapConfigRequest) SetTlsMinVersion(v string) {
	o.TlsMinVersion = &v
}

// GetTokenBoundCidrs returns the TokenBoundCidrs field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenBoundCidrs() []string {
	if o == nil || o.TokenBoundCidrs == nil {
		var ret []string
		return ret
	}
	return o.TokenBoundCidrs
}

// GetTokenBoundCidrsOk returns a tuple with the TokenBoundCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenBoundCidrsOk() ([]string, bool) {
	if o == nil || o.TokenBoundCidrs == nil {
		return nil, false
	}
	return o.TokenBoundCidrs, true
}

// HasTokenBoundCidrs returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenBoundCidrs() bool {
	if o != nil && o.TokenBoundCidrs != nil {
		return true
	}

	return false
}

// SetTokenBoundCidrs gets a reference to the given []string and assigns it to the TokenBoundCidrs field.
func (o *LdapConfigRequest) SetTokenBoundCidrs(v []string) {
	o.TokenBoundCidrs = v
}

// GetTokenExplicitMaxTtl returns the TokenExplicitMaxTtl field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenExplicitMaxTtl() int32 {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenExplicitMaxTtl
}

// GetTokenExplicitMaxTtlOk returns a tuple with the TokenExplicitMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenExplicitMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenExplicitMaxTtl == nil {
		return nil, false
	}
	return o.TokenExplicitMaxTtl, true
}

// HasTokenExplicitMaxTtl returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenExplicitMaxTtl() bool {
	if o != nil && o.TokenExplicitMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenExplicitMaxTtl gets a reference to the given int32 and assigns it to the TokenExplicitMaxTtl field.
func (o *LdapConfigRequest) SetTokenExplicitMaxTtl(v int32) {
	o.TokenExplicitMaxTtl = &v
}

// GetTokenMaxTtl returns the TokenMaxTtl field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenMaxTtl() int32 {
	if o == nil || o.TokenMaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenMaxTtl
}

// GetTokenMaxTtlOk returns a tuple with the TokenMaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenMaxTtlOk() (*int32, bool) {
	if o == nil || o.TokenMaxTtl == nil {
		return nil, false
	}
	return o.TokenMaxTtl, true
}

// HasTokenMaxTtl returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenMaxTtl() bool {
	if o != nil && o.TokenMaxTtl != nil {
		return true
	}

	return false
}

// SetTokenMaxTtl gets a reference to the given int32 and assigns it to the TokenMaxTtl field.
func (o *LdapConfigRequest) SetTokenMaxTtl(v int32) {
	o.TokenMaxTtl = &v
}

// GetTokenNoDefaultPolicy returns the TokenNoDefaultPolicy field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenNoDefaultPolicy() bool {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		var ret bool
		return ret
	}
	return *o.TokenNoDefaultPolicy
}

// GetTokenNoDefaultPolicyOk returns a tuple with the TokenNoDefaultPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenNoDefaultPolicyOk() (*bool, bool) {
	if o == nil || o.TokenNoDefaultPolicy == nil {
		return nil, false
	}
	return o.TokenNoDefaultPolicy, true
}

// HasTokenNoDefaultPolicy returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenNoDefaultPolicy() bool {
	if o != nil && o.TokenNoDefaultPolicy != nil {
		return true
	}

	return false
}

// SetTokenNoDefaultPolicy gets a reference to the given bool and assigns it to the TokenNoDefaultPolicy field.
func (o *LdapConfigRequest) SetTokenNoDefaultPolicy(v bool) {
	o.TokenNoDefaultPolicy = &v
}

// GetTokenNumUses returns the TokenNumUses field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenNumUses() int32 {
	if o == nil || o.TokenNumUses == nil {
		var ret int32
		return ret
	}
	return *o.TokenNumUses
}

// GetTokenNumUsesOk returns a tuple with the TokenNumUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenNumUsesOk() (*int32, bool) {
	if o == nil || o.TokenNumUses == nil {
		return nil, false
	}
	return o.TokenNumUses, true
}

// HasTokenNumUses returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenNumUses() bool {
	if o != nil && o.TokenNumUses != nil {
		return true
	}

	return false
}

// SetTokenNumUses gets a reference to the given int32 and assigns it to the TokenNumUses field.
func (o *LdapConfigRequest) SetTokenNumUses(v int32) {
	o.TokenNumUses = &v
}

// GetTokenPeriod returns the TokenPeriod field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenPeriod() int32 {
	if o == nil || o.TokenPeriod == nil {
		var ret int32
		return ret
	}
	return *o.TokenPeriod
}

// GetTokenPeriodOk returns a tuple with the TokenPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenPeriodOk() (*int32, bool) {
	if o == nil || o.TokenPeriod == nil {
		return nil, false
	}
	return o.TokenPeriod, true
}

// HasTokenPeriod returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenPeriod() bool {
	if o != nil && o.TokenPeriod != nil {
		return true
	}

	return false
}

// SetTokenPeriod gets a reference to the given int32 and assigns it to the TokenPeriod field.
func (o *LdapConfigRequest) SetTokenPeriod(v int32) {
	o.TokenPeriod = &v
}

// GetTokenPolicies returns the TokenPolicies field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenPolicies() []string {
	if o == nil || o.TokenPolicies == nil {
		var ret []string
		return ret
	}
	return o.TokenPolicies
}

// GetTokenPoliciesOk returns a tuple with the TokenPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenPoliciesOk() ([]string, bool) {
	if o == nil || o.TokenPolicies == nil {
		return nil, false
	}
	return o.TokenPolicies, true
}

// HasTokenPolicies returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenPolicies() bool {
	if o != nil && o.TokenPolicies != nil {
		return true
	}

	return false
}

// SetTokenPolicies gets a reference to the given []string and assigns it to the TokenPolicies field.
func (o *LdapConfigRequest) SetTokenPolicies(v []string) {
	o.TokenPolicies = v
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *LdapConfigRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetTokenType() string {
	if o == nil || o.TokenType == nil {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetTokenTypeOk() (*string, bool) {
	if o == nil || o.TokenType == nil {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasTokenType() bool {
	if o != nil && o.TokenType != nil {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *LdapConfigRequest) SetTokenType(v string) {
	o.TokenType = &v
}

// GetUpndomain returns the Upndomain field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUpndomain() string {
	if o == nil || o.Upndomain == nil {
		var ret string
		return ret
	}
	return *o.Upndomain
}

// GetUpndomainOk returns a tuple with the Upndomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUpndomainOk() (*string, bool) {
	if o == nil || o.Upndomain == nil {
		return nil, false
	}
	return o.Upndomain, true
}

// HasUpndomain returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUpndomain() bool {
	if o != nil && o.Upndomain != nil {
		return true
	}

	return false
}

// SetUpndomain gets a reference to the given string and assigns it to the Upndomain field.
func (o *LdapConfigRequest) SetUpndomain(v string) {
	o.Upndomain = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *LdapConfigRequest) SetUrl(v string) {
	o.Url = &v
}

// GetUsePre111GroupCnBehavior returns the UsePre111GroupCnBehavior field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUsePre111GroupCnBehavior() bool {
	if o == nil || o.UsePre111GroupCnBehavior == nil {
		var ret bool
		return ret
	}
	return *o.UsePre111GroupCnBehavior
}

// GetUsePre111GroupCnBehaviorOk returns a tuple with the UsePre111GroupCnBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUsePre111GroupCnBehaviorOk() (*bool, bool) {
	if o == nil || o.UsePre111GroupCnBehavior == nil {
		return nil, false
	}
	return o.UsePre111GroupCnBehavior, true
}

// HasUsePre111GroupCnBehavior returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUsePre111GroupCnBehavior() bool {
	if o != nil && o.UsePre111GroupCnBehavior != nil {
		return true
	}

	return false
}

// SetUsePre111GroupCnBehavior gets a reference to the given bool and assigns it to the UsePre111GroupCnBehavior field.
func (o *LdapConfigRequest) SetUsePre111GroupCnBehavior(v bool) {
	o.UsePre111GroupCnBehavior = &v
}

// GetUseTokenGroups returns the UseTokenGroups field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUseTokenGroups() bool {
	if o == nil || o.UseTokenGroups == nil {
		var ret bool
		return ret
	}
	return *o.UseTokenGroups
}

// GetUseTokenGroupsOk returns a tuple with the UseTokenGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUseTokenGroupsOk() (*bool, bool) {
	if o == nil || o.UseTokenGroups == nil {
		return nil, false
	}
	return o.UseTokenGroups, true
}

// HasUseTokenGroups returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUseTokenGroups() bool {
	if o != nil && o.UseTokenGroups != nil {
		return true
	}

	return false
}

// SetUseTokenGroups gets a reference to the given bool and assigns it to the UseTokenGroups field.
func (o *LdapConfigRequest) SetUseTokenGroups(v bool) {
	o.UseTokenGroups = &v
}

// GetUserattr returns the Userattr field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUserattr() string {
	if o == nil || o.Userattr == nil {
		var ret string
		return ret
	}
	return *o.Userattr
}

// GetUserattrOk returns a tuple with the Userattr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUserattrOk() (*string, bool) {
	if o == nil || o.Userattr == nil {
		return nil, false
	}
	return o.Userattr, true
}

// HasUserattr returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUserattr() bool {
	if o != nil && o.Userattr != nil {
		return true
	}

	return false
}

// SetUserattr gets a reference to the given string and assigns it to the Userattr field.
func (o *LdapConfigRequest) SetUserattr(v string) {
	o.Userattr = &v
}

// GetUserdn returns the Userdn field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUserdn() string {
	if o == nil || o.Userdn == nil {
		var ret string
		return ret
	}
	return *o.Userdn
}

// GetUserdnOk returns a tuple with the Userdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUserdnOk() (*string, bool) {
	if o == nil || o.Userdn == nil {
		return nil, false
	}
	return o.Userdn, true
}

// HasUserdn returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUserdn() bool {
	if o != nil && o.Userdn != nil {
		return true
	}

	return false
}

// SetUserdn gets a reference to the given string and assigns it to the Userdn field.
func (o *LdapConfigRequest) SetUserdn(v string) {
	o.Userdn = &v
}

// GetUserfilter returns the Userfilter field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUserfilter() string {
	if o == nil || o.Userfilter == nil {
		var ret string
		return ret
	}
	return *o.Userfilter
}

// GetUserfilterOk returns a tuple with the Userfilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUserfilterOk() (*string, bool) {
	if o == nil || o.Userfilter == nil {
		return nil, false
	}
	return o.Userfilter, true
}

// HasUserfilter returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUserfilter() bool {
	if o != nil && o.Userfilter != nil {
		return true
	}

	return false
}

// SetUserfilter gets a reference to the given string and assigns it to the Userfilter field.
func (o *LdapConfigRequest) SetUserfilter(v string) {
	o.Userfilter = &v
}

// GetUsernameAsAlias returns the UsernameAsAlias field value if set, zero value otherwise.
func (o *LdapConfigRequest) GetUsernameAsAlias() bool {
	if o == nil || o.UsernameAsAlias == nil {
		var ret bool
		return ret
	}
	return *o.UsernameAsAlias
}

// GetUsernameAsAliasOk returns a tuple with the UsernameAsAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConfigRequest) GetUsernameAsAliasOk() (*bool, bool) {
	if o == nil || o.UsernameAsAlias == nil {
		return nil, false
	}
	return o.UsernameAsAlias, true
}

// HasUsernameAsAlias returns a boolean if a field has been set.
func (o *LdapConfigRequest) HasUsernameAsAlias() bool {
	if o != nil && o.UsernameAsAlias != nil {
		return true
	}

	return false
}

// SetUsernameAsAlias gets a reference to the given bool and assigns it to the UsernameAsAlias field.
func (o *LdapConfigRequest) SetUsernameAsAlias(v bool) {
	o.UsernameAsAlias = &v
}

func (o LdapConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AnonymousGroupSearch != nil {
		toSerialize["anonymous_group_search"] = o.AnonymousGroupSearch
	}
	if o.Binddn != nil {
		toSerialize["binddn"] = o.Binddn
	}
	if o.Bindpass != nil {
		toSerialize["bindpass"] = o.Bindpass
	}
	if o.CaseSensitiveNames != nil {
		toSerialize["case_sensitive_names"] = o.CaseSensitiveNames
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.ClientTlsCert != nil {
		toSerialize["client_tls_cert"] = o.ClientTlsCert
	}
	if o.ClientTlsKey != nil {
		toSerialize["client_tls_key"] = o.ClientTlsKey
	}
	if o.DenyNullBind != nil {
		toSerialize["deny_null_bind"] = o.DenyNullBind
	}
	if o.Discoverdn != nil {
		toSerialize["discoverdn"] = o.Discoverdn
	}
	if o.Groupattr != nil {
		toSerialize["groupattr"] = o.Groupattr
	}
	if o.Groupdn != nil {
		toSerialize["groupdn"] = o.Groupdn
	}
	if o.Groupfilter != nil {
		toSerialize["groupfilter"] = o.Groupfilter
	}
	if o.InsecureTls != nil {
		toSerialize["insecure_tls"] = o.InsecureTls
	}
	if o.RequestTimeout != nil {
		toSerialize["request_timeout"] = o.RequestTimeout
	}
	if o.Starttls != nil {
		toSerialize["starttls"] = o.Starttls
	}
	if o.TlsMaxVersion != nil {
		toSerialize["tls_max_version"] = o.TlsMaxVersion
	}
	if o.TlsMinVersion != nil {
		toSerialize["tls_min_version"] = o.TlsMinVersion
	}
	if o.TokenBoundCidrs != nil {
		toSerialize["token_bound_cidrs"] = o.TokenBoundCidrs
	}
	if o.TokenExplicitMaxTtl != nil {
		toSerialize["token_explicit_max_ttl"] = o.TokenExplicitMaxTtl
	}
	if o.TokenMaxTtl != nil {
		toSerialize["token_max_ttl"] = o.TokenMaxTtl
	}
	if o.TokenNoDefaultPolicy != nil {
		toSerialize["token_no_default_policy"] = o.TokenNoDefaultPolicy
	}
	if o.TokenNumUses != nil {
		toSerialize["token_num_uses"] = o.TokenNumUses
	}
	if o.TokenPeriod != nil {
		toSerialize["token_period"] = o.TokenPeriod
	}
	if o.TokenPolicies != nil {
		toSerialize["token_policies"] = o.TokenPolicies
	}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	if o.TokenType != nil {
		toSerialize["token_type"] = o.TokenType
	}
	if o.Upndomain != nil {
		toSerialize["upndomain"] = o.Upndomain
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.UsePre111GroupCnBehavior != nil {
		toSerialize["use_pre111_group_cn_behavior"] = o.UsePre111GroupCnBehavior
	}
	if o.UseTokenGroups != nil {
		toSerialize["use_token_groups"] = o.UseTokenGroups
	}
	if o.Userattr != nil {
		toSerialize["userattr"] = o.Userattr
	}
	if o.Userdn != nil {
		toSerialize["userdn"] = o.Userdn
	}
	if o.Userfilter != nil {
		toSerialize["userfilter"] = o.Userfilter
	}
	if o.UsernameAsAlias != nil {
		toSerialize["username_as_alias"] = o.UsernameAsAlias
	}
	return json.Marshal(toSerialize)
}

type NullableLdapConfigRequest struct {
	value *LdapConfigRequest
	isSet bool
}

func (v NullableLdapConfigRequest) Get() *LdapConfigRequest {
	return v.value
}

func (v *NullableLdapConfigRequest) Set(val *LdapConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapConfigRequest(val *LdapConfigRequest) *NullableLdapConfigRequest {
	return &NullableLdapConfigRequest{value: val, isSet: true}
}

func (v NullableLdapConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


