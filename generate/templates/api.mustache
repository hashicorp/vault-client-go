{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"context"
	"net/http"
	"net/url"
{{#imports}}	"{{import}}"
{{/imports}}
)

// {{classname}} is a simple wrapper around the client for {{classname}} requests
type {{classname}} struct {
	client *Client
}
{{#operation}}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
// {{operationId}} {{{summary}}}
{{#notes}}
// {{{notes}}}
{{/notes}}
{{#allParams}}
{{#description}}
// {{paramName}}: {{.}}
{{/description}}
{{/allParams}}
func (a *{{{classname}}}) {{nickname}}(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}{{#allParams}}{{^isPathParam}}, {{paramName}} {{{dataType}}}{{/isPathParam}}{{/allParams}}, options ...RequestOption) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}*Response[map[string]interface{}], error) {
	requestPath := "/v1{{{path}}}"{{#pathParams}}
	requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape({{paramName}}), -1){{/pathParams}}

	modifiers, err := requestOptionsToRequestModifiers(options)
	if err != nil {
		return nil, err
	}

{{#bodyParams}}
	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.Method{{httpMethod}},
		requestPath,
	 	{{paramName}},
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
{{/bodyParams}}
{{^bodyParams}}
	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.Method{{httpMethod}},
		requestPath,
		nil,       // request body
		nil,       // request query parameters
		modifiers, // request modifiers (headers & callbacks)
	)
{{/bodyParams}}
}
{{/operation}}
{{/operations}}
