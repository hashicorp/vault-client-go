/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"context"
	"net/http"
	"net/url"
	"strings"
)

// System is a simple wrapper around the client for System requests
type System struct {
	client *Client
}

// DeleteSystemAuditPath Disable the audit device at the given path.
// path: The name of the backend. Cannot be delimited. Example: \&quot;mysql\&quot;
func (a *System) DeleteSystemAuditPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemAuthPath Disable the auth method at the given auth path
// path: The path to mount to. Cannot be delimited. Example: \&quot;user\&quot;
func (a *System) DeleteSystemAuthPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemConfigAuditingRequestHeadersHeader Disable auditing of the given request header.
func (a *System) DeleteSystemConfigAuditingRequestHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemConfigCors Remove any CORS settings.
func (a *System) DeleteSystemConfigCors(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/cors"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemConfigUiHeadersHeader Remove a UI header.
// header: The name of the header.
func (a *System) DeleteSystemConfigUiHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemGenerateRoot Cancels any in-progress root generation attempt.
func (a *System) DeleteSystemGenerateRoot(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemGenerateRootAttempt Cancels any in-progress root generation attempt.
func (a *System) DeleteSystemGenerateRootAttempt(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/attempt"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemLoggers Revert the all loggers to use log level provided in config.
func (a *System) DeleteSystemLoggers(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/loggers"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemLoggersName Revert a single logger to use log level provided in config.
// name: The name of the logger to be modified.
func (a *System) DeleteSystemLoggersName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/loggers/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemMountsPath Disable the mount point specified at the given path.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) DeleteSystemMountsPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemPluginsCatalogName Remove the plugin with the given name.
// name: The name of the plugin
func (a *System) DeleteSystemPluginsCatalogName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemPluginsCatalogTypeName Remove the plugin with the given name.
// name: The name of the plugin
// type_: The type of the plugin, may be auth, secret, or database
func (a *System) DeleteSystemPluginsCatalogTypeName(ctx context.Context, name string, type_ string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemPoliciesAclName Delete the ACL policy with the given name.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) DeleteSystemPoliciesAclName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemPoliciesPasswordName Delete a password policy.
// name: The name of the password policy.
func (a *System) DeleteSystemPoliciesPasswordName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemPolicyName Delete the policy with the given name.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) DeleteSystemPolicyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemQuotasRateLimitName
// name: Name of the quota rule.
func (a *System) DeleteSystemQuotasRateLimitName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemRaw Delete the key with given path.
func (a *System) DeleteSystemRaw(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemRawPath Delete the key with given path.
func (a *System) DeleteSystemRawPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemRekeyBackup Delete the backup copy of PGP-encrypted unseal keys.
func (a *System) DeleteSystemRekeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemRekeyInit Cancels any in-progress rekey.
// This clears the rekey settings as well as any progress made. This must be called to change the parameters of the rekey. Note: verification is still a part of a rekey. If rekeying is canceled during the verification flow, the current unseal keys remain valid.
func (a *System) DeleteSystemRekeyInit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/init"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemRekeyRecoveryKeyBackup Allows fetching or deleting the backup of the rotated unseal keys.
func (a *System) DeleteSystemRekeyRecoveryKeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/recovery-key-backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// DeleteSystemRekeyVerify Cancel any in-progress rekey verification operation.
// This clears any progress made and resets the nonce. Unlike a `DELETE` against `sys/rekey/init`, this only resets the current verification operation, not the entire rekey atttempt.
func (a *System) DeleteSystemRekeyVerify(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/verify"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodDelete,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemConfigUiHeaders Return a list of configured UI headers.
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemConfigUiHeaders(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemLeasesLookup Returns a list of lease ids.
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemLeasesLookup(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/lookup/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemLeasesLookupPrefix Returns a list of lease ids.
// prefix: The path to list leases under. Example: \&quot;aws/creds/deploy\&quot;
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemLeasesLookupPrefix(ctx context.Context, prefix string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/lookup/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemPluginsCatalogType List the plugins in the catalog.
// type_: The type of the plugin, may be auth, secret, or database
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemPluginsCatalogType(ctx context.Context, type_ string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}"
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemPoliciesAcl List the configured access control policies.
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemPoliciesAcl(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemPoliciesPassword List the existing password policies.
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemPoliciesPassword(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemQuotasRateLimit
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemQuotasRateLimit(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ListSystemVersionHistory Returns map of historical version change entries
// list: Must be set to &#x60;true&#x60;
func (a *System) ListSystemVersionHistory(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/version-history/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemAudit List the enabled audit devices.
func (a *System) ReadSystemAudit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemAuth List the currently enabled credential backends.
func (a *System) ReadSystemAuth(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemAuthPath Read the configuration of the auth engine at the given path.
// path: The path to mount to. Cannot be delimited. Example: \&quot;user\&quot;
func (a *System) ReadSystemAuthPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemAuthPathTune Reads the given auth path's configuration.
// This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
// path: Tune the configuration parameters for an auth path.
func (a *System) ReadSystemAuthPathTune(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemConfigAuditingRequestHeaders List the request headers that are configured to be audited.
func (a *System) ReadSystemConfigAuditingRequestHeaders(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemConfigAuditingRequestHeadersHeader List the information for the given request header.
func (a *System) ReadSystemConfigAuditingRequestHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemConfigCors Return the current CORS settings.
func (a *System) ReadSystemConfigCors(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/cors"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemConfigStateSanitized Return a sanitized version of the Vault server configuration.
// The sanitized output strips configuration values in the storage, HA storage, and seals stanzas, which may contain sensitive values such as API tokens. It also removes any token or secret fields in other stanzas, such as the circonus_api_token from telemetry.
func (a *System) ReadSystemConfigStateSanitized(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/state/sanitized"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemConfigUiHeadersHeader Return the given UI header's configuration
// header: The name of the header.
func (a *System) ReadSystemConfigUiHeadersHeader(ctx context.Context, header string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemGenerateRoot Read the configuration and progress of the current root generation attempt.
func (a *System) ReadSystemGenerateRoot(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemGenerateRootAttempt Read the configuration and progress of the current root generation attempt.
func (a *System) ReadSystemGenerateRootAttempt(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/attempt"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemHaStatus Check the HA status of a Vault cluster
func (a *System) ReadSystemHaStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/ha-status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemHealth Returns the health status of Vault.
func (a *System) ReadSystemHealth(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/health"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemHostInfo Information about the host instance that this Vault server is running on.
// Information about the host instance that this Vault server is running on.   The information that gets collected includes host hardware information, and CPU,   disk, and memory utilization
func (a *System) ReadSystemHostInfo(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/host-info"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInFlightReq reports in-flight requests
// This path responds to the following HTTP methods.   GET /    Returns a map of in-flight requests.
func (a *System) ReadSystemInFlightReq(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/in-flight-req"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInit Returns the initialization status of Vault.
func (a *System) ReadSystemInit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/init"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersActivity Report the client count metrics, for this namespace and all child namespaces.
func (a *System) ReadSystemInternalCountersActivity(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/activity"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersActivityExport Report the client count metrics, for this namespace and all child namespaces.
func (a *System) ReadSystemInternalCountersActivityExport(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/activity/export"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersActivityMonthly Report the number of clients for this month, for this namespace and all child namespaces.
func (a *System) ReadSystemInternalCountersActivityMonthly(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/activity/monthly"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersConfig Read the client count tracking configuration.
func (a *System) ReadSystemInternalCountersConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersEntities Backwards compatibility is not guaranteed for this API
func (a *System) ReadSystemInternalCountersEntities(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/entities"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersRequests Backwards compatibility is not guaranteed for this API
func (a *System) ReadSystemInternalCountersRequests(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/requests"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalCountersTokens Backwards compatibility is not guaranteed for this API
func (a *System) ReadSystemInternalCountersTokens(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/tokens"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalSpecsOpenapi Generate an OpenAPI 3 document of all mounted paths.
func (a *System) ReadSystemInternalSpecsOpenapi(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/specs/openapi"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalUiFeatureFlags Lists enabled feature flags.
func (a *System) ReadSystemInternalUiFeatureFlags(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/feature-flags"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalUiMounts Lists all enabled and visible auth and secrets mounts.
func (a *System) ReadSystemInternalUiMounts(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/mounts"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalUiMountsPath Return information about the given mount.
// path: The path of the mount.
func (a *System) ReadSystemInternalUiMountsPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalUiNamespaces Backwards compatibility is not guaranteed for this API
func (a *System) ReadSystemInternalUiNamespaces(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/namespaces"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemInternalUiResultantAcl Backwards compatibility is not guaranteed for this API
func (a *System) ReadSystemInternalUiResultantAcl(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/ui/resultant-acl"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemKeyStatus Provides information about the backend encryption key.
func (a *System) ReadSystemKeyStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/key-status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemLeader Returns the high availability status and current leader instance of Vault.
func (a *System) ReadSystemLeader(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leader"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemLeases List leases associated with this Vault cluster
func (a *System) ReadSystemLeases(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemLeasesCount Count of leases associated with this Vault cluster
func (a *System) ReadSystemLeasesCount(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/count"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemMetrics Export the metrics aggregated for telemetry purpose.
// format: Format to export metrics into. Currently accepts only \&quot;prometheus\&quot;.
func (a *System) ReadSystemMetrics(ctx context.Context, format string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/metrics"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemMonitor
// logFormat: Output format of logs. Supported values are \&quot;standard\&quot; and \&quot;json\&quot;. The default is \&quot;standard\&quot;.
// logLevel: Log level to view system logs at. Currently supported values are \&quot;trace\&quot;, \&quot;debug\&quot;, \&quot;info\&quot;, \&quot;warn\&quot;, \&quot;error\&quot;.
func (a *System) ReadSystemMonitor(ctx context.Context, logFormat string, logLevel string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/monitor"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemMounts List the currently mounted backends.
func (a *System) ReadSystemMounts(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemMountsPath Read the configuration of the secret engine at the given path.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) ReadSystemMountsPath(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemMountsPathTune Tune backend configuration parameters for this mount.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) ReadSystemMountsPathTune(ctx context.Context, path string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPluginsCatalog Lists all the plugins known to Vault
func (a *System) ReadSystemPluginsCatalog(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPluginsCatalogName Return the configuration data for the plugin with the given name.
// name: The name of the plugin
func (a *System) ReadSystemPluginsCatalogName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPluginsCatalogTypeName Return the configuration data for the plugin with the given name.
// name: The name of the plugin
// type_: The type of the plugin, may be auth, secret, or database
func (a *System) ReadSystemPluginsCatalogTypeName(ctx context.Context, name string, type_ string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPoliciesAclName Retrieve information about the named ACL policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) ReadSystemPoliciesAclName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPoliciesPasswordName Retrieve an existing password policy.
// name: The name of the password policy.
func (a *System) ReadSystemPoliciesPasswordName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPoliciesPasswordNameGenerate Generate a password from an existing password policy.
// name: The name of the password policy.
func (a *System) ReadSystemPoliciesPasswordNameGenerate(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}/generate"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPolicy List the configured access control policies.
// list: Return a list if &#x60;true&#x60;
func (a *System) ReadSystemPolicy(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPolicyName Retrieve the policy body for the named policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) ReadSystemPolicyName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprof Returns an HTML page listing the available profiles.
// Returns an HTML page listing the available  profiles. This should be mainly accessed via browsers or applications that can  render pages.
func (a *System) ReadSystemPprof(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofAllocs Returns a sampling of all past memory allocations.
// Returns a sampling of all past memory allocations.
func (a *System) ReadSystemPprofAllocs(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/allocs"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofBlock Returns stack traces that led to blocking on synchronization primitives
// Returns stack traces that led to blocking on synchronization primitives
func (a *System) ReadSystemPprofBlock(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/block"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofCmdline Returns the running program's command line.
// Returns the running program's command line, with arguments separated by NUL bytes.
func (a *System) ReadSystemPprofCmdline(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/cmdline"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofGoroutine Returns stack traces of all current goroutines.
// Returns stack traces of all current goroutines.
func (a *System) ReadSystemPprofGoroutine(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/goroutine"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofHeap Returns a sampling of memory allocations of live object.
// Returns a sampling of memory allocations of live object.
func (a *System) ReadSystemPprofHeap(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/heap"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofMutex Returns stack traces of holders of contended mutexes
// Returns stack traces of holders of contended mutexes
func (a *System) ReadSystemPprofMutex(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/mutex"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofProfile Returns a pprof-formatted cpu profile payload.
// Returns a pprof-formatted cpu profile payload. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified.
func (a *System) ReadSystemPprofProfile(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/profile"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofSymbol Returns the program counters listed in the request.
// Returns the program counters listed in the request.
func (a *System) ReadSystemPprofSymbol(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/symbol"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofThreadcreate Returns stack traces that led to the creation of new OS threads
// Returns stack traces that led to the creation of new OS threads
func (a *System) ReadSystemPprofThreadcreate(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/threadcreate"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemPprofTrace Returns the execution trace in binary form.
// Returns  the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified.
func (a *System) ReadSystemPprofTrace(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/pprof/trace"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemQuotasConfig
func (a *System) ReadSystemQuotasConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemQuotasRateLimitName
// name: Name of the quota rule.
func (a *System) ReadSystemQuotasRateLimitName(ctx context.Context, name string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRaw Read the value of the key at the given path.
// list: Return a list if &#x60;true&#x60;
func (a *System) ReadSystemRaw(ctx context.Context, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRawPath Read the value of the key at the given path.
// list: Return a list if &#x60;true&#x60;
func (a *System) ReadSystemRawPath(ctx context.Context, path string, list string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRekeyBackup Return the backup copy of PGP-encrypted unseal keys.
func (a *System) ReadSystemRekeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRekeyInit Reads the configuration and progress of the current rekey attempt.
func (a *System) ReadSystemRekeyInit(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/init"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRekeyRecoveryKeyBackup Allows fetching or deleting the backup of the rotated unseal keys.
func (a *System) ReadSystemRekeyRecoveryKeyBackup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/recovery-key-backup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRekeyVerify Read the configuration and progress of the current rekey verification attempt.
func (a *System) ReadSystemRekeyVerify(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/verify"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRemountStatusMigrationId Check status of a mount migration
// migrationId: The ID of the migration operation
func (a *System) ReadSystemRemountStatusMigrationId(ctx context.Context, migrationId string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/remount/status/{migration_id}"
	requestPath = strings.Replace(requestPath, "{"+"migration_id"+"}", url.PathEscape(migrationId), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemReplicationStatus
func (a *System) ReadSystemReplicationStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/replication/status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemRotateConfig
func (a *System) ReadSystemRotateConfig(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rotate/config"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemSealStatus Check the seal status of a Vault.
func (a *System) ReadSystemSealStatus(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/seal-status"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// ReadSystemWrappingLookup Look up wrapping properties for the requester's token.
func (a *System) ReadSystemWrappingLookup(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/lookup"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodGet,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemAuditHashPath The hash of the given string via the given audit backend
// path: The name of the backend. Cannot be delimited. Example: \&quot;mysql\&quot;
func (a *System) UpdateSystemAuditHashPath(ctx context.Context, path string, systemAuditHashRequest SystemAuditHashRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit-hash/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuditHashRequest,
		nil, // request query parameters
	)
}

// UpdateSystemAuditPath Enable a new audit device at the supplied path.
// path: The name of the backend. Cannot be delimited. Example: \&quot;mysql\&quot;
func (a *System) UpdateSystemAuditPath(ctx context.Context, path string, systemAuditRequest SystemAuditRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/audit/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuditRequest,
		nil, // request query parameters
	)
}

// UpdateSystemAuthPath Enables a new auth method.
// After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.  For example, enable the \"foo\" auth method will make it accessible at /auth/foo.
// path: The path to mount to. Cannot be delimited. Example: \&quot;user\&quot;
func (a *System) UpdateSystemAuthPath(ctx context.Context, path string, systemAuthRequest SystemAuthRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuthRequest,
		nil, // request query parameters
	)
}

// UpdateSystemAuthPathTune Tune configuration parameters for a given auth path.
// This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]/tune`.
// path: Tune the configuration parameters for an auth path.
func (a *System) UpdateSystemAuthPathTune(ctx context.Context, path string, systemAuthTuneRequest SystemAuthTuneRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/auth/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemAuthTuneRequest,
		nil, // request query parameters
	)
}

// UpdateSystemCapabilities Fetches the capabilities of the given token on the given path.
func (a *System) UpdateSystemCapabilities(ctx context.Context, systemCapabilitiesRequest SystemCapabilitiesRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/capabilities"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemCapabilitiesRequest,
		nil, // request query parameters
	)
}

// UpdateSystemCapabilitiesAccessor Fetches the capabilities of the token associated with the given token, on the given path.
func (a *System) UpdateSystemCapabilitiesAccessor(ctx context.Context, systemCapabilitiesAccessorRequest SystemCapabilitiesAccessorRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/capabilities-accessor"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemCapabilitiesAccessorRequest,
		nil, // request query parameters
	)
}

// UpdateSystemCapabilitiesSelf Fetches the capabilities of the given token on the given path.
func (a *System) UpdateSystemCapabilitiesSelf(ctx context.Context, systemCapabilitiesSelfRequest SystemCapabilitiesSelfRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/capabilities-self"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemCapabilitiesSelfRequest,
		nil, // request query parameters
	)
}

// UpdateSystemConfigAuditingRequestHeadersHeader Enable auditing of a header.
func (a *System) UpdateSystemConfigAuditingRequestHeadersHeader(ctx context.Context, header string, systemConfigAuditingRequestHeadersRequest SystemConfigAuditingRequestHeadersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/auditing/request-headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemConfigAuditingRequestHeadersRequest,
		nil, // request query parameters
	)
}

// UpdateSystemConfigCors Configure the CORS settings.
func (a *System) UpdateSystemConfigCors(ctx context.Context, systemConfigCorsRequest SystemConfigCorsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/cors"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemConfigCorsRequest,
		nil, // request query parameters
	)
}

// UpdateSystemConfigReloadSubsystem Reload the given subsystem
func (a *System) UpdateSystemConfigReloadSubsystem(ctx context.Context, subsystem string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/reload/{subsystem}"
	requestPath = strings.Replace(requestPath, "{"+"subsystem"+"}", url.PathEscape(subsystem), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemConfigUiHeadersHeader Configure the values to be returned for the UI header.
// header: The name of the header.
func (a *System) UpdateSystemConfigUiHeadersHeader(ctx context.Context, header string, systemConfigUiHeadersRequest SystemConfigUiHeadersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/config/ui/headers/{header}"
	requestPath = strings.Replace(requestPath, "{"+"header"+"}", url.PathEscape(header), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemConfigUiHeadersRequest,
		nil, // request query parameters
	)
}

// UpdateSystemGenerateRoot Initializes a new root generation attempt.
// Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
func (a *System) UpdateSystemGenerateRoot(ctx context.Context, systemGenerateRootRequest SystemGenerateRootRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemGenerateRootRequest,
		nil, // request query parameters
	)
}

// UpdateSystemGenerateRootAttempt Initializes a new root generation attempt.
// Only a single root generation attempt can take place at a time. One (and only one) of otp or pgp_key are required.
func (a *System) UpdateSystemGenerateRootAttempt(ctx context.Context, systemGenerateRootAttemptRequest SystemGenerateRootAttemptRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/attempt"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemGenerateRootAttemptRequest,
		nil, // request query parameters
	)
}

// UpdateSystemGenerateRootUpdate Enter a single unseal key share to progress the root generation attempt.
// If the threshold number of unseal key shares is reached, Vault will complete the root generation and issue the new token. Otherwise, this API must be called multiple times until that threshold is met. The attempt nonce must be provided with each call.
func (a *System) UpdateSystemGenerateRootUpdate(ctx context.Context, systemGenerateRootUpdateRequest SystemGenerateRootUpdateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/generate-root/update"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemGenerateRootUpdateRequest,
		nil, // request query parameters
	)
}

// UpdateSystemInit Initialize a new Vault.
// The Vault must not have been previously initialized. The recovery options, as well as the stored shares option, are only available when using Vault HSM.
func (a *System) UpdateSystemInit(ctx context.Context, systemInitRequest SystemInitRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/init"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemInitRequest,
		nil, // request query parameters
	)
}

// UpdateSystemInternalCountersConfig Enable or disable collection of client count, set retention period, or set default reporting period.
func (a *System) UpdateSystemInternalCountersConfig(ctx context.Context, systemInternalCountersConfigRequest SystemInternalCountersConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/internal/counters/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemInternalCountersConfigRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesLookup Retrieve lease metadata.
func (a *System) UpdateSystemLeasesLookup(ctx context.Context, systemLeasesLookupRequest SystemLeasesLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/lookup"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesLookupRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesRenew Renews a lease, requesting to extend the lease.
func (a *System) UpdateSystemLeasesRenew(ctx context.Context, systemLeasesRenewRequest SystemLeasesRenewRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/renew"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRenewRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesRenewUrlLeaseId Renews a lease, requesting to extend the lease.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) UpdateSystemLeasesRenewUrlLeaseId(ctx context.Context, urlLeaseId string, systemLeasesRenewLeaseRequest SystemLeasesRenewLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/renew/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRenewLeaseRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesRevoke Revokes a lease immediately.
func (a *System) UpdateSystemLeasesRevoke(ctx context.Context, systemLeasesRevokeRequest SystemLeasesRevokeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRevokeRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesRevokeForcePrefix Revokes all secrets or tokens generated under a given prefix immediately
// Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) UpdateSystemLeasesRevokeForcePrefix(ctx context.Context, prefix string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke-force/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemLeasesRevokePrefixPrefix Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) UpdateSystemLeasesRevokePrefixPrefix(ctx context.Context, prefix string, systemLeasesRevokePrefixRequest SystemLeasesRevokePrefixRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke-prefix/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRevokePrefixRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesRevokeUrlLeaseId Revokes a lease immediately.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) UpdateSystemLeasesRevokeUrlLeaseId(ctx context.Context, urlLeaseId string, systemLeasesRevokeLeaseRequest SystemLeasesRevokeLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/revoke/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLeasesRevokeLeaseRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLeasesTidy This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.
func (a *System) UpdateSystemLeasesTidy(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/leases/tidy"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemLoggers Modify the log level for all existing loggers.
func (a *System) UpdateSystemLoggers(ctx context.Context, systemLoggersRequest SystemLoggersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/loggers"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLoggersRequest,
		nil, // request query parameters
	)
}

// UpdateSystemLoggersName Modify the log level of a single logger.
// name: The name of the logger to be modified.
func (a *System) UpdateSystemLoggersName(ctx context.Context, name string, systemLoggersRequest SystemLoggersRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/loggers/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemLoggersRequest,
		nil, // request query parameters
	)
}

// UpdateSystemMfaValidate Validates the login for the given MFA methods. Upon successful validation, it returns an auth response containing the client token
func (a *System) UpdateSystemMfaValidate(ctx context.Context, systemMfaValidateRequest SystemMfaValidateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mfa/validate"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemMfaValidateRequest,
		nil, // request query parameters
	)
}

// UpdateSystemMountsPath Enable a new secrets engine at the given path.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) UpdateSystemMountsPath(ctx context.Context, path string, systemMountsRequest SystemMountsRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemMountsRequest,
		nil, // request query parameters
	)
}

// UpdateSystemMountsPathTune Tune backend configuration parameters for this mount.
// path: The path to mount to. Example: \&quot;aws/east\&quot;
func (a *System) UpdateSystemMountsPathTune(ctx context.Context, path string, systemMountsTuneRequest SystemMountsTuneRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/mounts/{path}/tune"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemMountsTuneRequest,
		nil, // request query parameters
	)
}

// UpdateSystemPluginsCatalogName Register a new plugin, or updates an existing one with the supplied name.
// name: The name of the plugin
func (a *System) UpdateSystemPluginsCatalogName(ctx context.Context, name string, systemPluginsCatalogRequest SystemPluginsCatalogRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPluginsCatalogRequest,
		nil, // request query parameters
	)
}

// UpdateSystemPluginsCatalogTypeName Register a new plugin, or updates an existing one with the supplied name.
// name: The name of the plugin
// type_: The type of the plugin, may be auth, secret, or database
func (a *System) UpdateSystemPluginsCatalogTypeName(ctx context.Context, name string, type_ string, systemPluginsCatalogRequest SystemPluginsCatalogRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/catalog/{type}/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)
	requestPath = strings.Replace(requestPath, "{"+"type"+"}", url.PathEscape(type_), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPluginsCatalogRequest,
		nil, // request query parameters
	)
}

// UpdateSystemPluginsReloadBackend Reload mounted plugin backends.
// Either the plugin name (`plugin`) or the desired plugin backend mounts (`mounts`) must be provided, but not both. In the case that the plugin name is provided, all mounted paths that use that plugin backend will be reloaded.  If (`scope`) is provided and is (`global`), the plugin(s) are reloaded globally.
func (a *System) UpdateSystemPluginsReloadBackend(ctx context.Context, systemPluginsReloadBackendRequest SystemPluginsReloadBackendRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/plugins/reload/backend"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPluginsReloadBackendRequest,
		nil, // request query parameters
	)
}

// UpdateSystemPoliciesAclName Add a new or update an existing ACL policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) UpdateSystemPoliciesAclName(ctx context.Context, name string, systemPoliciesAclRequest SystemPoliciesAclRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/acl/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPoliciesAclRequest,
		nil, // request query parameters
	)
}

// UpdateSystemPoliciesPasswordName Add a new or update an existing password policy.
// name: The name of the password policy.
func (a *System) UpdateSystemPoliciesPasswordName(ctx context.Context, name string, systemPoliciesPasswordRequest SystemPoliciesPasswordRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policies/password/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPoliciesPasswordRequest,
		nil, // request query parameters
	)
}

// UpdateSystemPolicyName Add a new or update an existing policy.
// name: The name of the policy. Example: \&quot;ops\&quot;
func (a *System) UpdateSystemPolicyName(ctx context.Context, name string, systemPolicyRequest SystemPolicyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/policy/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemPolicyRequest,
		nil, // request query parameters
	)
}

// UpdateSystemQuotasConfig
func (a *System) UpdateSystemQuotasConfig(ctx context.Context, systemQuotasConfigRequest SystemQuotasConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemQuotasConfigRequest,
		nil, // request query parameters
	)
}

// UpdateSystemQuotasRateLimitName
// name: Name of the quota rule.
func (a *System) UpdateSystemQuotasRateLimitName(ctx context.Context, name string, systemQuotasRateLimitRequest SystemQuotasRateLimitRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/quotas/rate-limit/{name}"
	requestPath = strings.Replace(requestPath, "{"+"name"+"}", url.PathEscape(name), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemQuotasRateLimitRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRaw Update the value of the key at the given path.
func (a *System) UpdateSystemRaw(ctx context.Context, systemRawRequest SystemRawRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRawRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRawPath Update the value of the key at the given path.
func (a *System) UpdateSystemRawPath(ctx context.Context, path string, systemRawRequest SystemRawRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/raw/{path}"
	requestPath = strings.Replace(requestPath, "{"+"path"+"}", url.PathEscape(path), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRawRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRekeyInit Initializes a new rekey attempt.
// Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey, which will also provide a new nonce.
func (a *System) UpdateSystemRekeyInit(ctx context.Context, systemRekeyInitRequest SystemRekeyInitRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/init"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRekeyInitRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRekeyUpdate Enter a single unseal key share to progress the rekey of the Vault.
func (a *System) UpdateSystemRekeyUpdate(ctx context.Context, systemRekeyUpdateRequest SystemRekeyUpdateRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/update"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRekeyUpdateRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRekeyVerify Enter a single new key share to progress the rekey verification operation.
func (a *System) UpdateSystemRekeyVerify(ctx context.Context, systemRekeyVerifyRequest SystemRekeyVerifyRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rekey/verify"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRekeyVerifyRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRemount Initiate a mount migration
func (a *System) UpdateSystemRemount(ctx context.Context, systemRemountRequest SystemRemountRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/remount"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRemountRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRenew Renews a lease, requesting to extend the lease.
func (a *System) UpdateSystemRenew(ctx context.Context, systemRenewRequest SystemRenewRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/renew"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRenewRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRenewUrlLeaseId Renews a lease, requesting to extend the lease.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) UpdateSystemRenewUrlLeaseId(ctx context.Context, urlLeaseId string, systemRenewLeaseRequest SystemRenewLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/renew/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRenewLeaseRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRevoke Revokes a lease immediately.
func (a *System) UpdateSystemRevoke(ctx context.Context, systemRevokeRequest SystemRevokeRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRevokeRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRevokeForcePrefix Revokes all secrets or tokens generated under a given prefix immediately
// Unlike `/sys/leases/revoke-prefix`, this path ignores backend errors encountered during revocation. This is potentially very dangerous and should only be used in specific emergency situations where errors in the backend or the connected backend service prevent normal revocation.  By ignoring these errors, Vault abdicates responsibility for ensuring that the issued credentials or secrets are properly revoked and/or cleaned up. Access to this endpoint should be tightly controlled.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) UpdateSystemRevokeForcePrefix(ctx context.Context, prefix string) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke-force/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemRevokePrefixPrefix Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.
// prefix: The path to revoke keys under. Example: \&quot;prod/aws/ops\&quot;
func (a *System) UpdateSystemRevokePrefixPrefix(ctx context.Context, prefix string, systemRevokePrefixRequest SystemRevokePrefixRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke-prefix/{prefix}"
	requestPath = strings.Replace(requestPath, "{"+"prefix"+"}", url.PathEscape(prefix), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRevokePrefixRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRevokeUrlLeaseId Revokes a lease immediately.
// urlLeaseId: The lease identifier to renew. This is included with a lease.
func (a *System) UpdateSystemRevokeUrlLeaseId(ctx context.Context, urlLeaseId string, systemRevokeLeaseRequest SystemRevokeLeaseRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/revoke/{url_lease_id}"
	requestPath = strings.Replace(requestPath, "{"+"url_lease_id"+"}", url.PathEscape(urlLeaseId), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRevokeLeaseRequest,
		nil, // request query parameters
	)
}

// UpdateSystemRotate Rotates the backend encryption key used to persist data.
func (a *System) UpdateSystemRotate(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rotate"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemRotateConfig
func (a *System) UpdateSystemRotateConfig(ctx context.Context, systemRotateConfigRequest SystemRotateConfigRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/rotate/config"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemRotateConfigRequest,
		nil, // request query parameters
	)
}

// UpdateSystemSeal Seal the Vault.
func (a *System) UpdateSystemSeal(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/seal"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemStepDown Cause the node to give up active status.
// This endpoint forces the node to give up active status. If the node does not have active status, this endpoint does nothing. Note that the node will sleep for ten seconds before attempting to grab the active lock again, but if no standby nodes grab the active lock in the interim, the same node may become the active node again.
func (a *System) UpdateSystemStepDown(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/step-down"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}

// UpdateSystemToolsHash Generate a hash sum for input data
func (a *System) UpdateSystemToolsHash(ctx context.Context, systemToolsHashRequest SystemToolsHashRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/hash"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsHashRequest,
		nil, // request query parameters
	)
}

// UpdateSystemToolsHashUrlalgorithm Generate a hash sum for input data
// urlalgorithm: Algorithm to use (POST URL parameter)
func (a *System) UpdateSystemToolsHashUrlalgorithm(ctx context.Context, urlalgorithm string, systemToolsHashRequest SystemToolsHashRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/hash/{urlalgorithm}"
	requestPath = strings.Replace(requestPath, "{"+"urlalgorithm"+"}", url.PathEscape(urlalgorithm), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsHashRequest,
		nil, // request query parameters
	)
}

// UpdateSystemToolsRandom Generate random bytes
func (a *System) UpdateSystemToolsRandom(ctx context.Context, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// UpdateSystemToolsRandomSource Generate random bytes
// source: Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.
func (a *System) UpdateSystemToolsRandomSource(ctx context.Context, source string, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random/{source}"
	requestPath = strings.Replace(requestPath, "{"+"source"+"}", url.PathEscape(source), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// UpdateSystemToolsRandomSourceUrlbytes Generate random bytes
// source: Which system to source random data from, ether \&quot;platform\&quot;, \&quot;seal\&quot;, or \&quot;all\&quot;.
// urlbytes: The number of bytes to generate (POST URL parameter)
func (a *System) UpdateSystemToolsRandomSourceUrlbytes(ctx context.Context, source string, urlbytes string, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random/{source}/{urlbytes}"
	requestPath = strings.Replace(requestPath, "{"+"source"+"}", url.PathEscape(source), -1)
	requestPath = strings.Replace(requestPath, "{"+"urlbytes"+"}", url.PathEscape(urlbytes), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// UpdateSystemToolsRandomUrlbytes Generate random bytes
// urlbytes: The number of bytes to generate (POST URL parameter)
func (a *System) UpdateSystemToolsRandomUrlbytes(ctx context.Context, urlbytes string, systemToolsRandomRequest SystemToolsRandomRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/tools/random/{urlbytes}"
	requestPath = strings.Replace(requestPath, "{"+"urlbytes"+"}", url.PathEscape(urlbytes), -1)

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemToolsRandomRequest,
		nil, // request query parameters
	)
}

// UpdateSystemUnseal Unseal the Vault.
func (a *System) UpdateSystemUnseal(ctx context.Context, systemUnsealRequest SystemUnsealRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/unseal"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemUnsealRequest,
		nil, // request query parameters
	)
}

// UpdateSystemWrappingLookup Look up wrapping properties for the given token.
func (a *System) UpdateSystemWrappingLookup(ctx context.Context, systemWrappingLookupRequest SystemWrappingLookupRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/lookup"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemWrappingLookupRequest,
		nil, // request query parameters
	)
}

// UpdateSystemWrappingRewrap Rotates a response-wrapped token.
func (a *System) UpdateSystemWrappingRewrap(ctx context.Context, systemWrappingRewrapRequest SystemWrappingRewrapRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/rewrap"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemWrappingRewrapRequest,
		nil, // request query parameters
	)
}

// UpdateSystemWrappingUnwrap Unwraps a response-wrapped token.
func (a *System) UpdateSystemWrappingUnwrap(ctx context.Context, systemWrappingUnwrapRequest SystemWrappingUnwrapRequest) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/unwrap"

	return sendStructuredRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		systemWrappingUnwrapRequest,
		nil, // request query parameters
	)
}

// UpdateSystemWrappingWrap Response-wraps an arbitrary JSON object.
func (a *System) UpdateSystemWrappingWrap(ctx context.Context) (*Response[map[string]interface{}], error) {
	requestPath := "/v1/sys/wrapping/wrap"

	return sendRequestParseResponse[map[string]interface{}](
		ctx,
		a.client,
		http.MethodPost,
		requestPath,
		nil, // request body
		nil, // request query parameters
	)
}
