{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"context"
	"net/http"
	"net/url"
{{#imports}}	"{{import}}"
{{/imports}}
)

// {{classname}} is a simple wrapper around the client for {{classname}} requests
type {{classname}} struct {
	client *Client
}
{{#operation}}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
// {{operationId}} {{{summary}}}
{{#notes}}
// {{{notes}}}
{{/notes}}
{{#allParams}}
{{#description}}
// {{paramName}}: {{.}}
{{/description}}
{{/allParams}}
func (a *{{{classname}}}) {{nickname}}(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}{{#allParams}}{{^isPathParam}}, {{paramName}} {{{dataType}}}{{/isPathParam}}{{/allParams}}) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}*http.Response, error) {
	localVarPath := "/v1{{{path}}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", url.PathEscape({{paramName}}), -1){{/pathParams}}

{{#bodyParams}}
	req, err := a.client.NewStructuredRequest(http.Method{{httpMethod}}, localVarPath, {{paramName}})
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, err
	}
{{/bodyParams}}
{{^bodyParams}}
	req, err := a.client.NewRequest(http.Method{{httpMethod}}, localVarPath, nil)
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}nil, err
	}
{{/bodyParams}}

	resp, err := a.client.Do(ctx, req, true)
	if err != nil || resp == nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}resp, err
	}

	{{#returnType}}
	localVarBody, err := ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	resp.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}resp, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, resp.Header.Get("Content-Type"))
	if err != nil {
		return {{#returnType}}localVarReturnValue, {{/returnType}}resp, err
	}

	{{/returnType}}
	return {{#returnType}}localVarReturnValue, {{/returnType}}resp, nil
}
{{/operation}}
{{/operations}}
