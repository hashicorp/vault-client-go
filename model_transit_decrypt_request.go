/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// TransitDecryptRequest struct for TransitDecryptRequest
type TransitDecryptRequest struct {
	// The ciphertext to decrypt, provided as returned by encrypt.
	Ciphertext *string `json:"ciphertext,omitempty"`
	// Base64 encoded context for key derivation. Required if key derivation is enabled.
	Context *string `json:"context,omitempty"`
	// Base64 encoded nonce value used during encryption. Must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. Not required for keys created in 0.6.2+.
	Nonce *string `json:"nonce,omitempty"`
}

// NewTransitDecryptRequest instantiates a new TransitDecryptRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransitDecryptRequest() *TransitDecryptRequest {
	this := TransitDecryptRequest{}
	return &this
}

// NewTransitDecryptRequestWithDefaults instantiates a new TransitDecryptRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitDecryptRequestWithDefaults() *TransitDecryptRequest {
	this := TransitDecryptRequest{}
	return &this
}

// GetCiphertext returns the Ciphertext field value if set, zero value otherwise.
func (o *TransitDecryptRequest) GetCiphertext() string {
	if o == nil || o.Ciphertext == nil {
		var ret string
		return ret
	}
	return *o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDecryptRequest) GetCiphertextOk() (*string, bool) {
	if o == nil || o.Ciphertext == nil {
		return nil, false
	}
	return o.Ciphertext, true
}

// HasCiphertext returns a boolean if a field has been set.
func (o *TransitDecryptRequest) HasCiphertext() bool {
	if o != nil && o.Ciphertext != nil {
		return true
	}

	return false
}

// SetCiphertext gets a reference to the given string and assigns it to the Ciphertext field.
func (o *TransitDecryptRequest) SetCiphertext(v string) {
	o.Ciphertext = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TransitDecryptRequest) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDecryptRequest) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TransitDecryptRequest) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *TransitDecryptRequest) SetContext(v string) {
	o.Context = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *TransitDecryptRequest) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransitDecryptRequest) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *TransitDecryptRequest) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *TransitDecryptRequest) SetNonce(v string) {
	o.Nonce = &v
}

func (o TransitDecryptRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ciphertext != nil {
		toSerialize["ciphertext"] = o.Ciphertext
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	return json.Marshal(toSerialize)
}

type NullableTransitDecryptRequest struct {
	value *TransitDecryptRequest
	isSet bool
}

func (v NullableTransitDecryptRequest) Get() *TransitDecryptRequest {
	return v.value
}

func (v *NullableTransitDecryptRequest) Set(val *TransitDecryptRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitDecryptRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitDecryptRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitDecryptRequest(val *TransitDecryptRequest) *NullableTransitDecryptRequest {
	return &NullableTransitDecryptRequest{value: val, isSet: true}
}

func (v NullableTransitDecryptRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitDecryptRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


