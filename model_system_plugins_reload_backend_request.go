/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// SystemPluginsReloadBackendRequest struct for SystemPluginsReloadBackendRequest
type SystemPluginsReloadBackendRequest struct {
	// The mount paths of the plugin backends to reload.
	Mounts []string `json:"mounts,omitempty"`
	// The name of the plugin to reload, as registered in the plugin catalog.
	Plugin *string `json:"plugin,omitempty"`
	Scope *string `json:"scope,omitempty"`
}

// NewSystemPluginsReloadBackendRequest instantiates a new SystemPluginsReloadBackendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemPluginsReloadBackendRequest() *SystemPluginsReloadBackendRequest {
	this := SystemPluginsReloadBackendRequest{}
	return &this
}

// NewSystemPluginsReloadBackendRequestWithDefaults instantiates a new SystemPluginsReloadBackendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemPluginsReloadBackendRequestWithDefaults() *SystemPluginsReloadBackendRequest {
	this := SystemPluginsReloadBackendRequest{}
	return &this
}

// GetMounts returns the Mounts field value if set, zero value otherwise.
func (o *SystemPluginsReloadBackendRequest) GetMounts() []string {
	if o == nil || o.Mounts == nil {
		var ret []string
		return ret
	}
	return o.Mounts
}

// GetMountsOk returns a tuple with the Mounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemPluginsReloadBackendRequest) GetMountsOk() ([]string, bool) {
	if o == nil || o.Mounts == nil {
		return nil, false
	}
	return o.Mounts, true
}

// HasMounts returns a boolean if a field has been set.
func (o *SystemPluginsReloadBackendRequest) HasMounts() bool {
	if o != nil && o.Mounts != nil {
		return true
	}

	return false
}

// SetMounts gets a reference to the given []string and assigns it to the Mounts field.
func (o *SystemPluginsReloadBackendRequest) SetMounts(v []string) {
	o.Mounts = v
}

// GetPlugin returns the Plugin field value if set, zero value otherwise.
func (o *SystemPluginsReloadBackendRequest) GetPlugin() string {
	if o == nil || o.Plugin == nil {
		var ret string
		return ret
	}
	return *o.Plugin
}

// GetPluginOk returns a tuple with the Plugin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemPluginsReloadBackendRequest) GetPluginOk() (*string, bool) {
	if o == nil || o.Plugin == nil {
		return nil, false
	}
	return o.Plugin, true
}

// HasPlugin returns a boolean if a field has been set.
func (o *SystemPluginsReloadBackendRequest) HasPlugin() bool {
	if o != nil && o.Plugin != nil {
		return true
	}

	return false
}

// SetPlugin gets a reference to the given string and assigns it to the Plugin field.
func (o *SystemPluginsReloadBackendRequest) SetPlugin(v string) {
	o.Plugin = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SystemPluginsReloadBackendRequest) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemPluginsReloadBackendRequest) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SystemPluginsReloadBackendRequest) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SystemPluginsReloadBackendRequest) SetScope(v string) {
	o.Scope = &v
}

func (o SystemPluginsReloadBackendRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mounts != nil {
		toSerialize["mounts"] = o.Mounts
	}
	if o.Plugin != nil {
		toSerialize["plugin"] = o.Plugin
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	return json.Marshal(toSerialize)
}

type NullableSystemPluginsReloadBackendRequest struct {
	value *SystemPluginsReloadBackendRequest
	isSet bool
}

func (v NullableSystemPluginsReloadBackendRequest) Get() *SystemPluginsReloadBackendRequest {
	return v.value
}

func (v *NullableSystemPluginsReloadBackendRequest) Set(val *SystemPluginsReloadBackendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemPluginsReloadBackendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemPluginsReloadBackendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemPluginsReloadBackendRequest(val *SystemPluginsReloadBackendRequest) *NullableSystemPluginsReloadBackendRequest {
	return &NullableSystemPluginsReloadBackendRequest{value: val, isSet: true}
}

func (v NullableSystemPluginsReloadBackendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemPluginsReloadBackendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


