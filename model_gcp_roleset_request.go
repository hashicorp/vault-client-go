/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// GcpRolesetRequest struct for GcpRolesetRequest
type GcpRolesetRequest struct {
	// Bindings configuration string.
	Bindings *string `json:"bindings,omitempty"`
	// Name of the GCP project that this roleset's service account will belong to.
	Project *string `json:"project,omitempty"`
	// Type of secret generated for this role set. Defaults to 'access_token'
	SecretType *string `json:"secret_type,omitempty"`
	// List of OAuth scopes to assign to credentials generated under this role set
	TokenScopes []string `json:"token_scopes,omitempty"`
}

// NewGcpRolesetRequest instantiates a new GcpRolesetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpRolesetRequest() *GcpRolesetRequest {
	this := GcpRolesetRequest{}
	var secretType string = "access_token"
	this.SecretType = &secretType
	return &this
}

// NewGcpRolesetRequestWithDefaults instantiates a new GcpRolesetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpRolesetRequestWithDefaults() *GcpRolesetRequest {
	this := GcpRolesetRequest{}
	var secretType string = "access_token"
	this.SecretType = &secretType
	return &this
}

// GetBindings returns the Bindings field value if set, zero value otherwise.
func (o *GcpRolesetRequest) GetBindings() string {
	if o == nil || o.Bindings == nil {
		var ret string
		return ret
	}
	return *o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRolesetRequest) GetBindingsOk() (*string, bool) {
	if o == nil || o.Bindings == nil {
		return nil, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *GcpRolesetRequest) HasBindings() bool {
	if o != nil && o.Bindings != nil {
		return true
	}

	return false
}

// SetBindings gets a reference to the given string and assigns it to the Bindings field.
func (o *GcpRolesetRequest) SetBindings(v string) {
	o.Bindings = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *GcpRolesetRequest) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRolesetRequest) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *GcpRolesetRequest) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *GcpRolesetRequest) SetProject(v string) {
	o.Project = &v
}

// GetSecretType returns the SecretType field value if set, zero value otherwise.
func (o *GcpRolesetRequest) GetSecretType() string {
	if o == nil || o.SecretType == nil {
		var ret string
		return ret
	}
	return *o.SecretType
}

// GetSecretTypeOk returns a tuple with the SecretType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRolesetRequest) GetSecretTypeOk() (*string, bool) {
	if o == nil || o.SecretType == nil {
		return nil, false
	}
	return o.SecretType, true
}

// HasSecretType returns a boolean if a field has been set.
func (o *GcpRolesetRequest) HasSecretType() bool {
	if o != nil && o.SecretType != nil {
		return true
	}

	return false
}

// SetSecretType gets a reference to the given string and assigns it to the SecretType field.
func (o *GcpRolesetRequest) SetSecretType(v string) {
	o.SecretType = &v
}

// GetTokenScopes returns the TokenScopes field value if set, zero value otherwise.
func (o *GcpRolesetRequest) GetTokenScopes() []string {
	if o == nil || o.TokenScopes == nil {
		var ret []string
		return ret
	}
	return o.TokenScopes
}

// GetTokenScopesOk returns a tuple with the TokenScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpRolesetRequest) GetTokenScopesOk() ([]string, bool) {
	if o == nil || o.TokenScopes == nil {
		return nil, false
	}
	return o.TokenScopes, true
}

// HasTokenScopes returns a boolean if a field has been set.
func (o *GcpRolesetRequest) HasTokenScopes() bool {
	if o != nil && o.TokenScopes != nil {
		return true
	}

	return false
}

// SetTokenScopes gets a reference to the given []string and assigns it to the TokenScopes field.
func (o *GcpRolesetRequest) SetTokenScopes(v []string) {
	o.TokenScopes = v
}

func (o GcpRolesetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bindings != nil {
		toSerialize["bindings"] = o.Bindings
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.SecretType != nil {
		toSerialize["secret_type"] = o.SecretType
	}
	if o.TokenScopes != nil {
		toSerialize["token_scopes"] = o.TokenScopes
	}
	return json.Marshal(toSerialize)
}

type NullableGcpRolesetRequest struct {
	value *GcpRolesetRequest
	isSet bool
}

func (v NullableGcpRolesetRequest) Get() *GcpRolesetRequest {
	return v.value
}

func (v *NullableGcpRolesetRequest) Set(val *GcpRolesetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpRolesetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpRolesetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpRolesetRequest(val *GcpRolesetRequest) *NullableGcpRolesetRequest {
	return &NullableGcpRolesetRequest{value: val, isSet: true}
}

func (v NullableGcpRolesetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpRolesetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


