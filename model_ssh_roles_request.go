/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// SshRolesRequest struct for SshRolesRequest
type SshRolesRequest struct {
	// [Required for Dynamic type] [Not applicable for OTP type] [Not applicable for CA type] Admin user at remote host. The shared key being registered should be for this user and should have root privileges. Everytime a dynamic credential is being generated for other users, Vault uses this admin username to login to remote host and install the generated credential for the other user.
	AdminUser *string `json:"admin_user,omitempty"`
	// When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512, default, or the empty string.
	AlgorithmSigner *string `json:"algorithm_signer,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, host certificates that are requested are allowed to use the base domains listed in \"allowed_domains\", e.g. \"example.com\". This is a separate option as in some cases this can be considered a security threat.
	AllowBareDomains *bool `json:"allow_bare_domains,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, certificates are allowed to be signed for use as a 'host'.
	AllowHostCertificates *bool `json:"allow_host_certificates,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, host certificates that are requested are allowed to use subdomains of those listed in \"allowed_domains\".
	AllowSubdomains *bool `json:"allow_subdomains,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, certificates are allowed to be signed for use as a 'user'.
	AllowUserCertificates *bool `json:"allow_user_certificates,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If true, users can override the key ID for a signed certificate with the \"key_id\" field. When false, the key ID will always be the token display name. The key ID is logged by the SSH server and can be useful for auditing.
	AllowUserKeyIds *bool `json:"allow_user_key_ids,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] A comma-separated list of critical options that certificates can have when signed. To allow any critical options, set this to an empty string.
	AllowedCriticalOptions *string `json:"allowed_critical_options,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If this option is not specified, client can request for a signed certificate for any valid host. If only certain domains are allowed, then this list enforces it.
	AllowedDomains *string `json:"allowed_domains,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] A comma-separated list of extensions that certificates can have when signed. An empty list means that no extension overrides are allowed by an end-user; explicitly specify '*' to allow any extensions to be set.
	AllowedExtensions *string `json:"allowed_extensions,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, allows the enforcement of key types and minimum key sizes to be signed.
	AllowedUserKeyLengths map[string]interface{} `json:"allowed_user_key_lengths,omitempty"`
	// [Optional for all types] [Works differently for CA type] If this option is not specified, or is '*', client can request a credential for any valid user at the remote host, including the admin user. If only certain usernames are to be allowed, then this list enforces it. If this field is set, then credentials can only be created for default_user and usernames present in this list. Setting this option will enable all the users with access to this role to fetch credentials for all other usernames in this list. Use with caution. N.B.: with the CA type, an empty list means that no users are allowed; explicitly specify '*' to allow any user.
	AllowedUsers *string `json:"allowed_users,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, Allowed users can be specified using identity template policies. Non-templated users are also permitted.
	AllowedUsersTemplate *bool `json:"allowed_users_template,omitempty"`
	// [Optional for Dynamic type] [Optional for OTP type] [Not applicable for CA type] Comma separated list of CIDR blocks for which the role is applicable for. CIDR blocks can belong to more than one role.
	CidrList *string `json:"cidr_list,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] Critical options certificates should have if none are provided when signing. This field takes in key value pairs in JSON format. Note that these are not restricted by \"allowed_critical_options\". Defaults to none.
	DefaultCriticalOptions map[string]interface{} `json:"default_critical_options,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] Extensions certificates should have if none are provided when signing. This field takes in key value pairs in JSON format. Note that these are not restricted by \"allowed_extensions\". Defaults to none.
	DefaultExtensions map[string]interface{} `json:"default_extensions,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] If set, Default extension values can be specified using identity template policies. Non-templated extension values are also permitted.
	DefaultExtensionsTemplate *bool `json:"default_extensions_template,omitempty"`
	// [Required for Dynamic type] [Required for OTP type] [Optional for CA type] Default username for which a credential will be generated. When the endpoint 'creds/' is used without a username, this value will be used as default username.
	DefaultUser *string `json:"default_user,omitempty"`
	// [Optional for Dynamic type] [Optional for OTP type] [Not applicable for CA type] Comma separated list of CIDR blocks. IP addresses belonging to these blocks are not accepted by the role. This is particularly useful when big CIDR blocks are being used by the role and certain parts of it needs to be kept out.
	ExcludeCidrList *string `json:"exclude_cidr_list,omitempty"`
	// [Optional for Dynamic type] [Not-applicable for OTP type] [Not applicable for CA type] Script used to install and uninstall public keys in the target machine. The inbuilt default install script will be for Linux hosts. For sample script, refer the project documentation website.
	InstallScript *string `json:"install_script,omitempty"`
	// [Required for Dynamic type] [Not applicable for OTP type] [Not applicable for CA type] Name of the registered key in Vault. Before creating the role, use the 'keys/' endpoint to create a named key.
	Key *string `json:"key,omitempty"`
	// [Optional for Dynamic type] [Not applicable for OTP type] [Not applicable for CA type] Length of the RSA dynamic key in bits. It is 1024 by default or it can be 2048.
	KeyBits *int32 `json:"key_bits,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] When supplied, this value specifies a custom format for the key id of a signed certificate. The following variables are available for use: '{{token_display_name}}' - The display name of the token used to make the request. '{{role_name}}' - The name of the role signing the request. '{{public_key_hash}}' - A SHA256 checksum of the public key that is being signed.
	KeyIdFormat *string `json:"key_id_format,omitempty"`
	// [Optional for Dynamic type] [Not applicable for OTP type] [Not applicable for CA type] Comma separated option specifications which will be prefixed to RSA key in authorized_keys file. Options should be valid and comply with authorized_keys file format and should not contain spaces.
	KeyOptionSpecs *string `json:"key_option_specs,omitempty"`
	// [Required for all types] Type of key used to login to hosts. It can be either 'otp', 'dynamic' or 'ca'. 'otp' type requires agent to be installed in remote hosts.
	KeyType *string `json:"key_type,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] The maximum allowed lease duration
	MaxTtl *int32 `json:"max_ttl,omitempty"`
	// The duration that the SSH certificate should be backdated by at issuance.
	NotBeforeDuration *int32 `json:"not_before_duration,omitempty"`
	// [Optional for Dynamic type] [Optional for OTP type] [Not applicable for CA type] Port number for SSH connection. Default is '22'. Port number does not play any role in creation of OTP. For 'otp' type, this is just a way to inform client about the port number to use. Port number will be returned to client by Vault server along with OTP.
	Port *int32 `json:"port,omitempty"`
	// [Not applicable for Dynamic type] [Not applicable for OTP type] [Optional for CA type] The lease duration if no specific lease duration is requested. The lease duration controls the expiration of certificates issued by this backend. Defaults to the value of max_ttl.
	Ttl *int32 `json:"ttl,omitempty"`
}

// NewSshRolesRequest instantiates a new SshRolesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshRolesRequest() *SshRolesRequest {
	this := SshRolesRequest{}
	var allowHostCertificates bool = false
	this.AllowHostCertificates = &allowHostCertificates
	var allowUserCertificates bool = false
	this.AllowUserCertificates = &allowUserCertificates
	var allowedUsersTemplate bool = false
	this.AllowedUsersTemplate = &allowedUsersTemplate
	var defaultExtensionsTemplate bool = false
	this.DefaultExtensionsTemplate = &defaultExtensionsTemplate
	var notBeforeDuration int32 = 30
	this.NotBeforeDuration = &notBeforeDuration
	return &this
}

// NewSshRolesRequestWithDefaults instantiates a new SshRolesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshRolesRequestWithDefaults() *SshRolesRequest {
	this := SshRolesRequest{}
	var allowHostCertificates bool = false
	this.AllowHostCertificates = &allowHostCertificates
	var allowUserCertificates bool = false
	this.AllowUserCertificates = &allowUserCertificates
	var allowedUsersTemplate bool = false
	this.AllowedUsersTemplate = &allowedUsersTemplate
	var defaultExtensionsTemplate bool = false
	this.DefaultExtensionsTemplate = &defaultExtensionsTemplate
	var notBeforeDuration int32 = 30
	this.NotBeforeDuration = &notBeforeDuration
	return &this
}

// GetAdminUser returns the AdminUser field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAdminUser() string {
	if o == nil || o.AdminUser == nil {
		var ret string
		return ret
	}
	return *o.AdminUser
}

// GetAdminUserOk returns a tuple with the AdminUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAdminUserOk() (*string, bool) {
	if o == nil || o.AdminUser == nil {
		return nil, false
	}
	return o.AdminUser, true
}

// HasAdminUser returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAdminUser() bool {
	if o != nil && o.AdminUser != nil {
		return true
	}

	return false
}

// SetAdminUser gets a reference to the given string and assigns it to the AdminUser field.
func (o *SshRolesRequest) SetAdminUser(v string) {
	o.AdminUser = &v
}

// GetAlgorithmSigner returns the AlgorithmSigner field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAlgorithmSigner() string {
	if o == nil || o.AlgorithmSigner == nil {
		var ret string
		return ret
	}
	return *o.AlgorithmSigner
}

// GetAlgorithmSignerOk returns a tuple with the AlgorithmSigner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAlgorithmSignerOk() (*string, bool) {
	if o == nil || o.AlgorithmSigner == nil {
		return nil, false
	}
	return o.AlgorithmSigner, true
}

// HasAlgorithmSigner returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAlgorithmSigner() bool {
	if o != nil && o.AlgorithmSigner != nil {
		return true
	}

	return false
}

// SetAlgorithmSigner gets a reference to the given string and assigns it to the AlgorithmSigner field.
func (o *SshRolesRequest) SetAlgorithmSigner(v string) {
	o.AlgorithmSigner = &v
}

// GetAllowBareDomains returns the AllowBareDomains field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowBareDomains() bool {
	if o == nil || o.AllowBareDomains == nil {
		var ret bool
		return ret
	}
	return *o.AllowBareDomains
}

// GetAllowBareDomainsOk returns a tuple with the AllowBareDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowBareDomainsOk() (*bool, bool) {
	if o == nil || o.AllowBareDomains == nil {
		return nil, false
	}
	return o.AllowBareDomains, true
}

// HasAllowBareDomains returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowBareDomains() bool {
	if o != nil && o.AllowBareDomains != nil {
		return true
	}

	return false
}

// SetAllowBareDomains gets a reference to the given bool and assigns it to the AllowBareDomains field.
func (o *SshRolesRequest) SetAllowBareDomains(v bool) {
	o.AllowBareDomains = &v
}

// GetAllowHostCertificates returns the AllowHostCertificates field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowHostCertificates() bool {
	if o == nil || o.AllowHostCertificates == nil {
		var ret bool
		return ret
	}
	return *o.AllowHostCertificates
}

// GetAllowHostCertificatesOk returns a tuple with the AllowHostCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowHostCertificatesOk() (*bool, bool) {
	if o == nil || o.AllowHostCertificates == nil {
		return nil, false
	}
	return o.AllowHostCertificates, true
}

// HasAllowHostCertificates returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowHostCertificates() bool {
	if o != nil && o.AllowHostCertificates != nil {
		return true
	}

	return false
}

// SetAllowHostCertificates gets a reference to the given bool and assigns it to the AllowHostCertificates field.
func (o *SshRolesRequest) SetAllowHostCertificates(v bool) {
	o.AllowHostCertificates = &v
}

// GetAllowSubdomains returns the AllowSubdomains field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowSubdomains() bool {
	if o == nil || o.AllowSubdomains == nil {
		var ret bool
		return ret
	}
	return *o.AllowSubdomains
}

// GetAllowSubdomainsOk returns a tuple with the AllowSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowSubdomainsOk() (*bool, bool) {
	if o == nil || o.AllowSubdomains == nil {
		return nil, false
	}
	return o.AllowSubdomains, true
}

// HasAllowSubdomains returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowSubdomains() bool {
	if o != nil && o.AllowSubdomains != nil {
		return true
	}

	return false
}

// SetAllowSubdomains gets a reference to the given bool and assigns it to the AllowSubdomains field.
func (o *SshRolesRequest) SetAllowSubdomains(v bool) {
	o.AllowSubdomains = &v
}

// GetAllowUserCertificates returns the AllowUserCertificates field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowUserCertificates() bool {
	if o == nil || o.AllowUserCertificates == nil {
		var ret bool
		return ret
	}
	return *o.AllowUserCertificates
}

// GetAllowUserCertificatesOk returns a tuple with the AllowUserCertificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowUserCertificatesOk() (*bool, bool) {
	if o == nil || o.AllowUserCertificates == nil {
		return nil, false
	}
	return o.AllowUserCertificates, true
}

// HasAllowUserCertificates returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowUserCertificates() bool {
	if o != nil && o.AllowUserCertificates != nil {
		return true
	}

	return false
}

// SetAllowUserCertificates gets a reference to the given bool and assigns it to the AllowUserCertificates field.
func (o *SshRolesRequest) SetAllowUserCertificates(v bool) {
	o.AllowUserCertificates = &v
}

// GetAllowUserKeyIds returns the AllowUserKeyIds field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowUserKeyIds() bool {
	if o == nil || o.AllowUserKeyIds == nil {
		var ret bool
		return ret
	}
	return *o.AllowUserKeyIds
}

// GetAllowUserKeyIdsOk returns a tuple with the AllowUserKeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowUserKeyIdsOk() (*bool, bool) {
	if o == nil || o.AllowUserKeyIds == nil {
		return nil, false
	}
	return o.AllowUserKeyIds, true
}

// HasAllowUserKeyIds returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowUserKeyIds() bool {
	if o != nil && o.AllowUserKeyIds != nil {
		return true
	}

	return false
}

// SetAllowUserKeyIds gets a reference to the given bool and assigns it to the AllowUserKeyIds field.
func (o *SshRolesRequest) SetAllowUserKeyIds(v bool) {
	o.AllowUserKeyIds = &v
}

// GetAllowedCriticalOptions returns the AllowedCriticalOptions field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowedCriticalOptions() string {
	if o == nil || o.AllowedCriticalOptions == nil {
		var ret string
		return ret
	}
	return *o.AllowedCriticalOptions
}

// GetAllowedCriticalOptionsOk returns a tuple with the AllowedCriticalOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowedCriticalOptionsOk() (*string, bool) {
	if o == nil || o.AllowedCriticalOptions == nil {
		return nil, false
	}
	return o.AllowedCriticalOptions, true
}

// HasAllowedCriticalOptions returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowedCriticalOptions() bool {
	if o != nil && o.AllowedCriticalOptions != nil {
		return true
	}

	return false
}

// SetAllowedCriticalOptions gets a reference to the given string and assigns it to the AllowedCriticalOptions field.
func (o *SshRolesRequest) SetAllowedCriticalOptions(v string) {
	o.AllowedCriticalOptions = &v
}

// GetAllowedDomains returns the AllowedDomains field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowedDomains() string {
	if o == nil || o.AllowedDomains == nil {
		var ret string
		return ret
	}
	return *o.AllowedDomains
}

// GetAllowedDomainsOk returns a tuple with the AllowedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowedDomainsOk() (*string, bool) {
	if o == nil || o.AllowedDomains == nil {
		return nil, false
	}
	return o.AllowedDomains, true
}

// HasAllowedDomains returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowedDomains() bool {
	if o != nil && o.AllowedDomains != nil {
		return true
	}

	return false
}

// SetAllowedDomains gets a reference to the given string and assigns it to the AllowedDomains field.
func (o *SshRolesRequest) SetAllowedDomains(v string) {
	o.AllowedDomains = &v
}

// GetAllowedExtensions returns the AllowedExtensions field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowedExtensions() string {
	if o == nil || o.AllowedExtensions == nil {
		var ret string
		return ret
	}
	return *o.AllowedExtensions
}

// GetAllowedExtensionsOk returns a tuple with the AllowedExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowedExtensionsOk() (*string, bool) {
	if o == nil || o.AllowedExtensions == nil {
		return nil, false
	}
	return o.AllowedExtensions, true
}

// HasAllowedExtensions returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowedExtensions() bool {
	if o != nil && o.AllowedExtensions != nil {
		return true
	}

	return false
}

// SetAllowedExtensions gets a reference to the given string and assigns it to the AllowedExtensions field.
func (o *SshRolesRequest) SetAllowedExtensions(v string) {
	o.AllowedExtensions = &v
}

// GetAllowedUserKeyLengths returns the AllowedUserKeyLengths field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowedUserKeyLengths() map[string]interface{} {
	if o == nil || o.AllowedUserKeyLengths == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AllowedUserKeyLengths
}

// GetAllowedUserKeyLengthsOk returns a tuple with the AllowedUserKeyLengths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowedUserKeyLengthsOk() (map[string]interface{}, bool) {
	if o == nil || o.AllowedUserKeyLengths == nil {
		return nil, false
	}
	return o.AllowedUserKeyLengths, true
}

// HasAllowedUserKeyLengths returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowedUserKeyLengths() bool {
	if o != nil && o.AllowedUserKeyLengths != nil {
		return true
	}

	return false
}

// SetAllowedUserKeyLengths gets a reference to the given map[string]interface{} and assigns it to the AllowedUserKeyLengths field.
func (o *SshRolesRequest) SetAllowedUserKeyLengths(v map[string]interface{}) {
	o.AllowedUserKeyLengths = v
}

// GetAllowedUsers returns the AllowedUsers field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowedUsers() string {
	if o == nil || o.AllowedUsers == nil {
		var ret string
		return ret
	}
	return *o.AllowedUsers
}

// GetAllowedUsersOk returns a tuple with the AllowedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowedUsersOk() (*string, bool) {
	if o == nil || o.AllowedUsers == nil {
		return nil, false
	}
	return o.AllowedUsers, true
}

// HasAllowedUsers returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowedUsers() bool {
	if o != nil && o.AllowedUsers != nil {
		return true
	}

	return false
}

// SetAllowedUsers gets a reference to the given string and assigns it to the AllowedUsers field.
func (o *SshRolesRequest) SetAllowedUsers(v string) {
	o.AllowedUsers = &v
}

// GetAllowedUsersTemplate returns the AllowedUsersTemplate field value if set, zero value otherwise.
func (o *SshRolesRequest) GetAllowedUsersTemplate() bool {
	if o == nil || o.AllowedUsersTemplate == nil {
		var ret bool
		return ret
	}
	return *o.AllowedUsersTemplate
}

// GetAllowedUsersTemplateOk returns a tuple with the AllowedUsersTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetAllowedUsersTemplateOk() (*bool, bool) {
	if o == nil || o.AllowedUsersTemplate == nil {
		return nil, false
	}
	return o.AllowedUsersTemplate, true
}

// HasAllowedUsersTemplate returns a boolean if a field has been set.
func (o *SshRolesRequest) HasAllowedUsersTemplate() bool {
	if o != nil && o.AllowedUsersTemplate != nil {
		return true
	}

	return false
}

// SetAllowedUsersTemplate gets a reference to the given bool and assigns it to the AllowedUsersTemplate field.
func (o *SshRolesRequest) SetAllowedUsersTemplate(v bool) {
	o.AllowedUsersTemplate = &v
}

// GetCidrList returns the CidrList field value if set, zero value otherwise.
func (o *SshRolesRequest) GetCidrList() string {
	if o == nil || o.CidrList == nil {
		var ret string
		return ret
	}
	return *o.CidrList
}

// GetCidrListOk returns a tuple with the CidrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetCidrListOk() (*string, bool) {
	if o == nil || o.CidrList == nil {
		return nil, false
	}
	return o.CidrList, true
}

// HasCidrList returns a boolean if a field has been set.
func (o *SshRolesRequest) HasCidrList() bool {
	if o != nil && o.CidrList != nil {
		return true
	}

	return false
}

// SetCidrList gets a reference to the given string and assigns it to the CidrList field.
func (o *SshRolesRequest) SetCidrList(v string) {
	o.CidrList = &v
}

// GetDefaultCriticalOptions returns the DefaultCriticalOptions field value if set, zero value otherwise.
func (o *SshRolesRequest) GetDefaultCriticalOptions() map[string]interface{} {
	if o == nil || o.DefaultCriticalOptions == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultCriticalOptions
}

// GetDefaultCriticalOptionsOk returns a tuple with the DefaultCriticalOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetDefaultCriticalOptionsOk() (map[string]interface{}, bool) {
	if o == nil || o.DefaultCriticalOptions == nil {
		return nil, false
	}
	return o.DefaultCriticalOptions, true
}

// HasDefaultCriticalOptions returns a boolean if a field has been set.
func (o *SshRolesRequest) HasDefaultCriticalOptions() bool {
	if o != nil && o.DefaultCriticalOptions != nil {
		return true
	}

	return false
}

// SetDefaultCriticalOptions gets a reference to the given map[string]interface{} and assigns it to the DefaultCriticalOptions field.
func (o *SshRolesRequest) SetDefaultCriticalOptions(v map[string]interface{}) {
	o.DefaultCriticalOptions = v
}

// GetDefaultExtensions returns the DefaultExtensions field value if set, zero value otherwise.
func (o *SshRolesRequest) GetDefaultExtensions() map[string]interface{} {
	if o == nil || o.DefaultExtensions == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultExtensions
}

// GetDefaultExtensionsOk returns a tuple with the DefaultExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetDefaultExtensionsOk() (map[string]interface{}, bool) {
	if o == nil || o.DefaultExtensions == nil {
		return nil, false
	}
	return o.DefaultExtensions, true
}

// HasDefaultExtensions returns a boolean if a field has been set.
func (o *SshRolesRequest) HasDefaultExtensions() bool {
	if o != nil && o.DefaultExtensions != nil {
		return true
	}

	return false
}

// SetDefaultExtensions gets a reference to the given map[string]interface{} and assigns it to the DefaultExtensions field.
func (o *SshRolesRequest) SetDefaultExtensions(v map[string]interface{}) {
	o.DefaultExtensions = v
}

// GetDefaultExtensionsTemplate returns the DefaultExtensionsTemplate field value if set, zero value otherwise.
func (o *SshRolesRequest) GetDefaultExtensionsTemplate() bool {
	if o == nil || o.DefaultExtensionsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.DefaultExtensionsTemplate
}

// GetDefaultExtensionsTemplateOk returns a tuple with the DefaultExtensionsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetDefaultExtensionsTemplateOk() (*bool, bool) {
	if o == nil || o.DefaultExtensionsTemplate == nil {
		return nil, false
	}
	return o.DefaultExtensionsTemplate, true
}

// HasDefaultExtensionsTemplate returns a boolean if a field has been set.
func (o *SshRolesRequest) HasDefaultExtensionsTemplate() bool {
	if o != nil && o.DefaultExtensionsTemplate != nil {
		return true
	}

	return false
}

// SetDefaultExtensionsTemplate gets a reference to the given bool and assigns it to the DefaultExtensionsTemplate field.
func (o *SshRolesRequest) SetDefaultExtensionsTemplate(v bool) {
	o.DefaultExtensionsTemplate = &v
}

// GetDefaultUser returns the DefaultUser field value if set, zero value otherwise.
func (o *SshRolesRequest) GetDefaultUser() string {
	if o == nil || o.DefaultUser == nil {
		var ret string
		return ret
	}
	return *o.DefaultUser
}

// GetDefaultUserOk returns a tuple with the DefaultUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetDefaultUserOk() (*string, bool) {
	if o == nil || o.DefaultUser == nil {
		return nil, false
	}
	return o.DefaultUser, true
}

// HasDefaultUser returns a boolean if a field has been set.
func (o *SshRolesRequest) HasDefaultUser() bool {
	if o != nil && o.DefaultUser != nil {
		return true
	}

	return false
}

// SetDefaultUser gets a reference to the given string and assigns it to the DefaultUser field.
func (o *SshRolesRequest) SetDefaultUser(v string) {
	o.DefaultUser = &v
}

// GetExcludeCidrList returns the ExcludeCidrList field value if set, zero value otherwise.
func (o *SshRolesRequest) GetExcludeCidrList() string {
	if o == nil || o.ExcludeCidrList == nil {
		var ret string
		return ret
	}
	return *o.ExcludeCidrList
}

// GetExcludeCidrListOk returns a tuple with the ExcludeCidrList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetExcludeCidrListOk() (*string, bool) {
	if o == nil || o.ExcludeCidrList == nil {
		return nil, false
	}
	return o.ExcludeCidrList, true
}

// HasExcludeCidrList returns a boolean if a field has been set.
func (o *SshRolesRequest) HasExcludeCidrList() bool {
	if o != nil && o.ExcludeCidrList != nil {
		return true
	}

	return false
}

// SetExcludeCidrList gets a reference to the given string and assigns it to the ExcludeCidrList field.
func (o *SshRolesRequest) SetExcludeCidrList(v string) {
	o.ExcludeCidrList = &v
}

// GetInstallScript returns the InstallScript field value if set, zero value otherwise.
func (o *SshRolesRequest) GetInstallScript() string {
	if o == nil || o.InstallScript == nil {
		var ret string
		return ret
	}
	return *o.InstallScript
}

// GetInstallScriptOk returns a tuple with the InstallScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetInstallScriptOk() (*string, bool) {
	if o == nil || o.InstallScript == nil {
		return nil, false
	}
	return o.InstallScript, true
}

// HasInstallScript returns a boolean if a field has been set.
func (o *SshRolesRequest) HasInstallScript() bool {
	if o != nil && o.InstallScript != nil {
		return true
	}

	return false
}

// SetInstallScript gets a reference to the given string and assigns it to the InstallScript field.
func (o *SshRolesRequest) SetInstallScript(v string) {
	o.InstallScript = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SshRolesRequest) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SshRolesRequest) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SshRolesRequest) SetKey(v string) {
	o.Key = &v
}

// GetKeyBits returns the KeyBits field value if set, zero value otherwise.
func (o *SshRolesRequest) GetKeyBits() int32 {
	if o == nil || o.KeyBits == nil {
		var ret int32
		return ret
	}
	return *o.KeyBits
}

// GetKeyBitsOk returns a tuple with the KeyBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetKeyBitsOk() (*int32, bool) {
	if o == nil || o.KeyBits == nil {
		return nil, false
	}
	return o.KeyBits, true
}

// HasKeyBits returns a boolean if a field has been set.
func (o *SshRolesRequest) HasKeyBits() bool {
	if o != nil && o.KeyBits != nil {
		return true
	}

	return false
}

// SetKeyBits gets a reference to the given int32 and assigns it to the KeyBits field.
func (o *SshRolesRequest) SetKeyBits(v int32) {
	o.KeyBits = &v
}

// GetKeyIdFormat returns the KeyIdFormat field value if set, zero value otherwise.
func (o *SshRolesRequest) GetKeyIdFormat() string {
	if o == nil || o.KeyIdFormat == nil {
		var ret string
		return ret
	}
	return *o.KeyIdFormat
}

// GetKeyIdFormatOk returns a tuple with the KeyIdFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetKeyIdFormatOk() (*string, bool) {
	if o == nil || o.KeyIdFormat == nil {
		return nil, false
	}
	return o.KeyIdFormat, true
}

// HasKeyIdFormat returns a boolean if a field has been set.
func (o *SshRolesRequest) HasKeyIdFormat() bool {
	if o != nil && o.KeyIdFormat != nil {
		return true
	}

	return false
}

// SetKeyIdFormat gets a reference to the given string and assigns it to the KeyIdFormat field.
func (o *SshRolesRequest) SetKeyIdFormat(v string) {
	o.KeyIdFormat = &v
}

// GetKeyOptionSpecs returns the KeyOptionSpecs field value if set, zero value otherwise.
func (o *SshRolesRequest) GetKeyOptionSpecs() string {
	if o == nil || o.KeyOptionSpecs == nil {
		var ret string
		return ret
	}
	return *o.KeyOptionSpecs
}

// GetKeyOptionSpecsOk returns a tuple with the KeyOptionSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetKeyOptionSpecsOk() (*string, bool) {
	if o == nil || o.KeyOptionSpecs == nil {
		return nil, false
	}
	return o.KeyOptionSpecs, true
}

// HasKeyOptionSpecs returns a boolean if a field has been set.
func (o *SshRolesRequest) HasKeyOptionSpecs() bool {
	if o != nil && o.KeyOptionSpecs != nil {
		return true
	}

	return false
}

// SetKeyOptionSpecs gets a reference to the given string and assigns it to the KeyOptionSpecs field.
func (o *SshRolesRequest) SetKeyOptionSpecs(v string) {
	o.KeyOptionSpecs = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *SshRolesRequest) GetKeyType() string {
	if o == nil || o.KeyType == nil {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetKeyTypeOk() (*string, bool) {
	if o == nil || o.KeyType == nil {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *SshRolesRequest) HasKeyType() bool {
	if o != nil && o.KeyType != nil {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *SshRolesRequest) SetKeyType(v string) {
	o.KeyType = &v
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
func (o *SshRolesRequest) GetMaxTtl() int32 {
	if o == nil || o.MaxTtl == nil {
		var ret int32
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetMaxTtlOk() (*int32, bool) {
	if o == nil || o.MaxTtl == nil {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *SshRolesRequest) HasMaxTtl() bool {
	if o != nil && o.MaxTtl != nil {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given int32 and assigns it to the MaxTtl field.
func (o *SshRolesRequest) SetMaxTtl(v int32) {
	o.MaxTtl = &v
}

// GetNotBeforeDuration returns the NotBeforeDuration field value if set, zero value otherwise.
func (o *SshRolesRequest) GetNotBeforeDuration() int32 {
	if o == nil || o.NotBeforeDuration == nil {
		var ret int32
		return ret
	}
	return *o.NotBeforeDuration
}

// GetNotBeforeDurationOk returns a tuple with the NotBeforeDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetNotBeforeDurationOk() (*int32, bool) {
	if o == nil || o.NotBeforeDuration == nil {
		return nil, false
	}
	return o.NotBeforeDuration, true
}

// HasNotBeforeDuration returns a boolean if a field has been set.
func (o *SshRolesRequest) HasNotBeforeDuration() bool {
	if o != nil && o.NotBeforeDuration != nil {
		return true
	}

	return false
}

// SetNotBeforeDuration gets a reference to the given int32 and assigns it to the NotBeforeDuration field.
func (o *SshRolesRequest) SetNotBeforeDuration(v int32) {
	o.NotBeforeDuration = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SshRolesRequest) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SshRolesRequest) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *SshRolesRequest) SetPort(v int32) {
	o.Port = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *SshRolesRequest) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SshRolesRequest) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *SshRolesRequest) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *SshRolesRequest) SetTtl(v int32) {
	o.Ttl = &v
}

func (o SshRolesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminUser != nil {
		toSerialize["admin_user"] = o.AdminUser
	}
	if o.AlgorithmSigner != nil {
		toSerialize["algorithm_signer"] = o.AlgorithmSigner
	}
	if o.AllowBareDomains != nil {
		toSerialize["allow_bare_domains"] = o.AllowBareDomains
	}
	if o.AllowHostCertificates != nil {
		toSerialize["allow_host_certificates"] = o.AllowHostCertificates
	}
	if o.AllowSubdomains != nil {
		toSerialize["allow_subdomains"] = o.AllowSubdomains
	}
	if o.AllowUserCertificates != nil {
		toSerialize["allow_user_certificates"] = o.AllowUserCertificates
	}
	if o.AllowUserKeyIds != nil {
		toSerialize["allow_user_key_ids"] = o.AllowUserKeyIds
	}
	if o.AllowedCriticalOptions != nil {
		toSerialize["allowed_critical_options"] = o.AllowedCriticalOptions
	}
	if o.AllowedDomains != nil {
		toSerialize["allowed_domains"] = o.AllowedDomains
	}
	if o.AllowedExtensions != nil {
		toSerialize["allowed_extensions"] = o.AllowedExtensions
	}
	if o.AllowedUserKeyLengths != nil {
		toSerialize["allowed_user_key_lengths"] = o.AllowedUserKeyLengths
	}
	if o.AllowedUsers != nil {
		toSerialize["allowed_users"] = o.AllowedUsers
	}
	if o.AllowedUsersTemplate != nil {
		toSerialize["allowed_users_template"] = o.AllowedUsersTemplate
	}
	if o.CidrList != nil {
		toSerialize["cidr_list"] = o.CidrList
	}
	if o.DefaultCriticalOptions != nil {
		toSerialize["default_critical_options"] = o.DefaultCriticalOptions
	}
	if o.DefaultExtensions != nil {
		toSerialize["default_extensions"] = o.DefaultExtensions
	}
	if o.DefaultExtensionsTemplate != nil {
		toSerialize["default_extensions_template"] = o.DefaultExtensionsTemplate
	}
	if o.DefaultUser != nil {
		toSerialize["default_user"] = o.DefaultUser
	}
	if o.ExcludeCidrList != nil {
		toSerialize["exclude_cidr_list"] = o.ExcludeCidrList
	}
	if o.InstallScript != nil {
		toSerialize["install_script"] = o.InstallScript
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.KeyBits != nil {
		toSerialize["key_bits"] = o.KeyBits
	}
	if o.KeyIdFormat != nil {
		toSerialize["key_id_format"] = o.KeyIdFormat
	}
	if o.KeyOptionSpecs != nil {
		toSerialize["key_option_specs"] = o.KeyOptionSpecs
	}
	if o.KeyType != nil {
		toSerialize["key_type"] = o.KeyType
	}
	if o.MaxTtl != nil {
		toSerialize["max_ttl"] = o.MaxTtl
	}
	if o.NotBeforeDuration != nil {
		toSerialize["not_before_duration"] = o.NotBeforeDuration
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableSshRolesRequest struct {
	value *SshRolesRequest
	isSet bool
}

func (v NullableSshRolesRequest) Get() *SshRolesRequest {
	return v.value
}

func (v *NullableSshRolesRequest) Set(val *SshRolesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSshRolesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSshRolesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshRolesRequest(val *SshRolesRequest) *NullableSshRolesRequest {
	return &NullableSshRolesRequest{value: val, isSet: true}
}

func (v NullableSshRolesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshRolesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


