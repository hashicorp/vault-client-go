/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// ApproleRoleSecretIdDestroyRequest struct for ApproleRoleSecretIdDestroyRequest
type ApproleRoleSecretIdDestroyRequest struct {
	// SecretID attached to the role.
	SecretId *string `json:"secret_id,omitempty"`
}

// NewApproleRoleSecretIdDestroyRequest instantiates a new ApproleRoleSecretIdDestroyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproleRoleSecretIdDestroyRequest() *ApproleRoleSecretIdDestroyRequest {
	this := ApproleRoleSecretIdDestroyRequest{}
	return &this
}

// NewApproleRoleSecretIdDestroyRequestWithDefaults instantiates a new ApproleRoleSecretIdDestroyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproleRoleSecretIdDestroyRequestWithDefaults() *ApproleRoleSecretIdDestroyRequest {
	this := ApproleRoleSecretIdDestroyRequest{}
	return &this
}

// GetSecretId returns the SecretId field value if set, zero value otherwise.
func (o *ApproleRoleSecretIdDestroyRequest) GetSecretId() string {
	if o == nil || o.SecretId == nil {
		var ret string
		return ret
	}
	return *o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleSecretIdDestroyRequest) GetSecretIdOk() (*string, bool) {
	if o == nil || o.SecretId == nil {
		return nil, false
	}
	return o.SecretId, true
}

// HasSecretId returns a boolean if a field has been set.
func (o *ApproleRoleSecretIdDestroyRequest) HasSecretId() bool {
	if o != nil && o.SecretId != nil {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given string and assigns it to the SecretId field.
func (o *ApproleRoleSecretIdDestroyRequest) SetSecretId(v string) {
	o.SecretId = &v
}

func (o ApproleRoleSecretIdDestroyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecretId != nil {
		toSerialize["secret_id"] = o.SecretId
	}
	return json.Marshal(toSerialize)
}

type NullableApproleRoleSecretIdDestroyRequest struct {
	value *ApproleRoleSecretIdDestroyRequest
	isSet bool
}

func (v NullableApproleRoleSecretIdDestroyRequest) Get() *ApproleRoleSecretIdDestroyRequest {
	return v.value
}

func (v *NullableApproleRoleSecretIdDestroyRequest) Set(val *ApproleRoleSecretIdDestroyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproleRoleSecretIdDestroyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproleRoleSecretIdDestroyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproleRoleSecretIdDestroyRequest(val *ApproleRoleSecretIdDestroyRequest) *NullableApproleRoleSecretIdDestroyRequest {
	return &NullableApproleRoleSecretIdDestroyRequest{value: val, isSet: true}
}

func (v NullableApproleRoleSecretIdDestroyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproleRoleSecretIdDestroyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


