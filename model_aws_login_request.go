/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// AwsLoginRequest struct for AwsLoginRequest
type AwsLoginRequest struct {
	// HTTP method to use for the AWS request when auth_type is iam. This must match what has been signed in the presigned request. Currently, POST is the only supported value
	IamHttpRequestMethod *string `json:"iam_http_request_method,omitempty"`
	// Base64-encoded request body when auth_type is iam. This must match the request body included in the signature.
	IamRequestBody *string `json:"iam_request_body,omitempty"`
	// Key/value pairs of headers for use in the sts:GetCallerIdentity HTTP requests headers when auth_type is iam. Can be either a Base64-encoded, JSON-serialized string, or a JSON object of key/value pairs. This must at a minimum include the headers over which AWS has included a signature.
	IamRequestHeaders *string `json:"iam_request_headers,omitempty"`
	// Base64-encoded full URL against which to make the AWS request when using iam auth_type.
	IamRequestUrl *string `json:"iam_request_url,omitempty"`
	// Base64 encoded EC2 instance identity document. This needs to be supplied along with the 'signature' parameter. If using 'curl' for fetching the identity document, consider using the option '-w 0' while piping the output to 'base64' binary.
	Identity *string `json:"identity,omitempty"`
	// The nonce to be used for subsequent login requests when auth_type is ec2. If this parameter is not specified at all and if reauthentication is allowed, then the backend will generate a random nonce, attaches it to the instance's identity access list entry and returns the nonce back as part of auth metadata. This value should be used with further login requests, to establish client authenticity. Clients can choose to set a custom nonce if preferred, in which case, it is recommended that clients provide a strong nonce. If a nonce is provided but with an empty value, it indicates intent to disable reauthentication. Note that, when 'disallow_reauthentication' option is enabled on either the role or the role tag, the 'nonce' holds no significance.
	Nonce *string `json:"nonce,omitempty"`
	// PKCS7 signature of the identity document when using an auth_type of ec2.
	Pkcs7 *string `json:"pkcs7,omitempty"`
	// Name of the role against which the login is being attempted. If 'role' is not specified, then the login endpoint looks for a role bearing the name of the AMI ID of the EC2 instance that is trying to login. If a matching role is not found, login fails.
	Role *string `json:"role,omitempty"`
	// Base64 encoded SHA256 RSA signature of the instance identity document. This needs to be supplied along with 'identity' parameter.
	Signature *string `json:"signature,omitempty"`
}

// NewAwsLoginRequest instantiates a new AwsLoginRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsLoginRequest() *AwsLoginRequest {
	this := AwsLoginRequest{}
	return &this
}

// NewAwsLoginRequestWithDefaults instantiates a new AwsLoginRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsLoginRequestWithDefaults() *AwsLoginRequest {
	this := AwsLoginRequest{}
	return &this
}

// GetIamHttpRequestMethod returns the IamHttpRequestMethod field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetIamHttpRequestMethod() string {
	if o == nil || o.IamHttpRequestMethod == nil {
		var ret string
		return ret
	}
	return *o.IamHttpRequestMethod
}

// GetIamHttpRequestMethodOk returns a tuple with the IamHttpRequestMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetIamHttpRequestMethodOk() (*string, bool) {
	if o == nil || o.IamHttpRequestMethod == nil {
		return nil, false
	}
	return o.IamHttpRequestMethod, true
}

// HasIamHttpRequestMethod returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasIamHttpRequestMethod() bool {
	if o != nil && o.IamHttpRequestMethod != nil {
		return true
	}

	return false
}

// SetIamHttpRequestMethod gets a reference to the given string and assigns it to the IamHttpRequestMethod field.
func (o *AwsLoginRequest) SetIamHttpRequestMethod(v string) {
	o.IamHttpRequestMethod = &v
}

// GetIamRequestBody returns the IamRequestBody field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetIamRequestBody() string {
	if o == nil || o.IamRequestBody == nil {
		var ret string
		return ret
	}
	return *o.IamRequestBody
}

// GetIamRequestBodyOk returns a tuple with the IamRequestBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetIamRequestBodyOk() (*string, bool) {
	if o == nil || o.IamRequestBody == nil {
		return nil, false
	}
	return o.IamRequestBody, true
}

// HasIamRequestBody returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasIamRequestBody() bool {
	if o != nil && o.IamRequestBody != nil {
		return true
	}

	return false
}

// SetIamRequestBody gets a reference to the given string and assigns it to the IamRequestBody field.
func (o *AwsLoginRequest) SetIamRequestBody(v string) {
	o.IamRequestBody = &v
}

// GetIamRequestHeaders returns the IamRequestHeaders field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetIamRequestHeaders() string {
	if o == nil || o.IamRequestHeaders == nil {
		var ret string
		return ret
	}
	return *o.IamRequestHeaders
}

// GetIamRequestHeadersOk returns a tuple with the IamRequestHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetIamRequestHeadersOk() (*string, bool) {
	if o == nil || o.IamRequestHeaders == nil {
		return nil, false
	}
	return o.IamRequestHeaders, true
}

// HasIamRequestHeaders returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasIamRequestHeaders() bool {
	if o != nil && o.IamRequestHeaders != nil {
		return true
	}

	return false
}

// SetIamRequestHeaders gets a reference to the given string and assigns it to the IamRequestHeaders field.
func (o *AwsLoginRequest) SetIamRequestHeaders(v string) {
	o.IamRequestHeaders = &v
}

// GetIamRequestUrl returns the IamRequestUrl field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetIamRequestUrl() string {
	if o == nil || o.IamRequestUrl == nil {
		var ret string
		return ret
	}
	return *o.IamRequestUrl
}

// GetIamRequestUrlOk returns a tuple with the IamRequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetIamRequestUrlOk() (*string, bool) {
	if o == nil || o.IamRequestUrl == nil {
		return nil, false
	}
	return o.IamRequestUrl, true
}

// HasIamRequestUrl returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasIamRequestUrl() bool {
	if o != nil && o.IamRequestUrl != nil {
		return true
	}

	return false
}

// SetIamRequestUrl gets a reference to the given string and assigns it to the IamRequestUrl field.
func (o *AwsLoginRequest) SetIamRequestUrl(v string) {
	o.IamRequestUrl = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetIdentity() string {
	if o == nil || o.Identity == nil {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetIdentityOk() (*string, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *AwsLoginRequest) SetIdentity(v string) {
	o.Identity = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *AwsLoginRequest) SetNonce(v string) {
	o.Nonce = &v
}

// GetPkcs7 returns the Pkcs7 field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetPkcs7() string {
	if o == nil || o.Pkcs7 == nil {
		var ret string
		return ret
	}
	return *o.Pkcs7
}

// GetPkcs7Ok returns a tuple with the Pkcs7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetPkcs7Ok() (*string, bool) {
	if o == nil || o.Pkcs7 == nil {
		return nil, false
	}
	return o.Pkcs7, true
}

// HasPkcs7 returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasPkcs7() bool {
	if o != nil && o.Pkcs7 != nil {
		return true
	}

	return false
}

// SetPkcs7 gets a reference to the given string and assigns it to the Pkcs7 field.
func (o *AwsLoginRequest) SetPkcs7(v string) {
	o.Pkcs7 = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *AwsLoginRequest) SetRole(v string) {
	o.Role = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *AwsLoginRequest) GetSignature() string {
	if o == nil || o.Signature == nil {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsLoginRequest) GetSignatureOk() (*string, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *AwsLoginRequest) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *AwsLoginRequest) SetSignature(v string) {
	o.Signature = &v
}

func (o AwsLoginRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IamHttpRequestMethod != nil {
		toSerialize["iam_http_request_method"] = o.IamHttpRequestMethod
	}
	if o.IamRequestBody != nil {
		toSerialize["iam_request_body"] = o.IamRequestBody
	}
	if o.IamRequestHeaders != nil {
		toSerialize["iam_request_headers"] = o.IamRequestHeaders
	}
	if o.IamRequestUrl != nil {
		toSerialize["iam_request_url"] = o.IamRequestUrl
	}
	if o.Identity != nil {
		toSerialize["identity"] = o.Identity
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.Pkcs7 != nil {
		toSerialize["pkcs7"] = o.Pkcs7
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	return json.Marshal(toSerialize)
}

type NullableAwsLoginRequest struct {
	value *AwsLoginRequest
	isSet bool
}

func (v NullableAwsLoginRequest) Get() *AwsLoginRequest {
	return v.value
}

func (v *NullableAwsLoginRequest) Set(val *AwsLoginRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsLoginRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsLoginRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsLoginRequest(val *AwsLoginRequest) *NullableAwsLoginRequest {
	return &NullableAwsLoginRequest{value: val, isSet: true}
}

func (v NullableAwsLoginRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsLoginRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


