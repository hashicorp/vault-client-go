/*
HashiCorp Vault API

HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vault

import (
	"encoding/json"
)

// ApproleRoleTokenTtlRequest struct for ApproleRoleTokenTtlRequest
type ApproleRoleTokenTtlRequest struct {
	// The initial ttl of the token to generate
	TokenTtl *int32 `json:"token_ttl,omitempty"`
}

// NewApproleRoleTokenTtlRequest instantiates a new ApproleRoleTokenTtlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApproleRoleTokenTtlRequest() *ApproleRoleTokenTtlRequest {
	this := ApproleRoleTokenTtlRequest{}
	return &this
}

// NewApproleRoleTokenTtlRequestWithDefaults instantiates a new ApproleRoleTokenTtlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApproleRoleTokenTtlRequestWithDefaults() *ApproleRoleTokenTtlRequest {
	this := ApproleRoleTokenTtlRequest{}
	return &this
}

// GetTokenTtl returns the TokenTtl field value if set, zero value otherwise.
func (o *ApproleRoleTokenTtlRequest) GetTokenTtl() int32 {
	if o == nil || o.TokenTtl == nil {
		var ret int32
		return ret
	}
	return *o.TokenTtl
}

// GetTokenTtlOk returns a tuple with the TokenTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApproleRoleTokenTtlRequest) GetTokenTtlOk() (*int32, bool) {
	if o == nil || o.TokenTtl == nil {
		return nil, false
	}
	return o.TokenTtl, true
}

// HasTokenTtl returns a boolean if a field has been set.
func (o *ApproleRoleTokenTtlRequest) HasTokenTtl() bool {
	if o != nil && o.TokenTtl != nil {
		return true
	}

	return false
}

// SetTokenTtl gets a reference to the given int32 and assigns it to the TokenTtl field.
func (o *ApproleRoleTokenTtlRequest) SetTokenTtl(v int32) {
	o.TokenTtl = &v
}

func (o ApproleRoleTokenTtlRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenTtl != nil {
		toSerialize["token_ttl"] = o.TokenTtl
	}
	return json.Marshal(toSerialize)
}

type NullableApproleRoleTokenTtlRequest struct {
	value *ApproleRoleTokenTtlRequest
	isSet bool
}

func (v NullableApproleRoleTokenTtlRequest) Get() *ApproleRoleTokenTtlRequest {
	return v.value
}

func (v *NullableApproleRoleTokenTtlRequest) Set(val *ApproleRoleTokenTtlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApproleRoleTokenTtlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApproleRoleTokenTtlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApproleRoleTokenTtlRequest(val *ApproleRoleTokenTtlRequest) *NullableApproleRoleTokenTtlRequest {
	return &NullableApproleRoleTokenTtlRequest{value: val, isSet: true}
}

func (v NullableApproleRoleTokenTtlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApproleRoleTokenTtlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


